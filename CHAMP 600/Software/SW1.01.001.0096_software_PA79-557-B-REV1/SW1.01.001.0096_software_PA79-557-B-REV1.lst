CCS PCM C Compiler, Version 4.005, 35007               17-Jul-23 17:25

               Filename: D:\Bhushan Joshi\CHAMP 600\SW1.01.001.0096_software_PA79-557-B-REV1\SW1.01.001.0096_software_PA79-557-B-REV1.lst

               ROM used: 4517 words (55%)
                         Largest free fragment is 2048
               RAM used: 170 (62%) at main() level
                         186 (68%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.0
001C:  GOTO   01F
001D:  BTFSC  0C.0
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   08D
.................... /* 
.................... * File:  PA79-557-A-REV0.c 
.................... * Author: PT03 
.................... * 
.................... * 
.................... * ********************* # MODIFICATION DETAILS # ******************************* 
.................... *   Date     Rev.No      Done By         Description 
.................... * 14-08-14   REV 0.0       PPT         DPM shows Actual current,Voltage & Ref current 
.................... *                                      ARC ON TIME & RESET, ESD ON/OFF 
.................... * 16-10-14   REV 0.0       PPT         Added ERROR 04 for NO OCV 
.................... ******************************************************************************** 
.................... */ 
....................  
....................  
.................... #include "curandref.h" 
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... //#FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... //#FUSES NIWRTC 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES INTRC 
.................... #use delay(clock=8000000) 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... //#include "D:\PRIYANKA\PROJECT\DPM\current&ref\DPM.h" 
.................... #include "controller.c" 
.................... //------------------------------------------------------------------------------ 
.................... #byte MCU_STATUS = 0x003 
.................... #bit    MCU_C = MCU_STATUS.0 
.................... #bit    MCU_DC = MCU_STATUS.1 
.................... #bit    MCU_Z = MCU_STATUS.2 
.................... #bit    MCU_PD = MCU_STATUS.3 
.................... #bit    MCU_TO = MCU_STATUS.4 
.................... #bit    MCU_RP0 = MCU_STATUS.5 
.................... #bit    MCU_RP1 = MCU_STATUS.6 
.................... #bit    MCU_IRP = MCU_STATUS.7 
.................... #byte MCU_PORTA = 0x005 
.................... #byte MCU_PORTB = 0x006 
.................... #byte MCU_PORTC = 0x007 
.................... #byte MCU_PORTD = 0x008 
.................... #byte MCU_PORTE = 0x009 
.................... #bit    MCU_RE0 = MCU_PORTE.0 
.................... #bit    MCU_RE1 = MCU_PORTE.1 
.................... #bit    MCU_RE2 = MCU_PORTE.2 
.................... #byte MCU_INTCON = 0x00B 
.................... #bit    MCU_RBIF = MCU_INTCON.0 
.................... #bit    MCU_INTF = MCU_INTCON.1 
.................... #bit    MCU_T0IF = MCU_INTCON.2 
.................... #bit    MCU_RBIE = MCU_INTCON.3 
.................... #bit    MCU_INTE = MCU_INTCON.4 
.................... #bit    MCU_T0IE = MCU_INTCON.5 
.................... #bit    MCU_PEIE = MCU_INTCON.6 
.................... #bit    MCU_GIE = MCU_INTCON.7 
.................... #byte MCU_PIR1 = 0x00C 
.................... #bit    MCU_TMR1IF = MCU_PIR1.0 
.................... #bit    MCU_TMR2IF = MCU_PIR1.1 
.................... #bit    MCU_CCP1IF = MCU_PIR1.2 
.................... #bit    MCU_SSPIF = MCU_PIR1.3 
.................... #bit    MCU_TXIF = MCU_PIR1.4 
.................... #bit    MCU_RCIF = MCU_PIR1.5 
.................... #bit    MCU_ADIF = MCU_PIR1.6 
.................... #bit    MCU_PSPIF = MCU_PIR1.7 
.................... #byte MCU_OPTION_REG = 0x181 
.................... #bit    MCU_PS0 = MCU_OPTION_REG.0 
.................... #bit    MCU_PS1 = MCU_OPTION_REG.1 
.................... #bit    MCU_PS2 = MCU_OPTION_REG.2 
.................... #bit    MCU_PSA = MCU_OPTION_REG.3 
.................... #bit    MCU_T0SE = MCU_OPTION_REG.4 
.................... #bit    MCU_T0CS = MCU_OPTION_REG.5 
.................... #bit    MCU_INTEDG = MCU_OPTION_REG.6 
.................... #bit    MCU_RBPU = MCU_OPTION_REG.7 
.................... #byte MCU_ANSEL = 0x188 
.................... #bit    MCU_ANSELANSO = MCU_ANSEL.0 
.................... #bit    MCU_ANSELANS1 = MCU_ANSEL.1 
.................... #bit    MCU_ANSELANS2 = MCU_ANSEL.2 
.................... #bit    MCU_ANSELANS3 = MCU_ANSEL.3 
.................... #bit    MCU_ANSELANS4 = MCU_ANSEL.4 
.................... #bit    MCU_ANSELANS5 = MCU_ANSEL.5 
.................... #bit    MCU_ANSELANS6 = MCU_ANSEL.6 
.................... #bit    MCU_ANSELANS7 = MCU_ANSEL.7 
.................... #byte MCU_ANSELH = 0x189 
.................... #bit    MCU_ANSELHANS8 = MCU_ANSELH.0 
.................... #bit    MCU_ANSELHANS9 = MCU_ANSELH.1 
.................... #bit    MCU_ANSELHANS10 = MCU_ANSELH.2 
.................... #bit    MCU_ANSELHANS11 = MCU_ANSELH.3 
.................... #byte MCU_ADCON0 = 0x01F 
.................... #bit    MCU_ADON = MCU_ADCON0.0 
.................... //#bit    MCU_GO/DONE = MCU_ADCON0.1 
.................... #bit    MCU_CHS0 = MCU_ADCON0.2 
.................... #bit    MCU_CHS1 = MCU_ADCON0.3 
.................... #bit    MCU_CHS2 = MCU_ADCON0.4 
.................... #bit    MCU_CHS3 = MCU_ADCON0.5 
.................... #byte MCU_OSCCON = 0x08F 
.................... #byte MCU_OSCTUNE= 0x090 
....................  
....................  
.................... #fuses HS,NOWDT,NOLVP,INTRC_IO,NOWDT,NOMCLR 
.................... #use delay(clock=8000000) 
*
0329:  MOVLW  E9
032A:  MOVWF  04
032B:  BCF    03.7
032C:  MOVF   00,W
032D:  BTFSC  03.2
032E:  GOTO   33C
032F:  MOVLW  02
0330:  MOVWF  78
0331:  CLRF   77
0332:  DECFSZ 77,F
0333:  GOTO   332
0334:  DECFSZ 78,F
0335:  GOTO   331
0336:  MOVLW  97
0337:  MOVWF  77
0338:  DECFSZ 77,F
0339:  GOTO   338
033A:  DECFSZ 00,F
033B:  GOTO   32F
033C:  RETLW  00
....................  
....................  
.................... #include "variable.c" 
.................... #define disp1      PIN_B0 
.................... #define disp2      PIN_B1 
.................... #define disp3      PIN_B2 
.................... #define disp4      PIN_B3 
.................... #define disp5      PIN_A4 
.................... #define disp6      PIN_A7 
.................... #define disp7      PIN_A6 
.................... #define disp8      PIN_B5 
....................  
.................... #define segmenta   PIN_c0 
.................... #define segmentb   PIN_c1 
.................... #define segmentc   PIN_c2 
.................... #define segmentd   PIN_c3 
.................... #define segmente   PIN_c4 
.................... #define segmentf   PIN_c5 
.................... #define segmentg   PIN_c6 
.................... #define segmentdp  PIN_c7 
....................  
.................... #define ARCONKEY    PIN_B7 
.................... #define ARCONRST    PIN_B6 
.................... #define ESDIN       PIN_B4 
.................... //#define sw1        PIN_A3 
.................... //#define sw2        PIN_A4 
.................... //#define sw3        PIN_A5 
.................... #define TIGSW      PIN_B5 
.................... //#define offset     PIN_B4 
....................  
.................... #define adcavg      256 
.................... #define leftshift   8 
.................... #define adcavg1     64 
.................... #define leftshift1   6 //8 
....................  
.................... //--------------------------------------------------------------------- 
.................... unsigned char digitcnt=0,hexvalue=0,readadcf=0,jj=0,setdp1=0,setdp=0,setarcdp=0;//mma=0,hibyte=0,lowbyte=0; //,pinout=0,,readswitch1=0 
*
100C:  CLRF   28
100D:  CLRF   29
100E:  CLRF   2A
100F:  CLRF   2B
1010:  CLRF   2C
1011:  CLRF   2D
1012:  CLRF   2E
.................... static unsigned char digit[8],offsetokf=0,model=0,range=0,weldon=0;//,band=0; 
1013:  CLRF   2F
1014:  CLRF   30
1015:  CLRF   31
1016:  CLRF   32
1017:  CLRF   33
1018:  CLRF   34
1019:  CLRF   35
101A:  CLRF   36
101B:  CLRF   37
101C:  CLRF   38
101D:  CLRF   39
101E:  CLRF   3A
.................... unsigned int32 current=0,value=0,voltage=0,cur=0,prevcur=0,curoffset=0,offcnt=0,prevoff=0;//,offset2=0; 
101F:  CLRF   3B
1020:  CLRF   3C
1021:  CLRF   3D
1022:  CLRF   3E
1023:  CLRF   3F
1024:  CLRF   40
1025:  CLRF   41
1026:  CLRF   42
1027:  CLRF   43
1028:  CLRF   44
1029:  CLRF   45
102A:  CLRF   46
102B:  CLRF   47
102C:  CLRF   48
102D:  CLRF   49
102E:  CLRF   4A
102F:  CLRF   4B
1030:  CLRF   4C
1031:  CLRF   4D
1032:  CLRF   4E
1033:  CLRF   4F
1034:  CLRF   50
1035:  CLRF   51
1036:  CLRF   52
1037:  CLRF   53
1038:  CLRF   54
1039:  CLRF   55
103A:  CLRF   56
103B:  CLRF   57
103C:  CLRF   58
103D:  CLRF   59
103E:  CLRF   5A
.................... unsigned int32 calcur=0,maxadc=675,maxshunt=400,voltage1=0,blinkcnt=0; 
103F:  CLRF   5B
1040:  CLRF   5C
1041:  CLRF   5D
1042:  CLRF   5E
1043:  MOVLW  A3
1044:  MOVWF  5F
1045:  MOVLW  02
1046:  MOVWF  60
1047:  CLRF   61
1048:  CLRF   62
1049:  MOVLW  90
104A:  MOVWF  63
104B:  MOVLW  01
104C:  MOVWF  64
104D:  CLRF   65
104E:  CLRF   66
104F:  CLRF   67
1050:  CLRF   68
1051:  CLRF   69
1052:  CLRF   6A
1053:  CLRF   6B
1054:  CLRF   6C
1055:  CLRF   6D
1056:  CLRF   6E
.................... unsigned int16 refoffset=9,vtg=0,vtgref=0,tripvolt=0,timecnt=0,arconrstcnt=0;//100;//7;//20;//123;//130;//123; //102; 
1057:  MOVLW  09
1058:  MOVWF  6F
1059:  CLRF   70
105A:  CLRF   71
105B:  CLRF   72
105C:  CLRF   73
105D:  CLRF   74
105E:  CLRF   75
105F:  CLRF   76
1060:  CLRF   7C
1061:  CLRF   7D
1062:  BSF    03.5
1063:  CLRF   20
1064:  CLRF   21
.................... unsigned int16 prevref=0,ref=0,offset1=0,ref2=0,errorp=0,constant=120,offset=0,prevvtg=1000,rstcnt=0; 
1065:  CLRF   22
1066:  CLRF   23
1067:  CLRF   24
1068:  CLRF   25
1069:  CLRF   26
106A:  CLRF   27
106B:  CLRF   28
106C:  CLRF   29
106D:  CLRF   2A
106E:  CLRF   2B
106F:  MOVLW  78
1070:  MOVWF  2C
1071:  CLRF   2D
1072:  CLRF   2E
1073:  CLRF   2F
1074:  MOVLW  E8
1075:  MOVWF  30
1076:  MOVLW  03
1077:  MOVWF  31
1078:  CLRF   32
1079:  CLRF   33
.................... unsigned char uverrf=0,overrf=0,therrf=0,errorf=0,arconf=0,dispvalf=0,arconkeyf=0,arcrstkeyf=0,ocverrf=0; 
107A:  CLRF   7E
107B:  CLRF   34
107C:  CLRF   35
107D:  CLRF   36
107E:  CLRF   37
107F:  CLRF   38
1080:  CLRF   39
1081:  CLRF   3A
1082:  CLRF   3B
.................... unsigned char prevhr=0,prevmin=0,arconrstf=0,esdonf=0,setdp2=0,tempf=0,dispcnt=0,prevsec=0,arcrstf=0,blink=0; 
1083:  CLRF   3C
1084:  CLRF   3D
1085:  CLRF   3E
1086:  CLRF   3F
1087:  CLRF   40
1088:  CLRF   41
1089:  CLRF   42
108A:  CLRF   43
108B:  CLRF   44
108C:  CLRF   45
.................... volatile unsigned char min=0,sec=0,hr=0; 
108D:  CLRF   46
108E:  CLRF   47
108F:  CLRF   48
.................... unsigned char noocvf=0,count3=0,cnt4sec=0; 
1090:  CLRF   49
1091:  CLRF   4A
1092:  CLRF   4B
.................... //unsigned int16 i=0,num=1900, 
.................... //------------------------------------------------------------------------------ 
.................... //------------------------------------------------------------------------------ 
.................... void initialise(void); 
.................... void display(void); 
.................... void short_del(void); 
.................... void inttochar1(unsigned int16); 
.................... void adc_init(void); 
.................... void inttochar(unsigned int16); 
.................... void readadc(void); 
.................... void dispmodel(void); 
.................... unsigned char readswitch(); 
.................... unsigned char chk_band(unsigned int16,unsigned int16); 
.................... void write_memory(); 
.................... void read_memory(); 
.................... void debounce(); 
.................... void readmem(); 
.................... //void inttochar2(unsigned int16 hour,unsigned int16 min); 
.................... void inttochar2(unsigned char hour,unsigned char min); 
....................  
.................... //------------------------------------------------------------------------------ 
.................... const unsigned char lookup_table[40] = { 
....................                                        0x3F, //0    // Position - 0x00 
....................                                        0x06, //1    // Position - 0x01 
....................                                        0x5B, //2    // Position - 0x02 
....................                                        0x4F, //3    // Position - 0x03 
....................                                        0x66, //4    // Position - 0x04 
....................                                        0x6D, //5    // Position - 0x05 
....................                                        0x7D, //6    // Position - 0x06 
....................                                        0x07, //7    // Position - 0x07 
....................                                        0x7F, //8    // Position - 0x08 
....................                                        0x6F, //9    // Position - 0x09 
....................                                        0x80, //DP   // Position - 0x0A 
....................                                        0x77, //A    // Position - 0x0B 
....................                                        0x7C, //B    // Position - 0x0C 
....................                                        0x39, //c    // Position - 0x0D 
....................                                        0x5E, //D    // Position - 0x0E 
....................                                        0x79, //E    // Position - 0x0F 
....................                                        0x71, //F    // Position - 0x10 
....................                                        0x3D  //0x7D, //G    // Position - 0x11 
....................                                        0x76, //H    // Position - 0x12 
....................                                        0x06, //I    // Position - 0x13 
....................                                        0x1E, //J    // Position - 0x14 
....................                                        0x70, //K    // Position - 0x15 
....................                                        0x38, //L    // Position - 0x16 
....................                                        0x55, //M    // Position - 0x17 
....................                                        0x54, //N    // Position - 0x18 
....................                                        0x3F, //O    // Position - 0x19 
....................                                        0x73, //P    // Position - 0x1A 
....................                                        0x67, //Q    // Position - 0x1B 
....................                                        0x50, //R    // Position - 0x1C 
....................                                        0x6D, //S    // Position - 0x1D 
....................                                        0x78, //T    // Position - 0x1E 
....................                                        0x1C, //3E, //U    // Position - 0x1F 
....................                                        0x3E, //1C, //1C   //V    // Position - 0x20 
....................                                        0x6A, //7E,  //W    // Position - 0x21 
....................                                        0x68, //X    // Position - 0x22 
....................                                        0x6E, //Y    // Position - 0x23 
....................                                        0x89, //Z    // Position - 0x24 
....................                                        0x00, //all seg ON  // Position - 0x25 
....................                                        0x40, //-         // Position - 0x26 
....................                                        0xFF, //o         // Position - 0x27 
.................... }; 
....................  
.................... const unsigned char lookup_table1[40] = { 
....................                                        0x3F, //0    // Position - 0x00 
....................                                        0x06, //1    // Position - 0x01 
....................                                        0x9B, //2    // Position - 0x02 
....................                                        0x8F, //3    // Position - 0x03 
....................                                        0xA6, //4    // Position - 0x04 
....................                                        0xAD, //5    // Position - 0x05 
....................                                        0xBD, //6    // Position - 0x06 
....................                                        0x07, //7    // Position - 0x07 
....................                                        0xBF, //8    // Position - 0x08 
....................                                        0xAF, //9    // Position - 0x09 
....................                                        0x40, //DP   // Position - 0x0A 
....................                                        0xB7, //A    // Position - 0x0B 
....................                                        0xBC, //B    // Position - 0x0C 
....................                                        0x39, //c    // Position - 0x0D 
....................                                        0x9E, //D    // Position - 0x0E 
....................                                        0xB9, //E    // Position - 0x0F 
....................                                        0xB1, //F    // Position - 0x10 
....................                                        0x3D  //0x7D, //G    // Position - 0x11 
....................                                        0xB6, //H    // Position - 0x12 
....................                                        0x06, //I    // Position - 0x13 
....................                                        0x1E, //J    // Position - 0x14 
....................                                        0xB0, //K    // Position - 0x15 
....................                                        0x38, //L    // Position - 0x16 
....................                                        0x95, //M    // Position - 0x17 
....................                                        0x94, //N    // Position - 0x18 
....................                                        0x3F, //O    // Position - 0x19 
....................                                        0xB3, //P    // Position - 0x1A 
....................                                        0xA7, //Q    // Position - 0x1B 
....................                                        0x90, //R    // Position - 0x1C 
....................                                        0xAD, //S    // Position - 0x1D 
....................                                        0xB8, //T    // Position - 0x1E 
....................                                        0x1C, //3E, //U    // Position - 0x1F 
....................                                        0x3E, //1C, //1C   //V    // Position - 0x20 
....................                                        0xAA, //7E,  //W    // Position - 0x21 
....................                                        0xA8, //X    // Position - 0x22 
....................                                        0xAE, //Y    // Position - 0x23 
....................                                        0x49, //Z    // Position - 0x24 
....................                                        0x00, //all seg ON  // Position - 0x25 
....................                                        0x80, //-         // Position - 0x26 
....................                                        0xFF, //o         // Position - 0x27 
.................... }; 
....................  
....................  
.................... #include "interrupt.c" 
....................  
.................... /*#int_timer0 
.................... void timer0_isr(void) 
.................... { 
....................     static unsigned int count3=0; 
....................     clear_interrupt(INT_TIMER0); 
....................     set_timer0(0xFC40);              //sets timer to interrupt in 6ms 
....................     count3++; 
....................      if(count3==10) 
....................         { 
....................             count3=0; 
....................             readswitch1=1; 
....................         } 
.................... }*/ 
....................  
.................... #int_timer1 
.................... void timer1_isr(void) 
.................... { 
....................     static unsigned char count=0,count1=0,count2=0; 
1093:  CLRF   4C
1094:  CLRF   4D
1095:  CLRF   4E
....................     clear_interrupt(INT_TIMER1); 
*
008D:  BCF    0C.0
....................     set_timer1(0xFC40);            //FC40 for 500usec at 8mhz 
008E:  MOVLW  FC
008F:  MOVWF  0F
0090:  MOVLW  40
0091:  MOVWF  0E
....................     count++; 
0092:  BSF    03.5
0093:  INCF   4C,F
....................     count1++; 
0094:  INCF   4D,F
....................     count2++; 
0095:  INCF   4E,F
....................  
....................     /*if(pinout==0) 
....................      { 
....................          pinout=1; 
....................          output_a(0X00); 
....................          //MCU_PORTA=0X00; 
....................      } 
....................      else if(pinout==1) 
....................      { 
....................          pinout=0; 
....................          output_a(0xff); 
....................          //MCU_PORTA=0XFF; 
....................      }*/ 
....................    if(count>=5)  //10 
0096:  MOVF   4C,W
0097:  SUBLW  04
0098:  BTFSC  03.0
0099:  GOTO   230
....................    { 
....................          count=0; 
009A:  CLRF   4C
....................          //inttochar(voltage); 
....................          display(); 
....................    } 
....................    if(count1>=2) 
*
0230:  MOVF   4D,W
0231:  SUBLW  01
0232:  BTFSC  03.0
0233:  GOTO   239
....................    { 
....................       count1=0; 
0234:  CLRF   4D
....................       readadcf=1; 
0235:  MOVLW  01
0236:  BCF    03.5
0237:  MOVWF  2A
0238:  BSF    03.5
....................    } 
....................    if(noocvf==1) 
0239:  DECFSZ 49,W
023A:  GOTO   242
....................    { 
....................       count3++; 
023B:  INCF   4A,F
....................       if(count3>=200) 
023C:  MOVF   4A,W
023D:  SUBLW  C7
023E:  BTFSC  03.0
023F:  GOTO   242
....................       { 
....................          count3=0; 
0240:  CLRF   4A
....................          cnt4sec++; 
0241:  INCF   4B,F
....................       } 
....................    } 
....................   /* if(count2==10) 
....................    { 
....................       count2=0; 
....................       readswitch1=1; 
....................    }*/ 
....................    if(arconrstf>=1) 
0242:  MOVF   3E,W
0243:  SUBLW  00
0244:  BTFSC  03.0
0245:  GOTO   24C
....................    { 
....................       arconrstcnt++; 
0246:  INCF   20,F
0247:  BTFSC  03.2
0248:  INCF   21,F
....................       rstcnt++; 
0249:  INCF   32,F
024A:  BTFSC  03.2
024B:  INCF   33,F
....................    } 
....................    if(weldon==1) 
024C:  BCF    03.5
024D:  DECFSZ 3A,W
024E:  GOTO   281
....................    { 
....................       timecnt++; 
024F:  INCF   7C,F
0250:  BTFSC  03.2
0251:  INCF   7D,F
....................       //blinkcnt++; 
....................       if(timecnt>=2000)//2000 
0252:  MOVF   7D,W
0253:  SUBLW  06
0254:  BTFSC  03.0
0255:  GOTO   26E
0256:  XORLW  FF
0257:  BTFSS  03.2
0258:  GOTO   25D
0259:  MOVF   7C,W
025A:  SUBLW  CF
025B:  BTFSC  03.0
025C:  GOTO   26E
....................       { 
....................          timecnt=0; 
025D:  CLRF   7D
025E:  CLRF   7C
....................          sec++; 
025F:  BSF    03.5
0260:  INCF   47,F
....................          if(arconf==1) 
0261:  DECFSZ 37,W
0262:  GOTO   26F
....................          { 
....................             //blinkcnt=0; 
....................             if(setarcdp==1) 
0263:  BCF    03.5
0264:  DECFSZ 2E,W
0265:  GOTO   26A
....................             { 
....................                setarcdp=0; 
0266:  CLRF   2E
....................                setdp=0; 
0267:  CLRF   2D
....................                setdp1=0; 
0268:  CLRF   2C
....................             } 
....................             else 
0269:  GOTO   26E
....................             { 
....................                setarcdp=1; 
026A:  MOVLW  01
026B:  MOVWF  2E
....................                setdp=1; 
026C:  MOVWF  2D
....................                setdp1=1; 
026D:  MOVWF  2C
026E:  BSF    03.5
....................             } 
....................          } 
....................       } 
....................       if(sec>=60) 
026F:  MOVF   47,W
0270:  SUBLW  3B
0271:  BTFSC  03.0
0272:  GOTO   275
....................       { 
....................          sec=0; 
0273:  CLRF   47
....................          min++; 
0274:  INCF   46,F
....................       } 
....................       if(min>=60) 
0275:  MOVF   46,W
0276:  SUBLW  3B
0277:  BTFSC  03.0
0278:  GOTO   280
....................       { 
....................          min=0; 
0279:  CLRF   46
....................          hr++; 
027A:  INCF   48,F
....................          if(hr>99) 
027B:  MOVF   48,W
027C:  SUBLW  63
027D:  BTFSC  03.0
027E:  GOTO   280
....................          { 
....................             hr=0; 
027F:  CLRF   48
0280:  BCF    03.5
....................          } 
....................       } 
....................       /*if(blinkcnt>=2000 && arconf==1) 
....................       { 
....................          blinkcnt=0; 
....................          if(setarcdp==1) 
....................          { 
....................             setarcdp=0; 
....................             setdp=0; 
....................             setdp1=0; 
....................          } 
....................          else 
....................          { 
....................             setarcdp=1; 
....................             setdp=1; 
....................             setdp1=1; 
....................          } 
....................  
....................       }*/ 
....................    } 
....................  
.................... } 
....................  
....................  
.................... #include "display.c" 
....................  
....................  
....................  
....................  
....................  
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) 
....................  
....................  
0281:  BCF    0C.0
0282:  BCF    0A.3
0283:  BCF    0A.4
0284:  GOTO   01F
.................... void main() 
.................... { 
*
1000:  CLRF   04
1001:  BCF    03.7
1002:  MOVLW  1F
1003:  ANDWF  03,F
1004:  BSF    03.5
1005:  BCF    1F.4
1006:  BCF    1F.5
1007:  MOVLW  00
1008:  MOVWF  1D
1009:  MOVLW  07
100A:  BCF    03.5
100B:  MOVWF  1F
....................    #asm 
....................          CLRF  MCU_ANSEL ;      //0-i/o,1-analog 
*
10B0:  BSF    03.6
10B1:  CLRF   08
....................          CLRF  MCU_ANSELH ; 
10B2:  CLRF   09
....................          ; 
....................          BCF   MCU_RP1; 
10B3:  BCF    03.6
....................          BCF   MCU_RP0; 
10B4:  BCF    03.5
....................          ; 
....................          BCF   MCU_RP1; 
10B5:  BCF    03.6
....................          BSF   MCU_RP0; 
10B6:  BSF    03.5
....................          MOVLW  0xff 
10B7:  MOVLW  FF
....................          MOVWF  0X90 
10B8:  BCF    03.6
10B9:  MOVWF  10
....................          MOVLW  0x73 
10BA:  MOVLW  73
....................          MOVWF  0X8F 
10BB:  MOVWF  0F
....................          BCF   MCU_RP1; 
10BC:  BCF    03.6
....................          BCF   MCU_RP0; 
10BD:  BCF    03.5
....................     #endasm 
....................       initialise(); 
10BE:  BCF    0A.4
10BF:  BCF    03.5
10C0:  GOTO   285
10C1:  BSF    0A.4
....................       adc_init(); 
10C2:  BCF    0A.4
10C3:  GOTO   2B2
10C4:  BSF    0A.4
....................   // current=000; 
....................   // inttochar1(current); 
....................    //set_tris_a(0x38); 
....................     model= readswitch(); 
10C5:  BCF    0A.4
10C6:  GOTO   2C2
10C7:  BSF    0A.4
10C8:  MOVF   78,W
10C9:  MOVWF  38
....................    set_tris_a(0x2F); //0x38 
10CA:  MOVLW  2F
10CB:  BSF    03.5
10CC:  MOVWF  05
....................    set_tris_b(0xD0);//(0x10); 
10CD:  MOVLW  D0
10CE:  MOVWF  06
....................    set_tris_c(0x00); 
*
1096:  MOVLW  FF
1097:  MOVWF  4F
*
10CF:  MOVLW  00
10D0:  MOVWF  07
10D1:  MOVWF  4F
....................  
....................    delay_ms(2); 
10D2:  MOVLW  02
10D3:  MOVWF  69
10D4:  BCF    0A.4
10D5:  BCF    03.5
10D6:  CALL   329
10D7:  BSF    0A.4
....................    digit[0]=0x27; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
10D8:  MOVLW  27
10D9:  MOVWF  2F
....................    digit[1]=0X27; 
10DA:  MOVWF  30
....................    digit[2]=0X27; 
10DB:  MOVWF  31
....................    digit[3]=0x27; //'R'- 0x30; 
10DC:  MOVWF  32
....................    digit[4]=0X27; 
10DD:  MOVWF  33
....................    digit[5]=0X27; 
10DE:  MOVWF  34
....................    digit[6]=0X27; 
10DF:  MOVWF  35
....................    digit[7]=0X27; 
10E0:  MOVWF  36
....................    //setdp=1; 
....................    delay_ms(500); 
10E1:  MOVLW  02
10E2:  BSF    03.5
10E3:  MOVWF  68
10E4:  MOVLW  FA
10E5:  MOVWF  69
10E6:  BCF    0A.4
10E7:  BCF    03.5
10E8:  CALL   329
10E9:  BSF    0A.4
10EA:  BSF    03.5
10EB:  DECFSZ 68,F
10EC:  GOTO   0E4
....................  
....................    digit[0]=0x0E; //'D'- 0x30; 
10ED:  MOVLW  0E
10EE:  BCF    03.5
10EF:  MOVWF  2F
....................    digit[1]=0x19; //'O'- 0x30; 
10F0:  MOVLW  19
10F1:  MOVWF  30
....................    digit[2]=0x1C; //'R'- 0x30; 
10F2:  MOVLW  1C
10F3:  MOVWF  31
....................    digit[3]=0X0B;  //'A'- 0x30; 
10F4:  MOVLW  0B
10F5:  MOVWF  32
....................    dispmodel(); 
10F6:  BCF    0A.4
10F7:  GOTO   33D
10F8:  BSF    0A.4
....................    setdp=0; 
10F9:  CLRF   2D
....................    delay_ms(500); 
10FA:  MOVLW  02
10FB:  BSF    03.5
10FC:  MOVWF  68
10FD:  MOVLW  FA
10FE:  MOVWF  69
10FF:  BCF    0A.4
1100:  BCF    03.5
1101:  CALL   329
1102:  BSF    0A.4
1103:  BSF    03.5
1104:  DECFSZ 68,F
1105:  GOTO   0FD
....................    delay_ms(500); 
1106:  MOVLW  02
1107:  MOVWF  68
1108:  MOVLW  FA
1109:  MOVWF  69
110A:  BCF    0A.4
110B:  BCF    03.5
110C:  CALL   329
110D:  BSF    0A.4
110E:  BSF    03.5
110F:  DECFSZ 68,F
1110:  GOTO   108
....................  
....................    digit[0]=0x0F; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
1111:  MOVLW  0F
1112:  BCF    03.5
1113:  MOVWF  2F
....................    digit[1]=0X20; 
1114:  MOVLW  20
1115:  MOVWF  30
....................    digit[2]=0X01; 
1116:  MOVLW  01
1117:  MOVWF  31
....................    digit[3]=0x1C; //'R'- 0x30; 
1118:  MOVLW  1C
1119:  MOVWF  32
....................    digit[4]=0X00; 
111A:  CLRF   33
....................    digit[5]=0X00; 
111B:  CLRF   34
....................    digit[6]=0X00; 
111C:  CLRF   35
....................    digit[7]=0X00; 
111D:  CLRF   36
....................    setdp=1; 
111E:  MOVLW  01
111F:  MOVWF  2D
....................    delay_ms(500); 
1120:  MOVLW  02
1121:  BSF    03.5
1122:  MOVWF  68
1123:  MOVLW  FA
1124:  MOVWF  69
1125:  BCF    0A.4
1126:  BCF    03.5
1127:  CALL   329
1128:  BSF    0A.4
1129:  BSF    03.5
112A:  DECFSZ 68,F
112B:  GOTO   123
....................    read_memory(); 
112C:  BCF    0A.4
112D:  BCF    03.5
112E:  GOTO   3F5
112F:  BSF    0A.4
....................     esdonf=0; 
1130:  BSF    03.5
1131:  CLRF   3F
....................    //mma=1; 
....................  
....................    while(1) 
....................    { 
....................  
....................            if(readadcf==1) 
1132:  BCF    03.5
1133:  DECFSZ 2A,W
1134:  GOTO   13B
....................            { 
....................                readadc(); 
1135:  BCF    0A.4
1136:  BSF    0A.3
1137:  GOTO   000
1138:  BSF    0A.4
1139:  BCF    0A.3
....................                readadcf=0; 
113A:  CLRF   2A
....................            } 
....................           //******************************************************************** 
....................          /* if(!input(ESDIN)) 
....................           { 
....................              if(arconf==0) 
....................              { 
....................                 digit[0]=0x0F; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
....................                 digit[1]=0X1D; 
....................                 digit[2]=0X0E; 
....................                 digit[3]=0x25; //'R'- 0x30; 
....................                 digit[4]=0X25; 
....................                 digit[5]=0X19; 
....................                 digit[6]=0X18; 
....................                 digit[7]=0X25; 
....................                 setdp=0; 
....................                 esdonf=1; 
....................                 dispvalf=1; 
....................              } 
....................           } 
....................           else 
....................           { 
....................             esdonf=0; 
....................           }*/ 
....................  
....................           //******************************************************************** 
....................           if((!input(ARCONKEY))&&(arcrstkeyf==0)) 
113B:  BSF    03.5
113C:  BSF    06.7
113D:  BCF    03.5
113E:  BTFSC  06.7
113F:  GOTO   1A5
1140:  BSF    03.5
1141:  MOVF   3A,F
1142:  BTFSC  03.2
1143:  GOTO   146
1144:  BCF    03.5
1145:  GOTO   1A5
....................           { 
....................              debounce(); 
1146:  BCF    0A.4
1147:  BCF    03.5
1148:  CALL   72E
1149:  BSF    0A.4
....................              debounce(); 
114A:  BCF    0A.4
114B:  CALL   72E
114C:  BSF    0A.4
....................              delay_ms(500); 
114D:  MOVLW  02
114E:  BSF    03.5
114F:  MOVWF  68
1150:  MOVLW  FA
1151:  MOVWF  69
1152:  BCF    0A.4
1153:  BCF    03.5
1154:  CALL   329
1155:  BSF    0A.4
1156:  BSF    03.5
1157:  DECFSZ 68,F
1158:  GOTO   150
....................              arconkeyf=1; 
1159:  MOVLW  01
115A:  MOVWF  39
....................              if(!input(ARCONKEY)) 
115B:  BSF    06.7
115C:  BCF    03.5
115D:  BTFSC  06.7
115E:  GOTO   1A4
....................              { 
....................                 if(tempf==0) 
115F:  BSF    03.5
1160:  MOVF   41,F
1161:  BTFSS  03.2
1162:  GOTO   183
....................                 { 
....................                    setdp=0; 
1163:  BCF    03.5
1164:  CLRF   2D
....................                    digit[0]=0x1C; 
1165:  MOVLW  1C
1166:  MOVWF  2F
....................                    digit[1]=0X19; 
1167:  MOVLW  19
1168:  MOVWF  30
....................                    digit[2]=0X18;//r   //aron time 
1169:  MOVLW  18
116A:  MOVWF  31
....................                    digit[3]=0x0B;//a 
116B:  MOVLW  0B
116C:  MOVWF  32
....................                    digit[4]=0X1E; 
116D:  MOVLW  1E
116E:  MOVWF  33
....................                    digit[5]=0X13; 
116F:  MOVLW  13
1170:  MOVWF  34
....................                    digit[6]=0X17; 
1171:  MOVLW  17
1172:  MOVWF  35
....................                    digit[7]=0X0F; 
1173:  MOVLW  0F
1174:  MOVWF  36
....................                    delay_ms(1000); 
1175:  MOVLW  04
1176:  BSF    03.5
1177:  MOVWF  68
1178:  MOVLW  FA
1179:  MOVWF  69
117A:  BCF    0A.4
117B:  BCF    03.5
117C:  CALL   329
117D:  BSF    0A.4
117E:  BSF    03.5
117F:  DECFSZ 68,F
1180:  GOTO   178
....................                    tempf=1; 
1181:  MOVLW  01
1182:  MOVWF  41
....................                 } 
....................                 digit[0]=0x1C; 
1183:  MOVLW  1C
1184:  BCF    03.5
1185:  MOVWF  2F
....................                 digit[1]=0X17; 
1186:  MOVLW  17
1187:  MOVWF  30
....................                 digit[2]=0X18; 
1188:  MOVLW  18
1189:  MOVWF  31
....................                 digit[3]=0x12; 
118A:  MOVLW  12
118B:  MOVWF  32
....................                 //inttochar2(min,sec); 
....................                 inttochar2(min,hr); 
118C:  BSF    03.5
118D:  MOVF   46,W
118E:  MOVWF  68
118F:  MOVF   48,W
1190:  MOVWF  69
1191:  BCF    0A.4
1192:  BCF    03.5
1193:  GOTO   74C
1194:  BSF    0A.4
....................                 setdp2=1; 
1195:  MOVLW  01
1196:  BSF    03.5
1197:  MOVWF  40
....................                 arconf=1; 
1198:  MOVWF  37
....................                 if(weldon==0) 
1199:  BCF    03.5
119A:  MOVF   3A,F
119B:  BTFSS  03.2
119C:  GOTO   1A0
....................                 { 
....................                   setdp=1; 
119D:  MOVLW  01
119E:  MOVWF  2D
....................                   setdp1=1; 
119F:  MOVWF  2C
....................                 } 
....................                 dispvalf=1; 
11A0:  MOVLW  01
11A1:  BSF    03.5
11A2:  MOVWF  38
11A3:  BCF    03.5
....................                 //setdp=0; 
....................              } 
....................           } 
....................           else if(arcrstkeyf==0) 
11A4:  GOTO   1B2
11A5:  BSF    03.5
11A6:  MOVF   3A,F
11A7:  BTFSS  03.2
11A8:  GOTO   1B1
....................           { 
....................              arconf=0; 
11A9:  CLRF   37
....................              setarcdp=0; 
11AA:  BCF    03.5
11AB:  CLRF   2E
....................              setdp1=0; 
11AC:  CLRF   2C
....................              setdp2=0; 
11AD:  BSF    03.5
11AE:  CLRF   40
....................              tempf=0; 
11AF:  CLRF   41
....................              arconkeyf=0; 
11B0:  CLRF   39
11B1:  BCF    03.5
....................           } 
....................  
....................           if((!input(ARCONRST)) && (weldon==0)&& (arconkeyf==0)) 
11B2:  BSF    03.5
11B3:  BSF    06.6
11B4:  BCF    03.5
11B5:  BTFSC  06.6
11B6:  GOTO   255
11B7:  MOVF   3A,F
11B8:  BTFSS  03.2
11B9:  GOTO   255
11BA:  BSF    03.5
11BB:  MOVF   39,F
11BC:  BTFSC  03.2
11BD:  GOTO   1C0
11BE:  BCF    03.5
11BF:  GOTO   255
....................           { 
....................             // arconrstf=1; 
....................              arcrstkeyf=1; 
11C0:  MOVLW  01
11C1:  MOVWF  3A
....................              arconrstf=1; 
11C2:  MOVWF  3E
....................              arconf=1; 
11C3:  MOVWF  37
....................              setdp1=0; 
11C4:  BCF    03.5
11C5:  CLRF   2C
....................              setdp2=0; 
11C6:  BSF    03.5
11C7:  CLRF   40
....................              setdp=0; 
11C8:  BCF    03.5
11C9:  CLRF   2D
....................              if(arconrstcnt<8000 && arcrstf==0) 
11CA:  BSF    03.5
11CB:  MOVF   21,W
11CC:  SUBLW  1F
11CD:  BTFSS  03.0
11CE:  GOTO   21A
11CF:  BTFSS  03.2
11D0:  GOTO   1D5
11D1:  MOVF   20,W
11D2:  SUBLW  3F
11D3:  BTFSS  03.0
11D4:  GOTO   21A
11D5:  MOVF   44,F
11D6:  BTFSS  03.2
11D7:  GOTO   21A
....................              { 
....................                 if((rstcnt>=1000)&& !blink) 
11D8:  MOVF   33,W
11D9:  SUBLW  02
11DA:  BTFSC  03.0
11DB:  GOTO   1FD
11DC:  XORLW  FF
11DD:  BTFSS  03.2
11DE:  GOTO   1E3
11DF:  MOVF   32,W
11E0:  SUBLW  E7
11E1:  BTFSC  03.0
11E2:  GOTO   1FD
11E3:  MOVF   45,F
11E4:  BTFSS  03.2
11E5:  GOTO   1FD
....................                 { 
....................                     rstcnt=0; 
11E6:  CLRF   33
11E7:  CLRF   32
....................                     blink=1; 
11E8:  MOVLW  01
11E9:  MOVWF  45
....................                     digit[0]=0x0F; //E  //0X40;   //'D'- 0x30;; 
11EA:  MOVLW  0F
11EB:  BCF    03.5
11EC:  MOVWF  2F
....................                     digit[1]=0X1D; //S 
11ED:  MOVLW  1D
11EE:  MOVWF  30
....................                     digit[2]=0X1E; //T 
11EF:  MOVLW  1E
11F0:  MOVWF  31
....................                     digit[3]=0x1C; //R 
11F1:  MOVLW  1C
11F2:  MOVWF  32
....................                     digit[4]=0X17; //M 
11F3:  MOVLW  17
11F4:  MOVWF  33
....................                     digit[5]=0X19; //O 
11F5:  MOVLW  19
11F6:  MOVWF  34
....................                     digit[6]=0X0E; //D 
11F7:  MOVLW  0E
11F8:  MOVWF  35
....................                     digit[7]=0X0F; //E 
11F9:  MOVLW  0F
11FA:  MOVWF  36
....................                 } 
....................                 else if((rstcnt>=1000)&& blink) 
11FB:  GOTO   218
11FC:  BSF    03.5
11FD:  MOVF   33,W
11FE:  SUBLW  02
11FF:  BTFSC  03.0
1200:  GOTO   219
1201:  XORLW  FF
1202:  BTFSS  03.2
1203:  GOTO   208
1204:  MOVF   32,W
1205:  SUBLW  E7
1206:  BTFSC  03.0
1207:  GOTO   219
1208:  MOVF   45,F
1209:  BTFSC  03.2
120A:  GOTO   219
....................                 { 
....................                     rstcnt=0; 
120B:  CLRF   33
120C:  CLRF   32
....................                     blink=0; 
120D:  CLRF   45
....................                     digit[0]=0x25; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
120E:  MOVLW  25
120F:  BCF    03.5
1210:  MOVWF  2F
....................                     digit[1]=0x25; 
1211:  MOVWF  30
....................                     digit[2]=0x25; 
1212:  MOVWF  31
....................                     digit[3]=0x25; //'R'- 0x30; 
1213:  MOVWF  32
....................                     digit[4]=0x25; 
1214:  MOVWF  33
....................                     digit[5]=0x25; 
1215:  MOVWF  34
....................                     digit[6]=0x25; 
1216:  MOVWF  35
....................                     digit[7]=0x25; 
1217:  MOVWF  36
1218:  BSF    03.5
....................                 } 
....................              } 
....................              else if(arconrstcnt>=8000) 
1219:  GOTO   251
121A:  MOVF   21,W
121B:  SUBLW  1E
121C:  BTFSC  03.0
121D:  GOTO   251
121E:  XORLW  FF
121F:  BTFSS  03.2
1220:  GOTO   225
1221:  MOVF   20,W
1222:  SUBLW  3F
1223:  BTFSC  03.0
1224:  GOTO   251
....................              { 
....................                arcrstf=2; 
1225:  MOVLW  02
1226:  MOVWF  44
....................                rstcnt=0; 
1227:  CLRF   33
1228:  CLRF   32
....................                arconrstf=0; 
1229:  CLRF   3E
....................                arconrstcnt=0; 
122A:  CLRF   21
122B:  CLRF   20
....................                digit[0]=0x0F; //E  //0X40;   //'D'- 0x30;; 
122C:  MOVLW  0F
122D:  BCF    03.5
122E:  MOVWF  2F
....................                digit[1]=0X1D; //S 
122F:  MOVLW  1D
1230:  MOVWF  30
....................                digit[2]=0X1E; //T 
1231:  MOVLW  1E
1232:  MOVWF  31
....................                digit[3]=0x1C; //R 
1233:  MOVLW  1C
1234:  MOVWF  32
....................                digit[4]=0X0E; //D 
1235:  MOVLW  0E
1236:  MOVWF  33
....................                digit[5]=0X19; //O 
1237:  MOVLW  19
1238:  MOVWF  34
....................                digit[6]=0X18; //N 
1239:  MOVLW  18
123A:  MOVWF  35
....................                digit[7]=0X0F; //E 
123B:  MOVLW  0F
123C:  MOVWF  36
....................                hr=0; 
123D:  BSF    03.5
123E:  CLRF   48
....................                min=0; 
123F:  CLRF   46
....................                sec=0; 
1240:  CLRF   47
....................                write_memory(); 
1241:  BCF    0A.4
1242:  BCF    03.5
1243:  CALL   785
1244:  BSF    0A.4
....................                delay_ms(1000); 
1245:  MOVLW  04
1246:  BSF    03.5
1247:  MOVWF  68
1248:  MOVLW  FA
1249:  MOVWF  69
124A:  BCF    0A.4
124B:  BCF    03.5
124C:  CALL   329
124D:  BSF    0A.4
124E:  BSF    03.5
124F:  DECFSZ 68,F
1250:  GOTO   248
....................              } 
....................              dispvalf=1; 
1251:  MOVLW  01
1252:  MOVWF  38
....................           } 
....................           else if((arconkeyf==0)) 
1253:  GOTO   262
1254:  BCF    03.5
1255:  BSF    03.5
1256:  MOVF   39,F
1257:  BTFSS  03.2
1258:  GOTO   262
....................           { 
....................             arconrstf=0; 
1259:  CLRF   3E
....................             arconrstcnt=0; 
125A:  CLRF   21
125B:  CLRF   20
....................             arcrstf=0; 
125C:  CLRF   44
....................             arcrstkeyf=0; 
125D:  CLRF   3A
....................             arconf=0; 
125E:  CLRF   37
....................             blink=0; 
125F:  CLRF   45
....................             rstcnt=0; 
1260:  CLRF   33
1261:  CLRF   32
....................           } 
....................          //**************************************************************** 
....................            if(uverrf==1 || overrf==1 || therrf==1 || ocverrf==1) 
1262:  DECFSZ 7E,W
1263:  GOTO   265
1264:  GOTO   26D
1265:  DECFSZ 34,W
1266:  GOTO   268
1267:  GOTO   26D
1268:  DECFSZ 35,W
1269:  GOTO   26B
126A:  GOTO   26D
126B:  DECFSZ 3B,W
126C:  GOTO   2B7
....................            { 
....................               if(uverrf==1) 
126D:  DECFSZ 7E,W
126E:  GOTO   27E
....................               { 
....................                  digit[0]=0x1C; //R 
126F:  MOVLW  1C
1270:  BCF    03.5
1271:  MOVWF  2F
....................                  digit[1]=0X1C; //R 
1272:  MOVWF  30
....................                  digit[2]=0X26; //E 
1273:  MOVLW  26
1274:  MOVWF  31
....................                  digit[3]=0x0F; // 
1275:  MOVLW  0F
1276:  MOVWF  32
....................                  digit[4]=0X00; 
1277:  CLRF   33
....................                  digit[5]=0X00; 
1278:  CLRF   34
....................                  digit[6]=0X00; 
1279:  CLRF   35
....................                  digit[7]=0X01; 
127A:  MOVLW  01
127B:  MOVWF  36
....................               } 
....................               else if(overrf==1) 
127C:  GOTO   2AF
127D:  BSF    03.5
127E:  DECFSZ 34,W
127F:  GOTO   28F
....................               { 
....................                  digit[0]=0x1C; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
1280:  MOVLW  1C
1281:  BCF    03.5
1282:  MOVWF  2F
....................                  digit[1]=0X1C; 
1283:  MOVWF  30
....................                  digit[2]=0X26; 
1284:  MOVLW  26
1285:  MOVWF  31
....................                  digit[3]=0x0F; //'R'- 0x30; 
1286:  MOVLW  0F
1287:  MOVWF  32
....................                  digit[4]=0X00; 
1288:  CLRF   33
....................                  digit[5]=0X00; 
1289:  CLRF   34
....................                  digit[6]=0X00; 
128A:  CLRF   35
....................                  digit[7]=0X02; 
128B:  MOVLW  02
128C:  MOVWF  36
....................               } 
....................               else if(therrf==1) 
128D:  GOTO   2AF
128E:  BSF    03.5
128F:  DECFSZ 35,W
1290:  GOTO   2A0
....................               { 
....................                  digit[0]=0x1C; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
1291:  MOVLW  1C
1292:  BCF    03.5
1293:  MOVWF  2F
....................                  digit[1]=0X1C; 
1294:  MOVWF  30
....................                  digit[2]=0X26; 
1295:  MOVLW  26
1296:  MOVWF  31
....................                  digit[3]=0x0F; //'R'- 0x30; 
1297:  MOVLW  0F
1298:  MOVWF  32
....................                  digit[4]=0X00; 
1299:  CLRF   33
....................                  digit[5]=0X00; 
129A:  CLRF   34
....................                  digit[6]=0X00; 
129B:  CLRF   35
....................                  digit[7]=0X03; 
129C:  MOVLW  03
129D:  MOVWF  36
....................               } 
....................               else if(ocverrf==1) 
129E:  GOTO   2AF
129F:  BSF    03.5
12A0:  DECFSZ 3B,W
12A1:  GOTO   2B0
....................               { 
....................                  digit[0]=0x1C; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
12A2:  MOVLW  1C
12A3:  BCF    03.5
12A4:  MOVWF  2F
....................                  digit[1]=0X1C; 
12A5:  MOVWF  30
....................                  digit[2]=0X26; 
12A6:  MOVLW  26
12A7:  MOVWF  31
....................                  digit[3]=0x0F; //'R'- 0x30; 
12A8:  MOVLW  0F
12A9:  MOVWF  32
....................                  digit[4]=0X00; 
12AA:  CLRF   33
....................                  digit[5]=0X00; 
12AB:  CLRF   34
....................                  digit[6]=0X00; 
12AC:  CLRF   35
....................                  digit[7]=0X04; 
12AD:  MOVLW  04
12AE:  MOVWF  36
12AF:  BSF    03.5
....................               } 
....................               errorf=1; 
12B0:  MOVLW  01
12B1:  MOVWF  36
....................               setdp=0; 
12B2:  BCF    03.5
12B3:  CLRF   2D
....................               dispcnt=1; 
12B4:  BSF    03.5
12B5:  MOVWF  42
....................            } 
....................            else 
12B6:  GOTO   2BD
....................            { 
....................               errorf=0; 
12B7:  CLRF   36
....................               if(dispcnt==1) 
12B8:  DECFSZ 42,W
12B9:  GOTO   2BD
....................               { 
....................                  dispcnt=0; 
12BA:  CLRF   42
....................                  dispvalf=1; 
12BB:  MOVLW  01
12BC:  MOVWF  38
....................               } 
....................            } 
....................           //******************************************************************** 
....................            if((errorf==0) && (arconf==0) && (esdonf==0)) 
12BD:  MOVF   36,F
12BE:  BTFSS  03.2
12BF:  GOTO   45E
12C0:  MOVF   37,F
12C1:  BTFSS  03.2
12C2:  GOTO   45E
12C3:  MOVF   3F,F
12C4:  BTFSS  03.2
12C5:  GOTO   45E
....................            { 
....................               if(weldon==1) 
12C6:  BCF    03.5
12C7:  DECFSZ 3A,W
12C8:  GOTO   391
....................               { 
....................  
....................                 if((prevcur!=current)||(dispvalf==1))// && offsetokf==1) 
12C9:  MOVF   3B,W
12CA:  SUBWF  4B,W
12CB:  BTFSS  03.2
12CC:  GOTO   2DD
12CD:  MOVF   3C,W
12CE:  SUBWF  4C,W
12CF:  BTFSS  03.2
12D0:  GOTO   2DD
12D1:  MOVF   3D,W
12D2:  SUBWF  4D,W
12D3:  BTFSS  03.2
12D4:  GOTO   2DD
12D5:  MOVF   3E,W
12D6:  SUBWF  4E,W
12D7:  BTFSS  03.2
12D8:  GOTO   2DD
12D9:  BSF    03.5
12DA:  DECFSZ 38,W
12DB:  GOTO   2F9
12DC:  BCF    03.5
....................                  { 
....................                     inttochar1(current); 
12DD:  MOVF   3C,W
12DE:  BSF    03.5
12DF:  MOVWF  69
12E0:  BCF    03.5
12E1:  MOVF   3B,W
12E2:  BSF    03.5
12E3:  MOVWF  68
12E4:  MOVF   69,W
12E5:  MOVWF  6B
12E6:  MOVF   68,W
12E7:  MOVWF  6A
12E8:  BCF    0A.4
12E9:  BSF    0A.3
12EA:  BCF    03.5
12EB:  CALL   47A
12EC:  BSF    0A.4
12ED:  BCF    0A.3
....................                     prevcur=current; 
12EE:  MOVF   3E,W
12EF:  MOVWF  4E
12F0:  MOVF   3D,W
12F1:  MOVWF  4D
12F2:  MOVF   3C,W
12F3:  MOVWF  4C
12F4:  MOVF   3B,W
12F5:  MOVWF  4B
....................                     prevref=0; 
12F6:  BSF    03.5
12F7:  CLRF   23
12F8:  CLRF   22
....................                  } 
....................                  if((prevvtg!=voltage)||(dispvalf==1)) 
12F9:  BCF    03.5
12FA:  MOVF   43,W
12FB:  BSF    03.5
12FC:  SUBWF  30,W
12FD:  BTFSS  03.2
12FE:  GOTO   313
12FF:  BCF    03.5
1300:  MOVF   44,W
1301:  BSF    03.5
1302:  SUBWF  31,W
1303:  BTFSS  03.2
1304:  GOTO   313
1305:  BCF    03.5
1306:  MOVF   45,F
1307:  BTFSC  03.2
1308:  GOTO   30B
1309:  BSF    03.5
130A:  GOTO   313
130B:  MOVF   46,F
130C:  BTFSC  03.2
130D:  GOTO   310
130E:  BSF    03.5
130F:  GOTO   313
1310:  BSF    03.5
1311:  DECFSZ 38,W
1312:  GOTO   38E
....................                  { 
....................  
....................                     if(voltage<=9999) 
1313:  BCF    03.5
1314:  MOVF   46,F
1315:  BTFSS  03.2
1316:  GOTO   338
1317:  MOVF   45,F
1318:  BTFSS  03.2
1319:  GOTO   338
131A:  MOVF   44,W
131B:  SUBLW  27
131C:  BTFSS  03.0
131D:  GOTO   338
131E:  BTFSS  03.2
131F:  GOTO   324
1320:  MOVF   43,W
1321:  SUBLW  0F
1322:  BTFSS  03.0
1323:  GOTO   338
....................                     { 
....................                        inttochar(voltage); 
1324:  MOVF   44,W
1325:  BSF    03.5
1326:  MOVWF  69
1327:  BCF    03.5
1328:  MOVF   43,W
1329:  BSF    03.5
132A:  MOVWF  68
132B:  MOVF   69,W
132C:  MOVWF  6B
132D:  MOVF   68,W
132E:  MOVWF  6A
132F:  BCF    0A.4
1330:  BSF    0A.3
1331:  BCF    03.5
1332:  CALL   50F
1333:  BSF    0A.4
1334:  BCF    0A.3
....................                        setdp=1; 
1335:  MOVLW  01
1336:  MOVWF  2D
....................                     } 
....................                     else 
1337:  GOTO   387
....................                     { 
....................                         voltage1=(voltage/100.0); 
1338:  MOVF   46,W
1339:  BSF    03.5
133A:  MOVWF  6B
133B:  BCF    03.5
133C:  MOVF   45,W
133D:  BSF    03.5
133E:  MOVWF  6A
133F:  BCF    03.5
1340:  MOVF   44,W
1341:  BSF    03.5
1342:  MOVWF  69
1343:  BCF    03.5
1344:  MOVF   43,W
1345:  BSF    03.5
1346:  MOVWF  68
1347:  BCF    0A.4
1348:  BCF    03.5
1349:  CALL   64D
134A:  BSF    0A.4
134B:  MOVF   7A,W
134C:  BSF    03.5
134D:  MOVWF  6F
134E:  MOVF   79,W
134F:  MOVWF  6E
1350:  MOVF   78,W
1351:  MOVWF  6D
1352:  MOVF   77,W
1353:  MOVWF  6C
1354:  BSF    03.6
1355:  CLRF   13
1356:  CLRF   12
1357:  MOVLW  48
1358:  MOVWF  11
1359:  MOVLW  85
135A:  MOVWF  10
135B:  BCF    0A.4
135C:  BCF    03.5
135D:  BCF    03.6
135E:  CALL   453
135F:  BSF    0A.4
1360:  MOVF   7A,W
1361:  BSF    03.5
1362:  MOVWF  6F
1363:  MOVF   79,W
1364:  MOVWF  6E
1365:  MOVF   78,W
1366:  MOVWF  6D
1367:  MOVF   77,W
1368:  MOVWF  6C
1369:  BCF    0A.4
136A:  BCF    03.5
136B:  CALL   709
136C:  BSF    0A.4
136D:  MOVF   7A,W
136E:  MOVWF  6A
136F:  MOVF   79,W
1370:  MOVWF  69
1371:  MOVF   78,W
1372:  MOVWF  68
1373:  MOVF   77,W
1374:  MOVWF  67
....................                         inttochar(voltage1); 
1375:  MOVF   68,W
1376:  BSF    03.5
1377:  MOVWF  69
1378:  BCF    03.5
1379:  MOVF   67,W
137A:  BSF    03.5
137B:  MOVWF  68
137C:  MOVF   69,W
137D:  MOVWF  6B
137E:  MOVF   68,W
137F:  MOVWF  6A
1380:  BCF    0A.4
1381:  BSF    0A.3
1382:  BCF    03.5
1383:  CALL   50F
1384:  BSF    0A.4
1385:  BCF    0A.3
....................                         setdp=0; 
1386:  CLRF   2D
....................                     } 
....................                     prevvtg=voltage; 
1387:  MOVF   44,W
1388:  BSF    03.5
1389:  MOVWF  31
138A:  BCF    03.5
138B:  MOVF   43,W
138C:  BSF    03.5
138D:  MOVWF  30
....................                  } 
....................                  dispvalf=0; 
138E:  CLRF   38
....................               } 
....................               else 
138F:  GOTO   45E
1390:  BCF    03.5
....................               { 
....................                  if((prevref!=ref)||(dispvalf==1)) 
1391:  BSF    03.5
1392:  MOVF   24,W
1393:  SUBWF  22,W
1394:  BTFSS  03.2
1395:  GOTO   39C
1396:  MOVF   25,W
1397:  SUBWF  23,W
1398:  BTFSS  03.2
1399:  GOTO   39C
139A:  DECFSZ 38,W
139B:  GOTO   3B1
....................                  { 
....................                     inttochar1(ref); 
139C:  MOVF   25,W
139D:  MOVWF  6B
139E:  MOVF   24,W
139F:  MOVWF  6A
13A0:  BCF    0A.4
13A1:  BSF    0A.3
13A2:  BCF    03.5
13A3:  CALL   47A
13A4:  BSF    0A.4
13A5:  BCF    0A.3
....................                     prevref=ref; 
13A6:  BSF    03.5
13A7:  MOVF   25,W
13A8:  MOVWF  23
13A9:  MOVF   24,W
13AA:  MOVWF  22
....................                     prevcur=0; 
13AB:  BCF    03.5
13AC:  CLRF   4E
13AD:  CLRF   4D
13AE:  CLRF   4C
13AF:  CLRF   4B
13B0:  BSF    03.5
....................                  } 
....................                  if((prevvtg!=voltage)||(dispvalf==1)) 
13B1:  BCF    03.5
13B2:  MOVF   43,W
13B3:  BSF    03.5
13B4:  SUBWF  30,W
13B5:  BTFSS  03.2
13B6:  GOTO   3CB
13B7:  BCF    03.5
13B8:  MOVF   44,W
13B9:  BSF    03.5
13BA:  SUBWF  31,W
13BB:  BTFSS  03.2
13BC:  GOTO   3CB
13BD:  BCF    03.5
13BE:  MOVF   45,F
13BF:  BTFSC  03.2
13C0:  GOTO   3C3
13C1:  BSF    03.5
13C2:  GOTO   3CB
13C3:  MOVF   46,F
13C4:  BTFSC  03.2
13C5:  GOTO   3C8
13C6:  BSF    03.5
13C7:  GOTO   3CB
13C8:  BSF    03.5
13C9:  DECFSZ 38,W
13CA:  GOTO   446
....................                  { 
....................                     if(voltage<=9999) 
13CB:  BCF    03.5
13CC:  MOVF   46,F
13CD:  BTFSS  03.2
13CE:  GOTO   3F0
13CF:  MOVF   45,F
13D0:  BTFSS  03.2
13D1:  GOTO   3F0
13D2:  MOVF   44,W
13D3:  SUBLW  27
13D4:  BTFSS  03.0
13D5:  GOTO   3F0
13D6:  BTFSS  03.2
13D7:  GOTO   3DC
13D8:  MOVF   43,W
13D9:  SUBLW  0F
13DA:  BTFSS  03.0
13DB:  GOTO   3F0
....................                     { 
....................                        inttochar(voltage); 
13DC:  MOVF   44,W
13DD:  BSF    03.5
13DE:  MOVWF  69
13DF:  BCF    03.5
13E0:  MOVF   43,W
13E1:  BSF    03.5
13E2:  MOVWF  68
13E3:  MOVF   69,W
13E4:  MOVWF  6B
13E5:  MOVF   68,W
13E6:  MOVWF  6A
13E7:  BCF    0A.4
13E8:  BSF    0A.3
13E9:  BCF    03.5
13EA:  CALL   50F
13EB:  BSF    0A.4
13EC:  BCF    0A.3
....................                        setdp=1; 
13ED:  MOVLW  01
13EE:  MOVWF  2D
....................                     } 
....................                     else 
13EF:  GOTO   43F
....................                     { 
....................                         voltage1=(voltage/100.0); 
13F0:  MOVF   46,W
13F1:  BSF    03.5
13F2:  MOVWF  6B
13F3:  BCF    03.5
13F4:  MOVF   45,W
13F5:  BSF    03.5
13F6:  MOVWF  6A
13F7:  BCF    03.5
13F8:  MOVF   44,W
13F9:  BSF    03.5
13FA:  MOVWF  69
13FB:  BCF    03.5
13FC:  MOVF   43,W
13FD:  BSF    03.5
13FE:  MOVWF  68
13FF:  BCF    0A.4
1400:  BCF    03.5
1401:  CALL   64D
1402:  BSF    0A.4
1403:  MOVF   7A,W
1404:  BSF    03.5
1405:  MOVWF  6F
1406:  MOVF   79,W
1407:  MOVWF  6E
1408:  MOVF   78,W
1409:  MOVWF  6D
140A:  MOVF   77,W
140B:  MOVWF  6C
140C:  BSF    03.6
140D:  CLRF   13
140E:  CLRF   12
140F:  MOVLW  48
1410:  MOVWF  11
1411:  MOVLW  85
1412:  MOVWF  10
1413:  BCF    0A.4
1414:  BCF    03.5
1415:  BCF    03.6
1416:  CALL   453
1417:  BSF    0A.4
1418:  MOVF   7A,W
1419:  BSF    03.5
141A:  MOVWF  6F
141B:  MOVF   79,W
141C:  MOVWF  6E
141D:  MOVF   78,W
141E:  MOVWF  6D
141F:  MOVF   77,W
1420:  MOVWF  6C
1421:  BCF    0A.4
1422:  BCF    03.5
1423:  CALL   709
1424:  BSF    0A.4
1425:  MOVF   7A,W
1426:  MOVWF  6A
1427:  MOVF   79,W
1428:  MOVWF  69
1429:  MOVF   78,W
142A:  MOVWF  68
142B:  MOVF   77,W
142C:  MOVWF  67
....................                         inttochar(voltage1); 
142D:  MOVF   68,W
142E:  BSF    03.5
142F:  MOVWF  69
1430:  BCF    03.5
1431:  MOVF   67,W
1432:  BSF    03.5
1433:  MOVWF  68
1434:  MOVF   69,W
1435:  MOVWF  6B
1436:  MOVF   68,W
1437:  MOVWF  6A
1438:  BCF    0A.4
1439:  BSF    0A.3
143A:  BCF    03.5
143B:  CALL   50F
143C:  BSF    0A.4
143D:  BCF    0A.3
....................                         setdp=0; 
143E:  CLRF   2D
....................                     } 
....................  
....................                     prevvtg=voltage; 
143F:  MOVF   44,W
1440:  BSF    03.5
1441:  MOVWF  31
1442:  BCF    03.5
1443:  MOVF   43,W
1444:  BSF    03.5
1445:  MOVWF  30
....................                  } 
....................                  dispvalf=0; 
1446:  CLRF   38
....................                  if((prevhr!=hr)||(prevmin!=min)||(prevsec!=sec)) 
1447:  MOVF   48,W
1448:  SUBWF  3C,W
1449:  BTFSS  03.2
144A:  GOTO   453
144B:  MOVF   46,W
144C:  SUBWF  3D,W
144D:  BTFSS  03.2
144E:  GOTO   453
144F:  MOVF   47,W
1450:  SUBWF  43,W
1451:  BTFSC  03.2
1452:  GOTO   45E
....................                  { 
....................                     write_memory(); 
1453:  BCF    0A.4
1454:  BCF    03.5
1455:  CALL   785
1456:  BSF    0A.4
....................                     prevsec=sec; 
1457:  BSF    03.5
1458:  MOVF   47,W
1459:  MOVWF  43
....................                     prevhr=hr; 
145A:  MOVF   48,W
145B:  MOVWF  3C
....................                     prevmin=min; 
145C:  MOVF   46,W
145D:  MOVWF  3D
....................                  } 
....................               } 
....................             } 
....................    }//while 
145E:  GOTO   132
.................... }//main 
....................  
.................... void inttochar1(unsigned int16 parameter) 
.................... { 
145F:  SLEEP
....................  
.................... if(model=='G' || model=='H') 
*
0C7A:  MOVF   38,W
0C7B:  SUBLW  47
0C7C:  BTFSC  03.2
0C7D:  GOTO   482
0C7E:  MOVF   38,W
0C7F:  SUBLW  48
0C80:  BTFSS  03.2
0C81:  GOTO   4BC
....................    { 
....................       digit[3]=0; 
0C82:  CLRF   32
....................       digit[2] = parameter % 10; 
0C83:  BSF    03.5
0C84:  MOVF   6B,W
0C85:  MOVWF  6D
0C86:  MOVF   6A,W
0C87:  MOVWF  6C
0C88:  CLRF   6F
0C89:  MOVLW  0A
0C8A:  MOVWF  6E
0C8B:  BCF    03.5
0C8C:  CALL   44F
0C8D:  MOVF   77,W
0C8E:  MOVWF  31
....................       parameter /= 10; 
0C8F:  BSF    03.5
0C90:  MOVF   6B,W
0C91:  MOVWF  6D
0C92:  MOVF   6A,W
0C93:  MOVWF  6C
0C94:  CLRF   6F
0C95:  MOVLW  0A
0C96:  MOVWF  6E
0C97:  BCF    03.5
0C98:  CALL   44F
0C99:  MOVF   79,W
0C9A:  BSF    03.5
0C9B:  MOVWF  6B
0C9C:  MOVF   78,W
0C9D:  MOVWF  6A
....................       digit[1] = parameter % 10; 
0C9E:  MOVF   6B,W
0C9F:  MOVWF  6D
0CA0:  MOVF   6A,W
0CA1:  MOVWF  6C
0CA2:  CLRF   6F
0CA3:  MOVLW  0A
0CA4:  MOVWF  6E
0CA5:  BCF    03.5
0CA6:  CALL   44F
0CA7:  MOVF   77,W
0CA8:  MOVWF  30
....................       parameter /= 10; 
0CA9:  BSF    03.5
0CAA:  MOVF   6B,W
0CAB:  MOVWF  6D
0CAC:  MOVF   6A,W
0CAD:  MOVWF  6C
0CAE:  CLRF   6F
0CAF:  MOVLW  0A
0CB0:  MOVWF  6E
0CB1:  BCF    03.5
0CB2:  CALL   44F
0CB3:  MOVF   79,W
0CB4:  BSF    03.5
0CB5:  MOVWF  6B
0CB6:  MOVF   78,W
0CB7:  MOVWF  6A
....................       digit[0] = parameter; 
0CB8:  MOVF   6A,W
0CB9:  BCF    03.5
0CBA:  MOVWF  2F
....................    } 
....................    else{ 
0CBB:  GOTO   50E
....................  
....................       digit[2]=parameter % 10; 
0CBC:  BSF    03.5
0CBD:  MOVF   6B,W
0CBE:  MOVWF  6D
0CBF:  MOVF   6A,W
0CC0:  MOVWF  6C
0CC1:  CLRF   6F
0CC2:  MOVLW  0A
0CC3:  MOVWF  6E
0CC4:  BCF    03.5
0CC5:  CALL   44F
0CC6:  MOVF   77,W
0CC7:  MOVWF  31
....................       parameter /= 10; 
0CC8:  BSF    03.5
0CC9:  MOVF   6B,W
0CCA:  MOVWF  6D
0CCB:  MOVF   6A,W
0CCC:  MOVWF  6C
0CCD:  CLRF   6F
0CCE:  MOVLW  0A
0CCF:  MOVWF  6E
0CD0:  BCF    03.5
0CD1:  CALL   44F
0CD2:  MOVF   79,W
0CD3:  BSF    03.5
0CD4:  MOVWF  6B
0CD5:  MOVF   78,W
0CD6:  MOVWF  6A
....................       digit[1] = parameter % 10; 
0CD7:  MOVF   6B,W
0CD8:  MOVWF  6D
0CD9:  MOVF   6A,W
0CDA:  MOVWF  6C
0CDB:  CLRF   6F
0CDC:  MOVLW  0A
0CDD:  MOVWF  6E
0CDE:  BCF    03.5
0CDF:  CALL   44F
0CE0:  MOVF   77,W
0CE1:  MOVWF  30
....................       parameter /= 10; 
0CE2:  BSF    03.5
0CE3:  MOVF   6B,W
0CE4:  MOVWF  6D
0CE5:  MOVF   6A,W
0CE6:  MOVWF  6C
0CE7:  CLRF   6F
0CE8:  MOVLW  0A
0CE9:  MOVWF  6E
0CEA:  BCF    03.5
0CEB:  CALL   44F
0CEC:  MOVF   79,W
0CED:  BSF    03.5
0CEE:  MOVWF  6B
0CEF:  MOVF   78,W
0CF0:  MOVWF  6A
....................       digit[0] = parameter % 10; 
0CF1:  MOVF   6B,W
0CF2:  MOVWF  6D
0CF3:  MOVF   6A,W
0CF4:  MOVWF  6C
0CF5:  CLRF   6F
0CF6:  MOVLW  0A
0CF7:  MOVWF  6E
0CF8:  BCF    03.5
0CF9:  CALL   44F
0CFA:  MOVF   77,W
0CFB:  MOVWF  2F
....................       parameter /= 10; 
0CFC:  BSF    03.5
0CFD:  MOVF   6B,W
0CFE:  MOVWF  6D
0CFF:  MOVF   6A,W
0D00:  MOVWF  6C
0D01:  CLRF   6F
0D02:  MOVLW  0A
0D03:  MOVWF  6E
0D04:  BCF    03.5
0D05:  CALL   44F
0D06:  MOVF   79,W
0D07:  BSF    03.5
0D08:  MOVWF  6B
0D09:  MOVF   78,W
0D0A:  MOVWF  6A
....................       digit[3] = parameter; 
0D0B:  MOVF   6A,W
0D0C:  BCF    03.5
0D0D:  MOVWF  32
....................    } 
.................... } 
0D0E:  RETLW  00
....................  
.................... /*void inttochar2(unsigned int16 hour,unsigned int16 min) 
.................... { 
....................       digit[7] = hour % 10; 
....................       hour /= 10;               //Hour 
....................       digit[6] = hour % 10; 
....................  
....................       digit[5] = min % 10; 
....................       min /= 10;               //min 
....................       digit[4] =  min % 10; 
.................... } */ 
.................... void inttochar2(unsigned char hour,unsigned char min) 
.................... { 
....................       digit[7] = hour % 10; 
*
074C:  BSF    03.5
074D:  MOVF   68,W
074E:  MOVWF  6A
074F:  MOVLW  0A
0750:  MOVWF  6B
0751:  BCF    03.5
0752:  CALL   735
0753:  MOVF   77,W
0754:  MOVWF  36
....................       hour /= 10;               //Hour 
0755:  BSF    03.5
0756:  MOVF   68,W
0757:  MOVWF  6A
0758:  MOVLW  0A
0759:  MOVWF  6B
075A:  BCF    03.5
075B:  CALL   735
075C:  MOVF   78,W
075D:  BSF    03.5
075E:  MOVWF  68
....................       digit[6] = hour % 10; 
075F:  MOVF   68,W
0760:  MOVWF  6A
0761:  MOVLW  0A
0762:  MOVWF  6B
0763:  BCF    03.5
0764:  CALL   735
0765:  MOVF   77,W
0766:  MOVWF  35
....................  
....................       digit[5] = min % 10; 
0767:  BSF    03.5
0768:  MOVF   69,W
0769:  MOVWF  6A
076A:  MOVLW  0A
076B:  MOVWF  6B
076C:  BCF    03.5
076D:  CALL   735
076E:  MOVF   77,W
076F:  MOVWF  34
....................       min /= 10;               //min 
0770:  BSF    03.5
0771:  MOVF   69,W
0772:  MOVWF  6A
0773:  MOVLW  0A
0774:  MOVWF  6B
0775:  BCF    03.5
0776:  CALL   735
0777:  MOVF   78,W
0778:  BSF    03.5
0779:  MOVWF  69
....................       digit[4] =  min % 10; 
077A:  MOVF   69,W
077B:  MOVWF  6A
077C:  MOVLW  0A
077D:  MOVWF  6B
077E:  BCF    03.5
077F:  CALL   735
0780:  MOVF   77,W
0781:  MOVWF  33
.................... } 
0782:  BCF    0A.3
0783:  BSF    0A.4
0784:  GOTO   194 (RETURN)
.................... void inttochar(unsigned int16 parameter) 
.................... { 
....................       digit[7] = parameter % 10; 
*
0D0F:  BSF    03.5
0D10:  MOVF   6B,W
0D11:  MOVWF  6D
0D12:  MOVF   6A,W
0D13:  MOVWF  6C
0D14:  CLRF   6F
0D15:  MOVLW  0A
0D16:  MOVWF  6E
0D17:  BCF    03.5
0D18:  CALL   44F
0D19:  MOVF   77,W
0D1A:  MOVWF  36
....................       parameter /= 10; 
0D1B:  BSF    03.5
0D1C:  MOVF   6B,W
0D1D:  MOVWF  6D
0D1E:  MOVF   6A,W
0D1F:  MOVWF  6C
0D20:  CLRF   6F
0D21:  MOVLW  0A
0D22:  MOVWF  6E
0D23:  BCF    03.5
0D24:  CALL   44F
0D25:  MOVF   79,W
0D26:  BSF    03.5
0D27:  MOVWF  6B
0D28:  MOVF   78,W
0D29:  MOVWF  6A
....................       digit[6] = parameter % 10; 
0D2A:  MOVF   6B,W
0D2B:  MOVWF  6D
0D2C:  MOVF   6A,W
0D2D:  MOVWF  6C
0D2E:  CLRF   6F
0D2F:  MOVLW  0A
0D30:  MOVWF  6E
0D31:  BCF    03.5
0D32:  CALL   44F
0D33:  MOVF   77,W
0D34:  MOVWF  35
....................       parameter /= 10; 
0D35:  BSF    03.5
0D36:  MOVF   6B,W
0D37:  MOVWF  6D
0D38:  MOVF   6A,W
0D39:  MOVWF  6C
0D3A:  CLRF   6F
0D3B:  MOVLW  0A
0D3C:  MOVWF  6E
0D3D:  BCF    03.5
0D3E:  CALL   44F
0D3F:  MOVF   79,W
0D40:  BSF    03.5
0D41:  MOVWF  6B
0D42:  MOVF   78,W
0D43:  MOVWF  6A
....................       digit[5] = parameter % 10; 
0D44:  MOVF   6B,W
0D45:  MOVWF  6D
0D46:  MOVF   6A,W
0D47:  MOVWF  6C
0D48:  CLRF   6F
0D49:  MOVLW  0A
0D4A:  MOVWF  6E
0D4B:  BCF    03.5
0D4C:  CALL   44F
0D4D:  MOVF   77,W
0D4E:  MOVWF  34
....................       parameter /= 10; 
0D4F:  BSF    03.5
0D50:  MOVF   6B,W
0D51:  MOVWF  6D
0D52:  MOVF   6A,W
0D53:  MOVWF  6C
0D54:  CLRF   6F
0D55:  MOVLW  0A
0D56:  MOVWF  6E
0D57:  BCF    03.5
0D58:  CALL   44F
0D59:  MOVF   79,W
0D5A:  BSF    03.5
0D5B:  MOVWF  6B
0D5C:  MOVF   78,W
0D5D:  MOVWF  6A
....................       digit[4] = parameter; 
0D5E:  MOVF   6A,W
0D5F:  BCF    03.5
0D60:  MOVWF  33
.................... } 
0D61:  RETLW  00
....................  
.................... void short_del() 
.................... { 
....................   unsigned int16 i=0,j=0; 
....................   for(i=0;i<100;i++) 
....................   { 
....................      for(j=0;j<30;j++); 
....................   } 
.................... } 
....................  
.................... void initialise() 
.................... { 
....................          setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
0285:  BSF    03.5
0286:  BCF    1F.4
0287:  BCF    1F.5
0288:  MOVLW  00
0289:  MOVWF  1D
....................          setup_comparator(NC_NC_NC_NC); 
028A:  MOVLW  07
028B:  BCF    03.5
028C:  MOVWF  1F
028D:  BSF    03.5
028E:  MOVF   05,W
028F:  MOVLW  06
0290:  MOVWF  77
0291:  DECFSZ 77,F
0292:  GOTO   291
0293:  NOP
0294:  BCF    03.5
0295:  MOVF   1F,W
0296:  BCF    0D.5
....................          setup_adc(ADC_CLOCK_INTERNAL  ); 
0297:  BSF    1F.6
0298:  BSF    1F.7
0299:  BSF    03.5
029A:  BSF    1F.7
029B:  BCF    03.5
029C:  BSF    1F.0
....................          enable_interrupts(GLOBAL); 
029D:  MOVLW  C0
029E:  IORWF  0B,F
....................          enable_interrupts(INT_TIMER1); 
029F:  BSF    03.5
02A0:  BSF    0C.0
....................          setup_timer_0(T1_DISABLED); 
02A1:  MOVF   01,W
02A2:  ANDLW  C0
02A3:  MOVWF  01
....................          setup_timer_1(T1_DISABLED); 
02A4:  BCF    03.5
02A5:  CLRF   10
....................          setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
02A6:  MOVLW  85
02A7:  MOVWF  10
....................          disable_interrupts(INT_EXT); 
02A8:  BCF    0B.4
....................          set_timer0(0x0f); 
02A9:  MOVLW  0F
02AA:  MOVWF  01
....................          set_timer1(0xFC40); 
02AB:  MOVLW  FC
02AC:  MOVWF  0F
02AD:  MOVLW  40
02AE:  MOVWF  0E
.................... } 
02AF:  BCF    0A.3
02B0:  BSF    0A.4
02B1:  GOTO   0C1 (RETURN)
.................... //============================================================================== 
.................... void adc_init() 
.................... { 
....................    setup_adc_ports(sAN0|sAN1|sAN2|sAN3|sAN4|VSS_VDD); 
02B2:  BSF    03.5
02B3:  BCF    1F.4
02B4:  BCF    1F.5
02B5:  MOVLW  00
02B6:  IORLW  1F
02B7:  MOVWF  1D
....................      //setup_adc_ports(ALL_ANALOG); 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
02B8:  BCF    03.5
02B9:  BSF    1F.6
02BA:  BSF    1F.7
02BB:  BSF    03.5
02BC:  BSF    1F.7
02BD:  BCF    03.5
02BE:  BSF    1F.0
....................    //set_adc_channel(0); 
.................... } 
02BF:  BCF    0A.3
02C0:  BSF    0A.4
02C1:  GOTO   0C4 (RETURN)
.................... //------------------------------------------------------------------------------ 
....................  
.................... //------------------------------------------------------------------------------ 
.................... void display() 
.................... { 
....................    if(digitcnt==0) 
*
009B:  BCF    03.5
009C:  MOVF   28,F
009D:  BTFSS  03.2
009E:  GOTO   0C0
....................    { 
....................      OUTPUT_BIT(disp8,0); 
009F:  BCF    06.5
00A0:  BSF    03.5
00A1:  BCF    06.5
....................      //digit[0]=5; 
....................      hexvalue=lookup_table[digit[2]]; 
00A2:  BCF    03.5
00A3:  MOVF   31,W
00A4:  CALL   035
00A5:  MOVWF  78
00A6:  MOVWF  29
....................      output_c(hexvalue); 
00A7:  MOVLW  00
00A8:  BSF    03.5
00A9:  MOVWF  4F
00AA:  CLRF   07
00AB:  BCF    03.5
00AC:  MOVF   29,W
00AD:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,1); 
00AE:  BSF    06.0
00AF:  BSF    03.5
00B0:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00B1:  BCF    03.5
00B2:  BCF    06.1
00B3:  BSF    03.5
00B4:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00B5:  BCF    03.5
00B6:  BCF    06.2
00B7:  BSF    03.5
00B8:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00B9:  BCF    03.5
00BA:  BCF    06.3
00BB:  BSF    03.5
00BC:  BCF    06.3
....................      digitcnt++; 
00BD:  BCF    03.5
00BE:  INCF   28,F
....................    } 
....................    else if(digitcnt==1) 
00BF:  GOTO   22F
00C0:  DECFSZ 28,W
00C1:  GOTO   0E3
....................    { 
....................      OUTPUT_BIT(disp1,0); 
00C2:  BCF    06.0
00C3:  BSF    03.5
00C4:  BCF    06.0
....................       //digit[1]=8; 
....................       hexvalue =lookup_table[digit[1]]; 
00C5:  BCF    03.5
00C6:  MOVF   30,W
00C7:  CALL   035
00C8:  MOVWF  78
00C9:  MOVWF  29
....................      output_c(hexvalue); 
00CA:  MOVLW  00
00CB:  BSF    03.5
00CC:  MOVWF  4F
00CD:  CLRF   07
00CE:  BCF    03.5
00CF:  MOVF   29,W
00D0:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00D1:  BCF    06.0
00D2:  BSF    03.5
00D3:  BCF    06.0
....................      OUTPUT_BIT(disp2,1); 
00D4:  BCF    03.5
00D5:  BSF    06.1
00D6:  BSF    03.5
00D7:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00D8:  BCF    03.5
00D9:  BCF    06.2
00DA:  BSF    03.5
00DB:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00DC:  BCF    03.5
00DD:  BCF    06.3
00DE:  BSF    03.5
00DF:  BCF    06.3
....................      digitcnt++;// ++; 
00E0:  BCF    03.5
00E1:  INCF   28,F
....................    } 
....................    else if(digitcnt==2) 
00E2:  GOTO   22F
00E3:  MOVF   28,W
00E4:  SUBLW  02
00E5:  BTFSS  03.2
00E6:  GOTO   119
....................    { 
....................      OUTPUT_BIT(disp2,0); 
00E7:  BCF    06.1
00E8:  BSF    03.5
00E9:  BCF    06.1
....................       //digit[2]=7; 
....................      hexvalue = lookup_table[digit[0]]; 
00EA:  BCF    03.5
00EB:  MOVF   2F,W
00EC:  CALL   035
00ED:  MOVWF  78
00EE:  MOVWF  29
....................      output_c(hexvalue); 
00EF:  MOVLW  00
00F0:  BSF    03.5
00F1:  MOVWF  4F
00F2:  CLRF   07
00F3:  BCF    03.5
00F4:  MOVF   29,W
00F5:  MOVWF  07
....................       if(setdp2==1) 
00F6:  BSF    03.5
00F7:  DECFSZ 40,W
00F8:  GOTO   100
....................         output_bit(segmentdp,1); 
00F9:  BCF    03.5
00FA:  BSF    07.7
00FB:  BSF    03.5
00FC:  BCF    4F.7
00FD:  MOVF   4F,W
00FE:  MOVWF  07
....................      else 
00FF:  GOTO   106
....................         output_bit(segmentdp,0); 
0100:  BCF    03.5
0101:  BCF    07.7
0102:  BSF    03.5
0103:  BCF    4F.7
0104:  MOVF   4F,W
0105:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0106:  BCF    03.5
0107:  BCF    06.0
0108:  BSF    03.5
0109:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
010A:  BCF    03.5
010B:  BCF    06.1
010C:  BSF    03.5
010D:  BCF    06.1
....................      OUTPUT_BIT(disp3,1); 
010E:  BCF    03.5
010F:  BSF    06.2
0110:  BSF    03.5
0111:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0112:  BCF    03.5
0113:  BCF    06.3
0114:  BSF    03.5
0115:  BCF    06.3
....................      digitcnt++; 
0116:  BCF    03.5
0117:  INCF   28,F
....................    } 
....................    else if(digitcnt==3) 
0118:  GOTO   22F
0119:  MOVF   28,W
011A:  SUBLW  03
011B:  BTFSS  03.2
011C:  GOTO   13E
....................    { 
....................      OUTPUT_BIT(disp3,0); 
011D:  BCF    06.2
011E:  BSF    03.5
011F:  BCF    06.2
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[3]]; 
0120:  BCF    03.5
0121:  MOVF   32,W
0122:  CALL   035
0123:  MOVWF  78
0124:  MOVWF  29
....................      output_c(hexvalue); 
0125:  MOVLW  00
0126:  BSF    03.5
0127:  MOVWF  4F
0128:  CLRF   07
0129:  BCF    03.5
012A:  MOVF   29,W
012B:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
012C:  BCF    06.0
012D:  BSF    03.5
012E:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
012F:  BCF    03.5
0130:  BCF    06.1
0131:  BSF    03.5
0132:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0133:  BCF    03.5
0134:  BCF    06.2
0135:  BSF    03.5
0136:  BCF    06.2
....................      OUTPUT_BIT(disp4,1); 
0137:  BCF    03.5
0138:  BSF    06.3
0139:  BSF    03.5
013A:  BCF    06.3
....................      digitcnt++; 
013B:  BCF    03.5
013C:  INCF   28,F
....................    } 
....................    else if(digitcnt==4) 
013D:  GOTO   22F
013E:  MOVF   28,W
013F:  SUBLW  04
0140:  BTFSS  03.2
0141:  GOTO   173
....................    { 
....................      OUTPUT_BIT(disp4,0); 
0142:  BCF    06.3
0143:  BSF    03.5
0144:  BCF    06.3
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[4]]; 
0145:  BCF    03.5
0146:  MOVF   33,W
0147:  CALL   035
0148:  MOVWF  78
0149:  MOVWF  29
....................      output_c(hexvalue); 
014A:  MOVLW  00
014B:  BSF    03.5
014C:  MOVWF  4F
014D:  CLRF   07
014E:  BCF    03.5
014F:  MOVF   29,W
0150:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0151:  BCF    06.0
0152:  BSF    03.5
0153:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
0154:  BCF    03.5
0155:  BCF    06.1
0156:  BSF    03.5
0157:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0158:  BCF    03.5
0159:  BCF    06.2
015A:  BSF    03.5
015B:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
015C:  BCF    03.5
015D:  BCF    06.3
015E:  BSF    03.5
015F:  BCF    06.3
....................      OUTPUT_BIT(disp5,1); 
0160:  BCF    03.5
0161:  BSF    05.4
0162:  BSF    03.5
0163:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
0164:  BCF    03.5
0165:  BCF    05.7
0166:  BSF    03.5
0167:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
0168:  BCF    03.5
0169:  BCF    05.6
016A:  BSF    03.5
016B:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
016C:  BCF    03.5
016D:  BCF    06.5
016E:  BSF    03.5
016F:  BCF    06.5
....................      digitcnt++; 
0170:  BCF    03.5
0171:  INCF   28,F
....................    } 
....................    else if(digitcnt==5) 
0172:  GOTO   22F
0173:  MOVF   28,W
0174:  SUBLW  05
0175:  BTFSS  03.2
0176:  GOTO   1B7
....................    { 
....................      OUTPUT_BIT(disp5,0); 
0177:  BCF    05.4
0178:  BSF    03.5
0179:  BCF    05.4
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[5]]; 
017A:  BCF    03.5
017B:  MOVF   34,W
017C:  CALL   035
017D:  MOVWF  78
017E:  MOVWF  29
....................      output_c(hexvalue); 
017F:  MOVLW  00
0180:  BSF    03.5
0181:  MOVWF  4F
0182:  CLRF   07
0183:  BCF    03.5
0184:  MOVF   29,W
0185:  MOVWF  07
....................      if(setdp==1) 
0186:  DECFSZ 2D,W
0187:  GOTO   18F
....................         output_bit(segmentdp,1); 
0188:  BSF    07.7
0189:  BSF    03.5
018A:  BCF    4F.7
018B:  MOVF   4F,W
018C:  MOVWF  07
....................      else 
018D:  GOTO   194
018E:  BCF    03.5
....................         output_bit(segmentdp,0); 
018F:  BCF    07.7
0190:  BSF    03.5
0191:  BCF    4F.7
0192:  MOVF   4F,W
0193:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0194:  BCF    03.5
0195:  BCF    06.0
0196:  BSF    03.5
0197:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
0198:  BCF    03.5
0199:  BCF    06.1
019A:  BSF    03.5
019B:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
019C:  BCF    03.5
019D:  BCF    06.2
019E:  BSF    03.5
019F:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
01A0:  BCF    03.5
01A1:  BCF    06.3
01A2:  BSF    03.5
01A3:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
01A4:  BCF    03.5
01A5:  BCF    05.4
01A6:  BSF    03.5
01A7:  BCF    05.4
....................      OUTPUT_BIT(disp6,1); 
01A8:  BCF    03.5
01A9:  BSF    05.7
01AA:  BSF    03.5
01AB:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
01AC:  BCF    03.5
01AD:  BCF    05.6
01AE:  BSF    03.5
01AF:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
01B0:  BCF    03.5
01B1:  BCF    06.5
01B2:  BSF    03.5
01B3:  BCF    06.5
....................      digitcnt++; 
01B4:  BCF    03.5
01B5:  INCF   28,F
....................    } 
....................    else if(digitcnt==6) 
01B6:  GOTO   22F
01B7:  MOVF   28,W
01B8:  SUBLW  06
01B9:  BTFSS  03.2
01BA:  GOTO   1FB
....................    { 
....................      OUTPUT_BIT(disp6,0); 
01BB:  BCF    05.7
01BC:  BSF    03.5
01BD:  BCF    05.7
....................      //digit[3]=6; 
....................      hexvalue = lookup_table1[digit[6]]; 
01BE:  BCF    03.5
01BF:  MOVF   35,W
01C0:  CALL   061
01C1:  MOVWF  78
01C2:  MOVWF  29
....................      output_c(hexvalue); 
01C3:  MOVLW  00
01C4:  BSF    03.5
01C5:  MOVWF  4F
01C6:  CLRF   07
01C7:  BCF    03.5
01C8:  MOVF   29,W
01C9:  MOVWF  07
....................      if(setdp1==1) 
01CA:  DECFSZ 2C,W
01CB:  GOTO   1D3
....................         output_bit(segmentg,1); 
01CC:  BSF    07.6
01CD:  BSF    03.5
01CE:  BCF    4F.6
01CF:  MOVF   4F,W
01D0:  MOVWF  07
....................      else 
01D1:  GOTO   1D8
01D2:  BCF    03.5
....................         output_bit(segmentg,0); 
01D3:  BCF    07.6
01D4:  BSF    03.5
01D5:  BCF    4F.6
01D6:  MOVF   4F,W
01D7:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
01D8:  BCF    03.5
01D9:  BCF    06.0
01DA:  BSF    03.5
01DB:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
01DC:  BCF    03.5
01DD:  BCF    06.1
01DE:  BSF    03.5
01DF:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
01E0:  BCF    03.5
01E1:  BCF    06.2
01E2:  BSF    03.5
01E3:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
01E4:  BCF    03.5
01E5:  BCF    06.3
01E6:  BSF    03.5
01E7:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
01E8:  BCF    03.5
01E9:  BCF    05.4
01EA:  BSF    03.5
01EB:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
01EC:  BCF    03.5
01ED:  BCF    05.7
01EE:  BSF    03.5
01EF:  BCF    05.7
....................      OUTPUT_BIT(disp7,1); 
01F0:  BCF    03.5
01F1:  BSF    05.6
01F2:  BSF    03.5
01F3:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
01F4:  BCF    03.5
01F5:  BCF    06.5
01F6:  BSF    03.5
01F7:  BCF    06.5
....................      digitcnt++; 
01F8:  BCF    03.5
01F9:  INCF   28,F
....................    } 
....................     else if(digitcnt==7) 
01FA:  GOTO   22F
01FB:  MOVF   28,W
01FC:  SUBLW  07
01FD:  BTFSS  03.2
01FE:  GOTO   22F
....................    { 
....................      OUTPUT_BIT(disp7,0); 
01FF:  BCF    05.6
0200:  BSF    03.5
0201:  BCF    05.6
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[7]]; 
0202:  BCF    03.5
0203:  MOVF   36,W
0204:  CALL   035
0205:  MOVWF  78
0206:  MOVWF  29
....................      output_c(hexvalue); 
0207:  MOVLW  00
0208:  BSF    03.5
0209:  MOVWF  4F
020A:  CLRF   07
020B:  BCF    03.5
020C:  MOVF   29,W
020D:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
020E:  BCF    06.0
020F:  BSF    03.5
0210:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
0211:  BCF    03.5
0212:  BCF    06.1
0213:  BSF    03.5
0214:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0215:  BCF    03.5
0216:  BCF    06.2
0217:  BSF    03.5
0218:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0219:  BCF    03.5
021A:  BCF    06.3
021B:  BSF    03.5
021C:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
021D:  BCF    03.5
021E:  BCF    05.4
021F:  BSF    03.5
0220:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
0221:  BCF    03.5
0222:  BCF    05.7
0223:  BSF    03.5
0224:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
0225:  BCF    03.5
0226:  BCF    05.6
0227:  BSF    03.5
0228:  BCF    05.6
....................      OUTPUT_BIT(disp8,1); 
0229:  BCF    03.5
022A:  BSF    06.5
022B:  BSF    03.5
022C:  BCF    06.5
....................      digitcnt=0; 
022D:  BCF    03.5
022E:  CLRF   28
022F:  BSF    03.5
....................    } 
.................... } 
....................  
.................... void write_memory() 
.................... { 
....................    write_eeprom(0x01,sec); 
*
0785:  MOVLW  01
0786:  BSF    03.6
0787:  MOVWF  0D
0788:  BSF    03.5
0789:  BCF    03.6
078A:  MOVF   47,W
078B:  BCF    03.5
078C:  BSF    03.6
078D:  MOVWF  0C
078E:  BSF    03.5
078F:  BCF    0C.7
0790:  BSF    0C.2
0791:  BCF    03.5
0792:  BCF    03.6
0793:  MOVF   0B,W
0794:  MOVWF  77
0795:  BCF    0B.7
0796:  BSF    03.5
0797:  BSF    03.6
0798:  MOVLW  55
0799:  MOVWF  0D
079A:  MOVLW  AA
079B:  MOVWF  0D
079C:  BSF    0C.1
079D:  BTFSC  0C.1
079E:  GOTO   79D
079F:  BCF    0C.2
07A0:  MOVF   77,W
07A1:  BCF    03.5
07A2:  BCF    03.6
07A3:  IORWF  0B,F
....................    write_eeprom(0x02,min); 
07A4:  MOVLW  02
07A5:  BSF    03.6
07A6:  MOVWF  0D
07A7:  BSF    03.5
07A8:  BCF    03.6
07A9:  MOVF   46,W
07AA:  BCF    03.5
07AB:  BSF    03.6
07AC:  MOVWF  0C
07AD:  BSF    03.5
07AE:  BCF    0C.7
07AF:  BSF    0C.2
07B0:  BCF    03.5
07B1:  BCF    03.6
07B2:  MOVF   0B,W
07B3:  MOVWF  77
07B4:  BCF    0B.7
07B5:  BSF    03.5
07B6:  BSF    03.6
07B7:  MOVLW  55
07B8:  MOVWF  0D
07B9:  MOVLW  AA
07BA:  MOVWF  0D
07BB:  BSF    0C.1
07BC:  BTFSC  0C.1
07BD:  GOTO   7BC
07BE:  BCF    0C.2
07BF:  MOVF   77,W
07C0:  BCF    03.5
07C1:  BCF    03.6
07C2:  IORWF  0B,F
....................    write_eeprom(0x03,hr); 
07C3:  MOVLW  03
07C4:  BSF    03.6
07C5:  MOVWF  0D
07C6:  BSF    03.5
07C7:  BCF    03.6
07C8:  MOVF   48,W
07C9:  BCF    03.5
07CA:  BSF    03.6
07CB:  MOVWF  0C
07CC:  BSF    03.5
07CD:  BCF    0C.7
07CE:  BSF    0C.2
07CF:  BCF    03.5
07D0:  BCF    03.6
07D1:  MOVF   0B,W
07D2:  MOVWF  77
07D3:  BCF    0B.7
07D4:  BSF    03.5
07D5:  BSF    03.6
07D6:  MOVLW  55
07D7:  MOVWF  0D
07D8:  MOVLW  AA
07D9:  MOVWF  0D
07DA:  BSF    0C.1
07DB:  BTFSC  0C.1
07DC:  GOTO   7DB
07DD:  BCF    0C.2
07DE:  MOVF   77,W
07DF:  BCF    03.5
07E0:  BCF    03.6
07E1:  IORWF  0B,F
.................... } 
07E2:  RETLW  00
.................... void read_memory() 
.................... { 
....................    sec=read_EEPROM (0x01); 
*
03F5:  MOVLW  01
03F6:  BSF    03.6
03F7:  MOVWF  0D
03F8:  BSF    03.5
03F9:  BCF    0C.7
03FA:  BSF    0C.0
03FB:  BCF    03.5
03FC:  MOVF   0C,W
03FD:  BSF    03.5
03FE:  BCF    03.6
03FF:  MOVWF  47
....................    if((sec==0XFF)||(sec>60)) 
0400:  INCFSZ 47,W
0401:  GOTO   403
0402:  GOTO   407
0403:  MOVF   47,W
0404:  SUBLW  3C
0405:  BTFSC  03.0
0406:  GOTO   408
....................    { 
....................       sec=0; 
0407:  CLRF   47
....................    } 
....................    min=read_EEPROM (0x02); 
0408:  MOVLW  02
0409:  BCF    03.5
040A:  BSF    03.6
040B:  MOVWF  0D
040C:  BSF    03.5
040D:  BCF    0C.7
040E:  BSF    0C.0
040F:  BCF    03.5
0410:  MOVF   0C,W
0411:  BSF    03.5
0412:  BCF    03.6
0413:  MOVWF  46
....................    if((min==0XFF)||(min>60)) 
0414:  INCFSZ 46,W
0415:  GOTO   417
0416:  GOTO   41B
0417:  MOVF   46,W
0418:  SUBLW  3C
0419:  BTFSC  03.0
041A:  GOTO   41C
....................    { 
....................       min=0; 
041B:  CLRF   46
....................    } 
....................    hr=read_EEPROM (0x03); 
041C:  MOVLW  03
041D:  BCF    03.5
041E:  BSF    03.6
041F:  MOVWF  0D
0420:  BSF    03.5
0421:  BCF    0C.7
0422:  BSF    0C.0
0423:  BCF    03.5
0424:  MOVF   0C,W
0425:  BSF    03.5
0426:  BCF    03.6
0427:  MOVWF  48
....................    if((hr==0XFF)||(hr>99)) 
0428:  INCFSZ 48,W
0429:  GOTO   42B
042A:  GOTO   42F
042B:  MOVF   48,W
042C:  SUBLW  63
042D:  BTFSC  03.0
042E:  GOTO   430
....................    { 
....................       hr=0; 
042F:  CLRF   48
....................    } 
.................... } 
0430:  BCF    03.5
0431:  BCF    0A.3
0432:  BSF    0A.4
0433:  GOTO   12F (RETURN)
.................... void readadc() 
.................... { 
....................     static unsigned int32 totalcur=0,totalvtg=0,totalref2=0,totalref=0,tripref=0; 
*
1098:  CLRF   50
1099:  CLRF   51
109A:  CLRF   52
109B:  CLRF   53
109C:  CLRF   54
109D:  CLRF   55
109E:  CLRF   56
109F:  CLRF   57
10A0:  CLRF   58
10A1:  CLRF   59
10A2:  CLRF   5A
10A3:  CLRF   5B
10A4:  CLRF   5C
10A5:  CLRF   5D
10A6:  CLRF   5E
10A7:  CLRF   5F
10A8:  CLRF   60
10A9:  CLRF   61
10AA:  CLRF   62
10AB:  CLRF   63
....................     static unsigned int16 adccntr=0,adccntr1=0; 
10AC:  CLRF   64
10AD:  CLRF   65
10AE:  CLRF   66
10AF:  CLRF   67
....................     /*set_adc_channel(0); 
....................     delay_us(10); 
....................     value=read_adc(); 
....................     totalvtg= totalvtg + value; 
....................     ;*/ 
....................     set_adc_channel(0); 
*
0800:  MOVLW  00
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C3
0804:  IORWF  78,W
0805:  MOVWF  1F
....................     //delay_us(10); 
....................     delay_us(100);  //@ 
0806:  MOVLW  42
0807:  MOVWF  77
0808:  DECFSZ 77,F
0809:  GOTO   008
080A:  NOP
....................     value=read_adc(); 
080B:  BSF    1F.1
080C:  BTFSC  1F.1
080D:  GOTO   00C
080E:  BSF    03.5
080F:  MOVF   1E,W
0810:  BCF    03.5
0811:  MOVWF  3F
0812:  MOVF   1E,W
0813:  MOVWF  40
0814:  CLRF   41
0815:  CLRF   42
....................     totalcur= totalcur + value; 
0816:  MOVF   3F,W
0817:  BSF    03.5
0818:  ADDWF  50,F
0819:  BCF    03.5
081A:  MOVF   40,W
081B:  BTFSC  03.0
081C:  INCFSZ 40,W
081D:  GOTO   01F
081E:  GOTO   022
081F:  BSF    03.5
0820:  ADDWF  51,F
0821:  BCF    03.5
0822:  MOVF   41,W
0823:  BTFSC  03.0
0824:  INCFSZ 41,W
0825:  GOTO   027
0826:  GOTO   02A
0827:  BSF    03.5
0828:  ADDWF  52,F
0829:  BCF    03.5
082A:  MOVF   42,W
082B:  BTFSC  03.0
082C:  INCFSZ 42,W
082D:  GOTO   02F
082E:  GOTO   032
082F:  BSF    03.5
0830:  ADDWF  53,F
0831:  BCF    03.5
....................     ; 
....................     set_adc_channel(1); 
0832:  MOVLW  04
0833:  MOVWF  78
0834:  MOVF   1F,W
0835:  ANDLW  C3
0836:  IORWF  78,W
0837:  MOVWF  1F
....................     //delay_us(10); 
....................      delay_us(100);  //@ 
0838:  MOVLW  42
0839:  MOVWF  77
083A:  DECFSZ 77,F
083B:  GOTO   03A
083C:  NOP
....................     value=read_adc(); 
083D:  BSF    1F.1
083E:  BTFSC  1F.1
083F:  GOTO   03E
0840:  BSF    03.5
0841:  MOVF   1E,W
0842:  BCF    03.5
0843:  MOVWF  3F
0844:  MOVF   1E,W
0845:  MOVWF  40
0846:  CLRF   41
0847:  CLRF   42
....................     totalvtg= totalvtg + value; 
0848:  MOVF   3F,W
0849:  BSF    03.5
084A:  ADDWF  54,F
084B:  BCF    03.5
084C:  MOVF   40,W
084D:  BTFSC  03.0
084E:  INCFSZ 40,W
084F:  GOTO   051
0850:  GOTO   054
0851:  BSF    03.5
0852:  ADDWF  55,F
0853:  BCF    03.5
0854:  MOVF   41,W
0855:  BTFSC  03.0
0856:  INCFSZ 41,W
0857:  GOTO   059
0858:  GOTO   05C
0859:  BSF    03.5
085A:  ADDWF  56,F
085B:  BCF    03.5
085C:  MOVF   42,W
085D:  BTFSC  03.0
085E:  INCFSZ 42,W
085F:  GOTO   061
0860:  GOTO   064
0861:  BSF    03.5
0862:  ADDWF  57,F
0863:  BCF    03.5
....................     ; 
....................     set_adc_channel(2); 
0864:  MOVLW  08
0865:  MOVWF  78
0866:  MOVF   1F,W
0867:  ANDLW  C3
0868:  IORWF  78,W
0869:  MOVWF  1F
....................     //delay_us(10); 
....................       delay_us(100);  //@ 
086A:  MOVLW  42
086B:  MOVWF  77
086C:  DECFSZ 77,F
086D:  GOTO   06C
086E:  NOP
....................     value=read_adc(); 
086F:  BSF    1F.1
0870:  BTFSC  1F.1
0871:  GOTO   070
0872:  BSF    03.5
0873:  MOVF   1E,W
0874:  BCF    03.5
0875:  MOVWF  3F
0876:  MOVF   1E,W
0877:  MOVWF  40
0878:  CLRF   41
0879:  CLRF   42
....................     totalref= totalref + value; 
087A:  MOVF   3F,W
087B:  BSF    03.5
087C:  ADDWF  5C,F
087D:  BCF    03.5
087E:  MOVF   40,W
087F:  BTFSC  03.0
0880:  INCFSZ 40,W
0881:  GOTO   083
0882:  GOTO   086
0883:  BSF    03.5
0884:  ADDWF  5D,F
0885:  BCF    03.5
0886:  MOVF   41,W
0887:  BTFSC  03.0
0888:  INCFSZ 41,W
0889:  GOTO   08B
088A:  GOTO   08E
088B:  BSF    03.5
088C:  ADDWF  5E,F
088D:  BCF    03.5
088E:  MOVF   42,W
088F:  BTFSC  03.0
0890:  INCFSZ 42,W
0891:  GOTO   093
0892:  GOTO   096
0893:  BSF    03.5
0894:  ADDWF  5F,F
0895:  BCF    03.5
....................  
....................     set_adc_channel(3); 
0896:  MOVLW  0C
0897:  MOVWF  78
0898:  MOVF   1F,W
0899:  ANDLW  C3
089A:  IORWF  78,W
089B:  MOVWF  1F
....................     //delay_us(10); 
....................       delay_us(100);  //@ 
089C:  MOVLW  42
089D:  MOVWF  77
089E:  DECFSZ 77,F
089F:  GOTO   09E
08A0:  NOP
....................     value=read_adc(); 
08A1:  BSF    1F.1
08A2:  BTFSC  1F.1
08A3:  GOTO   0A2
08A4:  BSF    03.5
08A5:  MOVF   1E,W
08A6:  BCF    03.5
08A7:  MOVWF  3F
08A8:  MOVF   1E,W
08A9:  MOVWF  40
08AA:  CLRF   41
08AB:  CLRF   42
....................     tripref= tripref + value; 
08AC:  MOVF   3F,W
08AD:  BSF    03.5
08AE:  ADDWF  60,F
08AF:  BCF    03.5
08B0:  MOVF   40,W
08B1:  BTFSC  03.0
08B2:  INCFSZ 40,W
08B3:  GOTO   0B5
08B4:  GOTO   0B8
08B5:  BSF    03.5
08B6:  ADDWF  61,F
08B7:  BCF    03.5
08B8:  MOVF   41,W
08B9:  BTFSC  03.0
08BA:  INCFSZ 41,W
08BB:  GOTO   0BD
08BC:  GOTO   0C0
08BD:  BSF    03.5
08BE:  ADDWF  62,F
08BF:  BCF    03.5
08C0:  MOVF   42,W
08C1:  BTFSC  03.0
08C2:  INCFSZ 42,W
08C3:  GOTO   0C5
08C4:  GOTO   0C8
08C5:  BSF    03.5
08C6:  ADDWF  63,F
08C7:  BCF    03.5
....................  
....................     set_adc_channel(4); 
08C8:  MOVLW  10
08C9:  MOVWF  78
08CA:  MOVF   1F,W
08CB:  ANDLW  C3
08CC:  IORWF  78,W
08CD:  MOVWF  1F
....................     //delay_us(10); 
....................     delay_us(100); //@ 
08CE:  MOVLW  42
08CF:  MOVWF  77
08D0:  DECFSZ 77,F
08D1:  GOTO   0D0
08D2:  NOP
....................     value=read_adc(); 
08D3:  BSF    1F.1
08D4:  BTFSC  1F.1
08D5:  GOTO   0D4
08D6:  BSF    03.5
08D7:  MOVF   1E,W
08D8:  BCF    03.5
08D9:  MOVWF  3F
08DA:  MOVF   1E,W
08DB:  MOVWF  40
08DC:  CLRF   41
08DD:  CLRF   42
....................     totalref2= totalref2 + value; 
08DE:  MOVF   3F,W
08DF:  BSF    03.5
08E0:  ADDWF  58,F
08E1:  BCF    03.5
08E2:  MOVF   40,W
08E3:  BTFSC  03.0
08E4:  INCFSZ 40,W
08E5:  GOTO   0E7
08E6:  GOTO   0EA
08E7:  BSF    03.5
08E8:  ADDWF  59,F
08E9:  BCF    03.5
08EA:  MOVF   41,W
08EB:  BTFSC  03.0
08EC:  INCFSZ 41,W
08ED:  GOTO   0EF
08EE:  GOTO   0F2
08EF:  BSF    03.5
08F0:  ADDWF  5A,F
08F1:  BCF    03.5
08F2:  MOVF   42,W
08F3:  BTFSC  03.0
08F4:  INCFSZ 42,W
08F5:  GOTO   0F7
08F6:  GOTO   0FA
08F7:  BSF    03.5
08F8:  ADDWF  5B,F
08F9:  BCF    03.5
....................     ; 
....................  
....................  
....................     { 
....................     /*   setup_adc_ports(ALL_ANALOG); 
....................        set_adc_channel(11); 
....................        delay_us(10); 
....................        value=read_adc(); 
....................         offset1=value; 
....................        setup_adc_ports(sAN0|sAN1|sAN2|VSS_VDD);*/ 
....................  
....................     } 
....................     adccntr++; 
08FA:  BSF    03.5
08FB:  INCF   64,F
08FC:  BTFSC  03.2
08FD:  INCF   65,F
....................     adccntr1++; 
08FE:  INCF   66,F
08FF:  BTFSC  03.2
0900:  INCF   67,F
....................  
....................     if(adccntr >=adcavg)//256)//128)  //@prev if(adccntr1 >=adcavg1)//256)//128) 
0901:  MOVF   65,W
0902:  SUBLW  00
0903:  BTFSC  03.0
0904:  GOTO   1BD
....................     { 
....................        ref2=totalref2>>leftshift;//8;  //@prev ref2=totalref2>>leftshift1;//8; 
0905:  MOVF   59,W
0906:  MOVWF  28
0907:  MOVF   5A,W
0908:  MOVWF  29
....................         //******************************************************* 
....................          if(ref2<=120) //110 
0909:  MOVF   29,F
090A:  BTFSS  03.2
090B:  GOTO   114
090C:  MOVF   28,W
090D:  SUBLW  78
090E:  BTFSS  03.0
090F:  GOTO   114
....................          { 
....................             ref=20.0;//10 
0910:  CLRF   25
0911:  MOVLW  14
0912:  MOVWF  24
....................          } 
....................          else 
0913:  GOTO   192
....................          { 
....................              errorp=ref2; 
0914:  MOVF   29,W
0915:  MOVWF  2B
0916:  MOVF   28,W
0917:  MOVWF  2A
....................              errorp=errorp/4.616;   //4.616 
0918:  MOVF   2B,W
0919:  MOVWF  69
091A:  MOVF   2A,W
091B:  MOVWF  68
091C:  BCF    0A.3
091D:  BCF    03.5
091E:  CALL   434
091F:  BSF    0A.3
0920:  MOVF   7A,W
0921:  BSF    03.5
0922:  MOVWF  6F
0923:  MOVF   79,W
0924:  MOVWF  6E
0925:  MOVF   78,W
0926:  MOVWF  6D
0927:  MOVF   77,W
0928:  MOVWF  6C
0929:  MOVLW  46
092A:  BSF    03.6
092B:  MOVWF  13
092C:  MOVLW  B6
092D:  MOVWF  12
092E:  MOVLW  13
092F:  MOVWF  11
0930:  MOVLW  81
0931:  MOVWF  10
0932:  BCF    0A.3
0933:  BCF    03.5
0934:  BCF    03.6
0935:  CALL   453
0936:  BSF    0A.3
0937:  MOVF   7A,W
0938:  BSF    03.5
0939:  MOVWF  6B
093A:  MOVF   79,W
093B:  MOVWF  6A
093C:  MOVF   78,W
093D:  MOVWF  69
093E:  MOVF   77,W
093F:  MOVWF  68
0940:  BCF    0A.3
0941:  BCF    03.5
0942:  CALL   536
0943:  BSF    0A.3
0944:  MOVF   79,W
0945:  BSF    03.5
0946:  MOVWF  2B
0947:  MOVF   78,W
0948:  MOVWF  2A
....................              offset=constant-errorp; 
0949:  MOVF   2A,W
094A:  SUBWF  2C,W
094B:  MOVWF  2E
094C:  MOVF   2D,W
094D:  MOVWF  2F
094E:  MOVF   2B,W
094F:  BTFSS  03.0
0950:  INCFSZ 2B,W
0951:  SUBWF  2F,F
....................              ref=ref2-offset; 
0952:  MOVF   2E,W
0953:  SUBWF  28,W
0954:  MOVWF  24
0955:  MOVF   29,W
0956:  MOVWF  25
0957:  MOVF   2F,W
0958:  BTFSS  03.0
0959:  INCFSZ 2F,W
095A:  SUBWF  25,F
....................              ref=ref-refoffset; 
095B:  BCF    03.5
095C:  MOVF   6F,W
095D:  BSF    03.5
095E:  SUBWF  24,F
095F:  MOVF   70,W
0960:  BTFSS  03.0
0961:  INCFSZ 70,W
0962:  SUBWF  25,F
....................              //ref=(ref*40)/57; 
....................              ref=ref/0.9;         //1.385 
0963:  MOVF   25,W
0964:  MOVWF  69
0965:  MOVF   24,W
0966:  MOVWF  68
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   434
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  BSF    03.5
096D:  MOVWF  6F
096E:  MOVF   79,W
096F:  MOVWF  6E
0970:  MOVF   78,W
0971:  MOVWF  6D
0972:  MOVF   77,W
0973:  MOVWF  6C
0974:  MOVLW  66
0975:  BSF    03.6
0976:  MOVWF  13
0977:  MOVWF  12
0978:  MOVWF  11
0979:  MOVLW  7E
097A:  MOVWF  10
097B:  BCF    0A.3
097C:  BCF    03.5
097D:  BCF    03.6
097E:  CALL   453
097F:  BSF    0A.3
0980:  MOVF   7A,W
0981:  BSF    03.5
0982:  MOVWF  6B
0983:  MOVF   79,W
0984:  MOVWF  6A
0985:  MOVF   78,W
0986:  MOVWF  69
0987:  MOVF   77,W
0988:  MOVWF  68
0989:  BCF    0A.3
098A:  BCF    03.5
098B:  CALL   536
098C:  BSF    0A.3
098D:  MOVF   79,W
098E:  BSF    03.5
098F:  MOVWF  25
0990:  MOVF   78,W
0991:  MOVWF  24
....................  
....................          } 
....................          if(ref<=20.0)//10 
0992:  MOVF   25,W
0993:  MOVWF  69
0994:  MOVF   24,W
0995:  MOVWF  68
0996:  BCF    0A.3
0997:  BCF    03.5
0998:  CALL   434
0999:  BSF    0A.3
099A:  MOVF   7A,W
099B:  BSF    03.5
099C:  MOVWF  6B
099D:  MOVF   79,W
099E:  MOVWF  6A
099F:  MOVF   78,W
09A0:  MOVWF  69
09A1:  MOVF   77,W
09A2:  MOVWF  68
09A3:  CLRF   6F
09A4:  CLRF   6E
09A5:  MOVLW  20
09A6:  MOVWF  6D
09A7:  MOVLW  83
09A8:  MOVWF  6C
09A9:  BCF    0A.3
09AA:  BCF    03.5
09AB:  CALL   557
09AC:  BSF    0A.3
09AD:  BTFSC  03.0
09AE:  GOTO   1B1
09AF:  BTFSS  03.2
09B0:  GOTO   1B6
....................          { 
....................             ref=20.0;//210 
09B1:  BSF    03.5
09B2:  CLRF   25
09B3:  MOVLW  14
09B4:  MOVWF  24
09B5:  BCF    03.5
....................          } 
....................          totalref2=0; 
09B6:  BSF    03.5
09B7:  CLRF   5B
09B8:  CLRF   5A
09B9:  CLRF   59
09BA:  CLRF   58
....................          adccntr1=0; 
09BB:  CLRF   67
09BC:  CLRF   66
....................  
....................       //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
....................     } 
....................  
....................     if(adccntr >=adcavg)//256)//128) 
09BD:  MOVF   65,W
09BE:  SUBLW  00
09BF:  BTFSC  03.0
09C0:  GOTO   44B
....................     { 
....................       cur=totalcur>>leftshift;//8; 
09C1:  MOVF   51,W
09C2:  BCF    03.5
09C3:  MOVWF  47
09C4:  BSF    03.5
09C5:  MOVF   52,W
09C6:  BCF    03.5
09C7:  MOVWF  48
09C8:  BSF    03.5
09C9:  MOVF   53,W
09CA:  BCF    03.5
09CB:  MOVWF  49
09CC:  CLRF   4A
....................  
....................       calcur=(cur*maxshunt)/maxadc; 
09CD:  MOVF   4A,W
09CE:  BSF    03.5
09CF:  MOVWF  6B
09D0:  BCF    03.5
09D1:  MOVF   49,W
09D2:  BSF    03.5
09D3:  MOVWF  6A
09D4:  BCF    03.5
09D5:  MOVF   48,W
09D6:  BSF    03.5
09D7:  MOVWF  69
09D8:  BCF    03.5
09D9:  MOVF   47,W
09DA:  BSF    03.5
09DB:  MOVWF  68
09DC:  BCF    03.5
09DD:  MOVF   66,W
09DE:  BSF    03.5
09DF:  MOVWF  6F
09E0:  BCF    03.5
09E1:  MOVF   65,W
09E2:  BSF    03.5
09E3:  MOVWF  6E
09E4:  BCF    03.5
09E5:  MOVF   64,W
09E6:  BSF    03.5
09E7:  MOVWF  6D
09E8:  BCF    03.5
09E9:  MOVF   63,W
09EA:  BSF    03.5
09EB:  MOVWF  6C
09EC:  BCF    0A.3
09ED:  BCF    03.5
09EE:  GOTO   5C0
09EF:  BSF    0A.3
09F0:  MOVF   7A,W
09F1:  BSF    03.5
09F2:  MOVWF  6B
09F3:  MOVF   79,W
09F4:  MOVWF  6A
09F5:  MOVF   78,W
09F6:  MOVWF  69
09F7:  MOVF   77,W
09F8:  MOVWF  68
09F9:  MOVF   6B,W
09FA:  MOVWF  6F
09FB:  MOVF   6A,W
09FC:  MOVWF  6E
09FD:  MOVF   69,W
09FE:  MOVWF  6D
09FF:  MOVF   68,W
0A00:  MOVWF  6C
0A01:  BCF    03.5
0A02:  MOVF   62,W
0A03:  BSF    03.5
0A04:  BSF    03.6
0A05:  MOVWF  13
0A06:  BCF    03.5
0A07:  BCF    03.6
0A08:  MOVF   61,W
0A09:  BSF    03.5
0A0A:  BSF    03.6
0A0B:  MOVWF  12
0A0C:  BCF    03.5
0A0D:  BCF    03.6
0A0E:  MOVF   60,W
0A0F:  BSF    03.5
0A10:  BSF    03.6
0A11:  MOVWF  11
0A12:  BCF    03.5
0A13:  BCF    03.6
0A14:  MOVF   5F,W
0A15:  BSF    03.5
0A16:  BSF    03.6
0A17:  MOVWF  10
0A18:  BCF    0A.3
0A19:  BCF    03.5
0A1A:  BCF    03.6
0A1B:  GOTO   603
0A1C:  BSF    0A.3
0A1D:  MOVF   7A,W
0A1E:  MOVWF  5E
0A1F:  MOVF   79,W
0A20:  MOVWF  5D
0A21:  MOVF   78,W
0A22:  MOVWF  5C
0A23:  MOVF   77,W
0A24:  MOVWF  5B
....................       //##################################################### 
....................      // ref2=totalref2>>leftshift;//8; 
....................       vtgref=totalref>>leftshift;//8; 
0A25:  BSF    03.5
0A26:  MOVF   5D,W
0A27:  MOVWF  73
0A28:  MOVF   5E,W
0A29:  MOVWF  74
....................       tripvolt=tripref>>leftshift;//8; 
0A2A:  MOVF   61,W
0A2B:  MOVWF  75
0A2C:  MOVF   62,W
0A2D:  MOVWF  76
....................       //ref2=totalref>>8; 
....................       //******************************************************* 
....................        /*  if(ref2<=120) //110 
....................          { 
....................             ref=10.0; 
....................          } 
....................          else 
....................          { 
....................              errorp=ref2; 
....................              errorp=errorp/4.616;   //4.616 
....................              offset=constant-errorp; 
....................              ref=ref2-offset; 
....................              ref=ref-refoffset; 
....................              //ref=(ref*40)/57; 
....................              ref=ref/1.385;         //1.385 
....................  
....................          } 
....................          if(ref<=10.0) 
....................          { 
....................             ref=10.0; 
....................          } 
....................  
....................          */ 
....................  
....................       //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
....................      if(offsetokf==0) 
0A2E:  BCF    03.5
0A2F:  MOVF   37,F
0A30:  BTFSS  03.2
0A31:  GOTO   25C
....................       { 
....................          offcnt++; 
0A32:  MOVLW  01
0A33:  ADDWF  53,F
0A34:  BTFSC  03.0
0A35:  INCF   54,F
0A36:  BTFSC  03.2
0A37:  INCF   55,F
0A38:  BTFSC  03.2
0A39:  INCF   56,F
....................          if(offcnt==3) 
0A3A:  MOVF   53,W
0A3B:  SUBLW  03
0A3C:  BTFSS  03.2
0A3D:  GOTO   256
0A3E:  MOVF   54,F
0A3F:  BTFSS  03.2
0A40:  GOTO   256
0A41:  MOVF   55,F
0A42:  BTFSS  03.2
0A43:  GOTO   256
0A44:  MOVF   56,F
0A45:  BTFSS  03.2
0A46:  GOTO   256
....................          { 
....................             offsetokf=1; 
0A47:  MOVLW  01
0A48:  MOVWF  37
....................             offcnt=0; 
0A49:  CLRF   56
0A4A:  CLRF   55
0A4B:  CLRF   54
0A4C:  CLRF   53
....................             curoffset=calcur; 
0A4D:  MOVF   5E,W
0A4E:  MOVWF  52
0A4F:  MOVF   5D,W
0A50:  MOVWF  51
0A51:  MOVF   5C,W
0A52:  MOVWF  50
0A53:  MOVF   5B,W
0A54:  MOVWF  4F
....................  
....................          } 
....................          else 
0A55:  GOTO   25B
....................          { 
....................            current=1;//curoffset; 
0A56:  CLRF   3E
0A57:  CLRF   3D
0A58:  CLRF   3C
0A59:  MOVLW  01
0A5A:  MOVWF  3B
....................          } 
....................       } 
....................       else 
0A5B:  GOTO   2BC
....................       { 
....................          if(calcur >= curoffset) 
0A5C:  MOVF   52,W
0A5D:  SUBWF  5E,W
0A5E:  BTFSS  03.0
0A5F:  GOTO   2B6
0A60:  BTFSS  03.2
0A61:  GOTO   272
0A62:  MOVF   51,W
0A63:  SUBWF  5D,W
0A64:  BTFSS  03.0
0A65:  GOTO   2B6
0A66:  BTFSS  03.2
0A67:  GOTO   272
0A68:  MOVF   50,W
0A69:  SUBWF  5C,W
0A6A:  BTFSS  03.0
0A6B:  GOTO   2B6
0A6C:  BTFSS  03.2
0A6D:  GOTO   272
0A6E:  MOVF   4F,W
0A6F:  SUBWF  5B,W
0A70:  BTFSS  03.0
0A71:  GOTO   2B6
....................          { 
....................             current=calcur-curoffset; 
0A72:  MOVF   4F,W
0A73:  SUBWF  5B,W
0A74:  MOVWF  3B
0A75:  MOVF   5C,W
0A76:  MOVWF  3C
0A77:  MOVF   50,W
0A78:  BTFSS  03.0
0A79:  INCFSZ 50,W
0A7A:  SUBWF  3C,F
0A7B:  MOVF   5D,W
0A7C:  MOVWF  3D
0A7D:  MOVF   51,W
0A7E:  BTFSS  03.0
0A7F:  INCFSZ 51,W
0A80:  SUBWF  3D,F
0A81:  MOVF   5E,W
0A82:  MOVWF  3E
0A83:  MOVF   52,W
0A84:  BTFSS  03.0
0A85:  INCFSZ 52,W
0A86:  SUBWF  3E,F
....................             //current=50; 
....................             if(current >= 10.0) 
0A87:  MOVF   3E,W
0A88:  BSF    03.5
0A89:  MOVWF  6B
0A8A:  BCF    03.5
0A8B:  MOVF   3D,W
0A8C:  BSF    03.5
0A8D:  MOVWF  6A
0A8E:  BCF    03.5
0A8F:  MOVF   3C,W
0A90:  BSF    03.5
0A91:  MOVWF  69
0A92:  BCF    03.5
0A93:  MOVF   3B,W
0A94:  BSF    03.5
0A95:  MOVWF  68
0A96:  BCF    0A.3
0A97:  BCF    03.5
0A98:  CALL   64D
0A99:  BSF    0A.3
0A9A:  BSF    03.5
0A9B:  CLRF   6B
0A9C:  CLRF   6A
0A9D:  MOVLW  20
0A9E:  MOVWF  69
0A9F:  MOVLW  82
0AA0:  MOVWF  68
0AA1:  MOVF   7A,W
0AA2:  MOVWF  6F
0AA3:  MOVF   79,W
0AA4:  MOVWF  6E
0AA5:  MOVF   78,W
0AA6:  MOVWF  6D
0AA7:  MOVF   77,W
0AA8:  MOVWF  6C
0AA9:  BCF    0A.3
0AAA:  BCF    03.5
0AAB:  CALL   557
0AAC:  BSF    0A.3
0AAD:  BTFSC  03.0
0AAE:  GOTO   2B1
0AAF:  BTFSS  03.2
0AB0:  GOTO   2B4
....................             { 
....................                weldon=1;                  //welding started... 
0AB1:  MOVLW  01
0AB2:  MOVWF  3A
....................             } 
....................             else 
0AB3:  GOTO   2B5
....................             { 
....................                weldon=0; 
0AB4:  CLRF   3A
....................             } 
....................          } 
....................          else 
0AB5:  GOTO   2BC
....................          { 
....................             current=1; 
0AB6:  CLRF   3E
0AB7:  CLRF   3D
0AB8:  CLRF   3C
0AB9:  MOVLW  01
0ABA:  MOVWF  3B
....................             weldon=0; 
0ABB:  CLRF   3A
....................          } 
....................       } 
....................  
....................       //******************************************************************* 
....................      vtg=totalvtg>>leftshift;//8; 
0ABC:  BSF    03.5
0ABD:  MOVF   55,W
0ABE:  MOVWF  71
0ABF:  MOVF   56,W
0AC0:  MOVWF  72
....................      voltage=(vtg*1000.0)/62.5;//17.0;//3.3=97V fvtg;//decimal count 
0AC1:  MOVF   72,W
0AC2:  MOVWF  69
0AC3:  MOVF   71,W
0AC4:  MOVWF  68
0AC5:  BCF    0A.3
0AC6:  BCF    03.5
0AC7:  CALL   434
0AC8:  BSF    0A.3
0AC9:  MOVF   7A,W
0ACA:  BSF    03.5
0ACB:  MOVWF  6B
0ACC:  MOVF   79,W
0ACD:  MOVWF  6A
0ACE:  MOVF   78,W
0ACF:  MOVWF  69
0AD0:  MOVF   77,W
0AD1:  MOVWF  68
0AD2:  CLRF   6F
0AD3:  CLRF   6E
0AD4:  MOVLW  7A
0AD5:  MOVWF  6D
0AD6:  MOVLW  88
0AD7:  MOVWF  6C
0AD8:  BCF    0A.3
0AD9:  BCF    03.5
0ADA:  GOTO   66A
0ADB:  BSF    0A.3
0ADC:  MOVF   77,W
0ADD:  BSF    03.5
0ADE:  MOVWF  68
0ADF:  MOVF   78,W
0AE0:  MOVWF  69
0AE1:  MOVF   79,W
0AE2:  MOVWF  6A
0AE3:  MOVF   7A,W
0AE4:  MOVWF  6B
0AE5:  MOVWF  6F
0AE6:  MOVF   6A,W
0AE7:  MOVWF  6E
0AE8:  MOVF   69,W
0AE9:  MOVWF  6D
0AEA:  MOVF   68,W
0AEB:  MOVWF  6C
0AEC:  BSF    03.6
0AED:  CLRF   13
0AEE:  CLRF   12
0AEF:  MOVLW  7A
0AF0:  MOVWF  11
0AF1:  MOVLW  84
0AF2:  MOVWF  10
0AF3:  BCF    0A.3
0AF4:  BCF    03.5
0AF5:  BCF    03.6
0AF6:  CALL   453
0AF7:  BSF    0A.3
0AF8:  MOVF   7A,W
0AF9:  BSF    03.5
0AFA:  MOVWF  6F
0AFB:  MOVF   79,W
0AFC:  MOVWF  6E
0AFD:  MOVF   78,W
0AFE:  MOVWF  6D
0AFF:  MOVF   77,W
0B00:  MOVWF  6C
0B01:  BCF    0A.3
0B02:  BCF    03.5
0B03:  CALL   709
0B04:  BSF    0A.3
0B05:  MOVF   7A,W
0B06:  MOVWF  46
0B07:  MOVF   79,W
0B08:  MOVWF  45
0B09:  MOVF   78,W
0B0A:  MOVWF  44
0B0B:  MOVF   77,W
0B0C:  MOVWF  43
....................      //if(voltage<=0) 
....................      //voltage=1; 
....................      if((voltage<4000.0) && (weldon==0)) 
0B0D:  MOVF   46,W
0B0E:  BSF    03.5
0B0F:  MOVWF  6B
0B10:  BCF    03.5
0B11:  MOVF   45,W
0B12:  BSF    03.5
0B13:  MOVWF  6A
0B14:  BCF    03.5
0B15:  MOVF   44,W
0B16:  BSF    03.5
0B17:  MOVWF  69
0B18:  BCF    03.5
0B19:  MOVF   43,W
0B1A:  BSF    03.5
0B1B:  MOVWF  68
0B1C:  BCF    0A.3
0B1D:  BCF    03.5
0B1E:  CALL   64D
0B1F:  BSF    0A.3
0B20:  MOVF   7A,W
0B21:  BSF    03.5
0B22:  MOVWF  6B
0B23:  MOVF   79,W
0B24:  MOVWF  6A
0B25:  MOVF   78,W
0B26:  MOVWF  69
0B27:  MOVF   77,W
0B28:  MOVWF  68
0B29:  CLRF   6F
0B2A:  CLRF   6E
0B2B:  MOVLW  7A
0B2C:  MOVWF  6D
0B2D:  MOVLW  8A
0B2E:  MOVWF  6C
0B2F:  BCF    0A.3
0B30:  BCF    03.5
0B31:  CALL   557
0B32:  BSF    0A.3
0B33:  BTFSS  03.0
0B34:  GOTO   343
0B35:  MOVF   3A,F
0B36:  BTFSS  03.2
0B37:  GOTO   343
....................      { 
....................         noocvf=1; 
0B38:  MOVLW  01
0B39:  BSF    03.5
0B3A:  MOVWF  49
....................         if(cnt4sec>=40) 
0B3B:  MOVF   4B,W
0B3C:  SUBLW  27
0B3D:  BTFSC  03.0
0B3E:  GOTO   341
....................         { 
....................            ocverrf=1; 
0B3F:  MOVLW  01
0B40:  MOVWF  3B
....................         } 
....................      } 
....................      else 
0B41:  GOTO   347
0B42:  BCF    03.5
....................      { 
....................         ocverrf=0; 
0B43:  BSF    03.5
0B44:  CLRF   3B
....................         noocvf=0; 
0B45:  CLRF   49
....................         cnt4sec=0; 
0B46:  CLRF   4B
....................      } 
....................    //******************************************************************* 
....................     { 
....................          if(tripvolt>1000.0) 
0B47:  MOVF   76,W
0B48:  MOVWF  69
0B49:  MOVF   75,W
0B4A:  MOVWF  68
0B4B:  BCF    0A.3
0B4C:  BCF    03.5
0B4D:  CALL   434
0B4E:  BSF    0A.3
0B4F:  BSF    03.5
0B50:  CLRF   6B
0B51:  CLRF   6A
0B52:  MOVLW  7A
0B53:  MOVWF  69
0B54:  MOVLW  88
0B55:  MOVWF  68
0B56:  MOVF   7A,W
0B57:  MOVWF  6F
0B58:  MOVF   79,W
0B59:  MOVWF  6E
0B5A:  MOVF   78,W
0B5B:  MOVWF  6D
0B5C:  MOVF   77,W
0B5D:  MOVWF  6C
0B5E:  BCF    0A.3
0B5F:  BCF    03.5
0B60:  CALL   557
0B61:  BSF    0A.3
0B62:  BTFSS  03.0
0B63:  GOTO   36A
....................          { 
....................             uverrf=0; 
0B64:  CLRF   7E
....................             overrf=0; 
0B65:  BSF    03.5
0B66:  CLRF   34
....................             therrf=0; 
0B67:  CLRF   35
....................          } 
....................          else if(tripvolt > 180.0 && tripvolt < 220.0) 
0B68:  GOTO   439
0B69:  BCF    03.5
0B6A:  MOVF   76,W
0B6B:  BSF    03.5
0B6C:  MOVWF  69
0B6D:  MOVF   75,W
0B6E:  MOVWF  68
0B6F:  BCF    0A.3
0B70:  BCF    03.5
0B71:  CALL   434
0B72:  BSF    0A.3
0B73:  BSF    03.5
0B74:  CLRF   6B
0B75:  CLRF   6A
0B76:  MOVLW  34
0B77:  MOVWF  69
0B78:  MOVLW  86
0B79:  MOVWF  68
0B7A:  MOVF   7A,W
0B7B:  MOVWF  6F
0B7C:  MOVF   79,W
0B7D:  MOVWF  6E
0B7E:  MOVF   78,W
0B7F:  MOVWF  6D
0B80:  MOVF   77,W
0B81:  MOVWF  6C
0B82:  BCF    0A.3
0B83:  BCF    03.5
0B84:  CALL   557
0B85:  BSF    0A.3
0B86:  BTFSS  03.0
0B87:  GOTO   3AD
0B88:  MOVF   76,W
0B89:  BSF    03.5
0B8A:  MOVWF  69
0B8B:  MOVF   75,W
0B8C:  MOVWF  68
0B8D:  BCF    0A.3
0B8E:  BCF    03.5
0B8F:  CALL   434
0B90:  BSF    0A.3
0B91:  MOVF   7A,W
0B92:  BSF    03.5
0B93:  MOVWF  6B
0B94:  MOVF   79,W
0B95:  MOVWF  6A
0B96:  MOVF   78,W
0B97:  MOVWF  69
0B98:  MOVF   77,W
0B99:  MOVWF  68
0B9A:  CLRF   6F
0B9B:  CLRF   6E
0B9C:  MOVLW  5C
0B9D:  MOVWF  6D
0B9E:  MOVLW  86
0B9F:  MOVWF  6C
0BA0:  BCF    0A.3
0BA1:  BCF    03.5
0BA2:  CALL   557
0BA3:  BSF    0A.3
0BA4:  BTFSS  03.0
0BA5:  GOTO   3AD
....................          { 
....................             uverrf=1; 
0BA6:  MOVLW  01
0BA7:  MOVWF  7E
....................             overrf=0; 
0BA8:  BSF    03.5
0BA9:  CLRF   34
....................             therrf=0; 
0BAA:  CLRF   35
....................          } 
....................          else if(tripvolt > 390.0 && tripvolt < 430.0) 
0BAB:  GOTO   439
0BAC:  BCF    03.5
0BAD:  MOVF   76,W
0BAE:  BSF    03.5
0BAF:  MOVWF  69
0BB0:  MOVF   75,W
0BB1:  MOVWF  68
0BB2:  BCF    0A.3
0BB3:  BCF    03.5
0BB4:  CALL   434
0BB5:  BSF    0A.3
0BB6:  BSF    03.5
0BB7:  CLRF   6B
0BB8:  CLRF   6A
0BB9:  MOVLW  43
0BBA:  MOVWF  69
0BBB:  MOVLW  87
0BBC:  MOVWF  68
0BBD:  MOVF   7A,W
0BBE:  MOVWF  6F
0BBF:  MOVF   79,W
0BC0:  MOVWF  6E
0BC1:  MOVF   78,W
0BC2:  MOVWF  6D
0BC3:  MOVF   77,W
0BC4:  MOVWF  6C
0BC5:  BCF    0A.3
0BC6:  BCF    03.5
0BC7:  CALL   557
0BC8:  BSF    0A.3
0BC9:  BTFSS  03.0
0BCA:  GOTO   3F0
0BCB:  MOVF   76,W
0BCC:  BSF    03.5
0BCD:  MOVWF  69
0BCE:  MOVF   75,W
0BCF:  MOVWF  68
0BD0:  BCF    0A.3
0BD1:  BCF    03.5
0BD2:  CALL   434
0BD3:  BSF    0A.3
0BD4:  MOVF   7A,W
0BD5:  BSF    03.5
0BD6:  MOVWF  6B
0BD7:  MOVF   79,W
0BD8:  MOVWF  6A
0BD9:  MOVF   78,W
0BDA:  MOVWF  69
0BDB:  MOVF   77,W
0BDC:  MOVWF  68
0BDD:  CLRF   6F
0BDE:  CLRF   6E
0BDF:  MOVLW  57
0BE0:  MOVWF  6D
0BE1:  MOVLW  87
0BE2:  MOVWF  6C
0BE3:  BCF    0A.3
0BE4:  BCF    03.5
0BE5:  CALL   557
0BE6:  BSF    0A.3
0BE7:  BTFSS  03.0
0BE8:  GOTO   3F0
....................          { 
....................             uverrf=0; 
0BE9:  CLRF   7E
....................             overrf=1; 
0BEA:  MOVLW  01
0BEB:  BSF    03.5
0BEC:  MOVWF  34
....................             therrf=0; 
0BED:  CLRF   35
....................          } 
....................          else if(tripvolt > 590.0 && tripvolt < 630.0) 
0BEE:  GOTO   439
0BEF:  BCF    03.5
0BF0:  MOVF   76,W
0BF1:  BSF    03.5
0BF2:  MOVWF  69
0BF3:  MOVF   75,W
0BF4:  MOVWF  68
0BF5:  BCF    0A.3
0BF6:  BCF    03.5
0BF7:  CALL   434
0BF8:  BSF    0A.3
0BF9:  BSF    03.5
0BFA:  CLRF   6B
0BFB:  MOVLW  80
0BFC:  MOVWF  6A
0BFD:  MOVLW  13
0BFE:  MOVWF  69
0BFF:  MOVLW  88
0C00:  MOVWF  68
0C01:  MOVF   7A,W
0C02:  MOVWF  6F
0C03:  MOVF   79,W
0C04:  MOVWF  6E
0C05:  MOVF   78,W
0C06:  MOVWF  6D
0C07:  MOVF   77,W
0C08:  MOVWF  6C
0C09:  BCF    0A.3
0C0A:  BCF    03.5
0C0B:  CALL   557
0C0C:  BSF    0A.3
0C0D:  BTFSS  03.0
0C0E:  GOTO   435
0C0F:  MOVF   76,W
0C10:  BSF    03.5
0C11:  MOVWF  69
0C12:  MOVF   75,W
0C13:  MOVWF  68
0C14:  BCF    0A.3
0C15:  BCF    03.5
0C16:  CALL   434
0C17:  BSF    0A.3
0C18:  MOVF   7A,W
0C19:  BSF    03.5
0C1A:  MOVWF  6B
0C1B:  MOVF   79,W
0C1C:  MOVWF  6A
0C1D:  MOVF   78,W
0C1E:  MOVWF  69
0C1F:  MOVF   77,W
0C20:  MOVWF  68
0C21:  CLRF   6F
0C22:  MOVLW  80
0C23:  MOVWF  6E
0C24:  MOVLW  1D
0C25:  MOVWF  6D
0C26:  MOVLW  88
0C27:  MOVWF  6C
0C28:  BCF    0A.3
0C29:  BCF    03.5
0C2A:  CALL   557
0C2B:  BSF    0A.3
0C2C:  BTFSS  03.0
0C2D:  GOTO   435
....................          { 
....................             uverrf=0; 
0C2E:  CLRF   7E
....................             overrf=0; 
0C2F:  BSF    03.5
0C30:  CLRF   34
....................             therrf=1; 
0C31:  MOVLW  01
0C32:  MOVWF  35
....................          } 
....................          else 
0C33:  GOTO   439
0C34:  BCF    03.5
....................          { 
....................             uverrf=0; 
0C35:  CLRF   7E
....................             overrf=0; 
0C36:  BSF    03.5
0C37:  CLRF   34
....................             therrf=0; 
0C38:  CLRF   35
....................          } 
....................       } 
....................    //********************************************************************** 
....................       totalvtg=0; 
0C39:  CLRF   57
0C3A:  CLRF   56
0C3B:  CLRF   55
0C3C:  CLRF   54
....................       totalcur=0; 
0C3D:  CLRF   53
0C3E:  CLRF   52
0C3F:  CLRF   51
0C40:  CLRF   50
....................       adccntr=0; 
0C41:  CLRF   65
0C42:  CLRF   64
....................       totalref=0; 
0C43:  CLRF   5F
0C44:  CLRF   5E
0C45:  CLRF   5D
0C46:  CLRF   5C
....................       //totalref2=0; 
....................       tripref=0; 
0C47:  CLRF   63
0C48:  CLRF   62
0C49:  CLRF   61
0C4A:  CLRF   60
....................       //inttochar1(current); 
....................       //printf("%lx",current); 
....................       //putchar(0x0D); 
....................       //putchar(0x0A); 
....................     } 
....................   } 
0C4B:  BCF    03.5
0C4C:  BCF    0A.3
0C4D:  BSF    0A.4
0C4E:  GOTO   138 (RETURN)
....................  
.................... //========================= 
....................  /*unsigned char chk_band(unsigned int16 cur11,unsigned int16 prevcur11) 
....................  { 
....................      unsigned int16 diff=0; 
....................      unsigned char ans=0; 
....................      { 
....................         if(cur11 >= prevcur11) 
....................         { 
....................             diff= cur11 - prevcur11; 
....................         } 
....................         else 
....................         { 
....................             diff= prevcur11 - cur11; 
....................         } 
....................      } 
....................      if(diff >=2) 
....................      {ans='Y';} 
....................      else 
....................      {ans='N';} 
....................      return(ans); 
....................  }*/ 
....................  
.................... //========================= 
....................  
.................... /*unsigned char readswitch() 
.................... { 
....................    unsigned char data=0,data1=0; 
....................    data=input_a(); 
....................    data=data & 0x38; 
....................    data=data>>3; 
....................    delay_us(200); 
....................    data1=input_a(); 
....................    data1=data1 & 0x38; 
....................    data1=data1>>3; 
....................    if(data==data1) 
....................    { 
....................       if(data==0x00) 
....................       {range='A';} 
....................       else if(data==0x01) 
....................       {range='B';} 
....................       else if(data==0x02) 
....................       {range='C';} 
....................       else if(data==0x03) 
....................       {range='D';} 
....................       else if(data==0x04) 
....................       {range='E';} 
....................       else if(data==0x05) 
....................       {range='F';} 
....................       else if(data==0x06) 
....................       {range='G';} 
....................       else if(data==0x07) 
....................       {range='H';} 
....................    } 
....................  return(range); 
.................... } */ 
....................  
.................... unsigned char readswitch() 
.................... { 
....................    unsigned char data=0,data1=0; 
*
02C2:  BSF    03.5
02C3:  CLRF   68
02C4:  CLRF   69
....................    data=input_c(); 
02C5:  MOVLW  FF
02C6:  MOVWF  4F
02C7:  MOVWF  07
02C8:  BCF    03.5
02C9:  MOVF   07,W
02CA:  BSF    03.5
02CB:  MOVWF  68
....................    data=data & 0x07; 
02CC:  MOVLW  07
02CD:  ANDWF  68,F
....................   // data=data>>1; 
....................    delay_us(200); 
02CE:  MOVLW  85
02CF:  MOVWF  77
02D0:  DECFSZ 77,F
02D1:  GOTO   2D0
....................    data1=input_c(); 
02D2:  MOVLW  FF
02D3:  MOVWF  4F
02D4:  MOVWF  07
02D5:  BCF    03.5
02D6:  MOVF   07,W
02D7:  BSF    03.5
02D8:  MOVWF  69
....................    data1=data1 & 0x07; 
02D9:  MOVLW  07
02DA:  ANDWF  69,F
....................    //data1=data1>>1; 
....................    if(data==data1) 
02DB:  MOVF   69,W
02DC:  SUBWF  68,W
02DD:  BTFSS  03.2
02DE:  GOTO   323
....................    { 
....................       if(data==0x00) 
02DF:  MOVF   68,F
02E0:  BTFSS  03.2
02E1:  GOTO   2E7
....................       {range='A';} 
02E2:  MOVLW  41
02E3:  BCF    03.5
02E4:  MOVWF  39
....................       else if(data==0x01) 
02E5:  GOTO   322
02E6:  BSF    03.5
02E7:  DECFSZ 68,W
02E8:  GOTO   2EE
....................       {range='B';} 
02E9:  MOVLW  42
02EA:  BCF    03.5
02EB:  MOVWF  39
....................       else if(data==0x02) 
02EC:  GOTO   322
02ED:  BSF    03.5
02EE:  MOVF   68,W
02EF:  SUBLW  02
02F0:  BTFSS  03.2
02F1:  GOTO   2F7
....................       {range='C';} 
02F2:  MOVLW  43
02F3:  BCF    03.5
02F4:  MOVWF  39
....................       else if(data==0x03) 
02F5:  GOTO   322
02F6:  BSF    03.5
02F7:  MOVF   68,W
02F8:  SUBLW  03
02F9:  BTFSS  03.2
02FA:  GOTO   300
....................       {range='D';} 
02FB:  MOVLW  44
02FC:  BCF    03.5
02FD:  MOVWF  39
....................       else if(data==0x04) 
02FE:  GOTO   322
02FF:  BSF    03.5
0300:  MOVF   68,W
0301:  SUBLW  04
0302:  BTFSS  03.2
0303:  GOTO   309
....................       {range='E';} 
0304:  MOVLW  45
0305:  BCF    03.5
0306:  MOVWF  39
....................       else if(data==0x05) 
0307:  GOTO   322
0308:  BSF    03.5
0309:  MOVF   68,W
030A:  SUBLW  05
030B:  BTFSS  03.2
030C:  GOTO   312
....................       {range='F';} 
030D:  MOVLW  46
030E:  BCF    03.5
030F:  MOVWF  39
....................       else if(data==0x06) 
0310:  GOTO   322
0311:  BSF    03.5
0312:  MOVF   68,W
0313:  SUBLW  06
0314:  BTFSS  03.2
0315:  GOTO   31B
....................       {range='G';} 
0316:  MOVLW  47
0317:  BCF    03.5
0318:  MOVWF  39
....................       else if(data==0x07) 
0319:  GOTO   322
031A:  BSF    03.5
031B:  MOVF   68,W
031C:  SUBLW  07
031D:  BTFSS  03.2
031E:  GOTO   323
....................       {range='H';} 
031F:  MOVLW  48
0320:  BCF    03.5
0321:  MOVWF  39
0322:  BSF    03.5
....................    } 
....................  return(range); 
0323:  BCF    03.5
0324:  MOVF   39,W
0325:  MOVWF  78
.................... } 
0326:  BCF    0A.3
0327:  BSF    0A.4
0328:  GOTO   0C7 (RETURN)
.................... /*void mmatigsw() 
.................... { 
....................   unsigned char A; 
....................    A=input(PIN_B5); 
....................    if(A==1) 
....................    { 
....................       mma=1; 
....................    }    
....................    else 
....................    { 
....................       mma=0; 
....................    } 
.................... }*/ 
....................  
.................... void debounce() 
.................... { 
....................     for(jj=0;jj<255;jj++); 
*
072E:  CLRF   2B
072F:  INCFSZ 2B,W
0730:  GOTO   732
0731:  GOTO   734
0732:  INCF   2B,F
0733:  GOTO   72F
.................... } 
0734:  RETLW  00
....................  
.................... /*void readmem(void) 
.................... { 
....................   lowbyte=read_eeprom(0x00);   //priyanka 
....................   vrefmaxcnt1=lowbyte; 
....................   hibyte=read_eeprom(0x01); 
....................   vrefmaxcnt=(hibyte*256)+vrefmaxcnt1; 
.................... }*/ 
.................... /*void dispmodel() 
.................... { 
....................    if(model=='A') 
....................    { 
....................      // digit[0]=0X02; //'2'- 0x30;; 
....................       //digit[1]=0X05; //'5'- 0x30; 
....................      // digit[2]=0X00; //'0'- 0x30; 
....................       //digit[3]=0x0D; //'C'- 0x30; 
....................       digit[4]=0X02; 
....................       digit[5]=0X05; 
....................       digit[6]=0X00; 
....................       digit[7]=0X25; 
....................       maxadc=625; 
....................       maxshunt=250; 
....................    } 
....................    else if(model=='B') 
....................    { 
....................       digit[4]=0X03; 
....................       digit[5]=0X00; 
....................       digit[6]=0X00; 
....................       digit[7]=0X25; 
....................       maxadc=625; 
....................       maxshunt=300; 
....................    } 
....................    else if(model=='C') 
....................    { 
....................       digit[4]=0X04; 
....................       digit[5]=0X00; 
....................       digit[6]=0X00; 
....................       digit[7]=0X25; 
....................       maxadc=625; 
....................       maxshunt=400; 
....................    } 
....................    else if(model=='D') 
....................    { 
....................       digit[4]=0X06; 
....................       digit[5]=0X00; 
....................       digit[6]=0X00; 
....................       digit[7]=0X25; 
....................       maxadc=625; 
....................       maxshunt=600; 
....................    } 
....................    else if(model=='E') 
....................    { 
....................       digit[4]=0X08; 
....................       digit[5]=0X00; 
....................       digit[6]=0X00; 
....................       digit[7]=0X25; 
....................       maxadc=625; 
....................       maxshunt=800; 
....................    } 
....................    else if(model=='F') 
....................    { 
....................       digit[4]=0X01; 
....................       digit[5]=0X00; 
....................       digit[6]=0X00; 
....................       digit[7]=0X00; 
....................       maxadc=625; 
....................       maxshunt=100; 
....................    } 
....................    else if(model=='G') 
....................    { 
....................       digit[4]=0X01; 
....................       digit[5]=0X02; 
....................       digit[6]=0X00; 
....................       digit[7]=0X00; 
....................       maxadc=625; 
....................       maxshunt=1200; 
....................    } 
....................    else if(model=='H') 
....................    { 
....................       digit[4]=0X01; 
....................       digit[5]=0X05; 
....................       digit[6]=0X00; 
....................       digit[7]=0X00; 
....................       maxadc=625; 
....................       maxshunt=1500; 
....................    } 
....................  }*/ 
....................  
.................... void dispmodel() 
.................... { 
....................    if(model=='A') 
*
033D:  MOVF   38,W
033E:  SUBLW  41
033F:  BTFSS  03.2
0340:  GOTO   354
....................    { 
....................      // digit[0]=0X02; //'2'- 0x30;; 
....................       //digit[1]=0X05; //'5'- 0x30; 
....................      // digit[2]=0X00; //'0'- 0x30; 
....................       //digit[3]=0x0D; //'C'- 0x30; 
....................       digit[4]=0X01; 
0341:  MOVLW  01
0342:  MOVWF  33
....................       digit[5]=0X05; 
0343:  MOVLW  05
0344:  MOVWF  34
....................       digit[6]=0X00; 
0345:  CLRF   35
....................       digit[7]=0X00; 
0346:  CLRF   36
....................       maxadc=625; 
0347:  CLRF   62
0348:  CLRF   61
0349:  MOVLW  02
034A:  MOVWF  60
034B:  MOVLW  71
034C:  MOVWF  5F
....................       maxshunt=1500; 
034D:  CLRF   66
034E:  CLRF   65
034F:  MOVLW  05
0350:  MOVWF  64
0351:  MOVLW  DC
0352:  MOVWF  63
....................    } 
....................    else if(model=='B') 
0353:  GOTO   3F2
0354:  MOVF   38,W
0355:  SUBLW  42
0356:  BTFSS  03.2
0357:  GOTO   36A
....................    { 
....................       digit[4]=0X01; 
0358:  MOVLW  01
0359:  MOVWF  33
....................       digit[5]=0X02; 
035A:  MOVLW  02
035B:  MOVWF  34
....................       digit[6]=0X00; 
035C:  CLRF   35
....................       digit[7]=0X00; 
035D:  CLRF   36
....................       maxadc=625; 
035E:  CLRF   62
035F:  CLRF   61
0360:  MOVWF  60
0361:  MOVLW  71
0362:  MOVWF  5F
....................       maxshunt=1200; 
0363:  CLRF   66
0364:  CLRF   65
0365:  MOVLW  04
0366:  MOVWF  64
0367:  MOVLW  B0
0368:  MOVWF  63
....................    } 
....................    else if(model=='C') 
0369:  GOTO   3F2
036A:  MOVF   38,W
036B:  SUBLW  43
036C:  BTFSS  03.2
036D:  GOTO   380
....................    { 
....................       digit[4]=0X01; 
036E:  MOVLW  01
036F:  MOVWF  33
....................       digit[5]=0X00; 
0370:  CLRF   34
....................       digit[6]=0X00; 
0371:  CLRF   35
....................       digit[7]=0X00; 
0372:  CLRF   36
....................       maxadc=625; 
0373:  CLRF   62
0374:  CLRF   61
0375:  MOVLW  02
0376:  MOVWF  60
0377:  MOVLW  71
0378:  MOVWF  5F
....................       maxshunt=1000; 
0379:  CLRF   66
037A:  CLRF   65
037B:  MOVLW  03
037C:  MOVWF  64
037D:  MOVLW  E8
037E:  MOVWF  63
....................    } 
....................    else if(model=='D') 
037F:  GOTO   3F2
0380:  MOVF   38,W
0381:  SUBLW  44
0382:  BTFSS  03.2
0383:  GOTO   397
....................    { 
....................       digit[4]=0X08; 
0384:  MOVLW  08
0385:  MOVWF  33
....................       digit[5]=0X00; 
0386:  CLRF   34
....................       digit[6]=0X00; 
0387:  CLRF   35
....................       digit[7]=0X25; 
0388:  MOVLW  25
0389:  MOVWF  36
....................       maxadc=625; 
038A:  CLRF   62
038B:  CLRF   61
038C:  MOVLW  02
038D:  MOVWF  60
038E:  MOVLW  71
038F:  MOVWF  5F
....................       maxshunt=800; 
0390:  CLRF   66
0391:  CLRF   65
0392:  MOVLW  03
0393:  MOVWF  64
0394:  MOVLW  20
0395:  MOVWF  63
....................    } 
....................    else if(model=='E') 
0396:  GOTO   3F2
0397:  MOVF   38,W
0398:  SUBLW  45
0399:  BTFSS  03.2
039A:  GOTO   3AE
....................    { 
....................       digit[4]=0X06; 
039B:  MOVLW  06
039C:  MOVWF  33
....................       digit[5]=0X00; 
039D:  CLRF   34
....................       digit[6]=0X00; 
039E:  CLRF   35
....................       digit[7]=0X25; 
039F:  MOVLW  25
03A0:  MOVWF  36
....................       maxadc=625; 
03A1:  CLRF   62
03A2:  CLRF   61
03A3:  MOVLW  02
03A4:  MOVWF  60
03A5:  MOVLW  71
03A6:  MOVWF  5F
....................       maxshunt=600; 
03A7:  CLRF   66
03A8:  CLRF   65
03A9:  MOVLW  02
03AA:  MOVWF  64
03AB:  MOVLW  58
03AC:  MOVWF  63
....................    } 
....................    else if(model=='F') 
03AD:  GOTO   3F2
03AE:  MOVF   38,W
03AF:  SUBLW  46
03B0:  BTFSS  03.2
03B1:  GOTO   3C5
....................    { 
....................       digit[4]=0X04; 
03B2:  MOVLW  04
03B3:  MOVWF  33
....................       digit[5]=0X00; 
03B4:  CLRF   34
....................       digit[6]=0X00; 
03B5:  CLRF   35
....................       digit[7]=0X25; 
03B6:  MOVLW  25
03B7:  MOVWF  36
....................       maxadc=625; 
03B8:  CLRF   62
03B9:  CLRF   61
03BA:  MOVLW  02
03BB:  MOVWF  60
03BC:  MOVLW  71
03BD:  MOVWF  5F
....................       maxshunt=400; 
03BE:  CLRF   66
03BF:  CLRF   65
03C0:  MOVLW  01
03C1:  MOVWF  64
03C2:  MOVLW  90
03C3:  MOVWF  63
....................    } 
....................    else if(model=='G') 
03C4:  GOTO   3F2
03C5:  MOVF   38,W
03C6:  SUBLW  47
03C7:  BTFSS  03.2
03C8:  GOTO   3DC
....................    { 
....................       digit[4]=0X03; 
03C9:  MOVLW  03
03CA:  MOVWF  33
....................       digit[5]=0X00; 
03CB:  CLRF   34
....................       digit[6]=0X00; 
03CC:  CLRF   35
....................       digit[7]=0X25; 
03CD:  MOVLW  25
03CE:  MOVWF  36
....................       maxadc=625; 
03CF:  CLRF   62
03D0:  CLRF   61
03D1:  MOVLW  02
03D2:  MOVWF  60
03D3:  MOVLW  71
03D4:  MOVWF  5F
....................       maxshunt=300; 
03D5:  CLRF   66
03D6:  CLRF   65
03D7:  MOVLW  01
03D8:  MOVWF  64
03D9:  MOVLW  2C
03DA:  MOVWF  63
....................    } 
....................    else if(model=='H') 
03DB:  GOTO   3F2
03DC:  MOVF   38,W
03DD:  SUBLW  48
03DE:  BTFSS  03.2
03DF:  GOTO   3F2
....................    { 
....................       digit[4]=0X02; 
03E0:  MOVLW  02
03E1:  MOVWF  33
....................       digit[5]=0X05; 
03E2:  MOVLW  05
03E3:  MOVWF  34
....................       digit[6]=0X00; 
03E4:  CLRF   35
....................       digit[7]=0X25; 
03E5:  MOVLW  25
03E6:  MOVWF  36
....................       maxadc=625; 
03E7:  CLRF   62
03E8:  CLRF   61
03E9:  MOVLW  02
03EA:  MOVWF  60
03EB:  MOVLW  71
03EC:  MOVWF  5F
....................       maxshunt=250; 
03ED:  CLRF   66
03EE:  CLRF   65
03EF:  CLRF   64
03F0:  MOVLW  FA
03F1:  MOVWF  63
....................    } 
....................  } 
03F2:  BCF    0A.3
03F3:  BSF    0A.4
03F4:  GOTO   0F8 (RETURN)
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2FD4   INTRC_IO NOWDT NOPWRT NOMCLR NOCP NOCPD BOREN IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BOR4VBROWNOUT_SL NOWRT
