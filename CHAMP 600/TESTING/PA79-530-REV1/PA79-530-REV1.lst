CCS PCM C Compiler, Version 4.005, 35007               06-Mar-23 16:22

               Filename: D:\Rahul -\CHAMP 600\PA79-530-REV1\PA79-530-REV1.lst

               ROM used: 2122 words (52%)
                         Largest free fragment is 1784
               RAM used: 101 (57%) at main() level
                         116 (66%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   035
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  7B
002E:  MOVF   28,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
0035:  BCF    0A.3
0036:  GOTO   068
.................... #include "curandref.h" 
.................... #include <16F883.h> 
.................... //////// Standard Header file for the PIC16F883 device //////////////// 
.................... #device PIC16F883 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... //#FUSES NIWRTC 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES INTRC 
.................... #use delay(clock=8000000) 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... //#include "D:\PRIYANKA\PROJECT\DPM\current&ref\DPM.h" 
.................... #include "controller.c" 
.................... //------------------------------------------------------------------------------ 
.................... #byte MCU_STATUS = 0x003 
.................... #bit    MCU_C = MCU_STATUS.0 
.................... #bit    MCU_DC = MCU_STATUS.1 
.................... #bit    MCU_Z = MCU_STATUS.2 
.................... #bit    MCU_PD = MCU_STATUS.3 
.................... #bit    MCU_TO = MCU_STATUS.4 
.................... #bit    MCU_RP0 = MCU_STATUS.5 
.................... #bit    MCU_RP1 = MCU_STATUS.6 
.................... #bit    MCU_IRP = MCU_STATUS.7 
.................... #byte MCU_PORTA = 0x005 
.................... #byte MCU_PORTB = 0x006 
.................... #byte MCU_PORTC = 0x007 
.................... #byte MCU_PORTD = 0x008 
.................... #byte MCU_PORTE = 0x009 
.................... #bit    MCU_RE0 = MCU_PORTE.0 
.................... #bit    MCU_RE1 = MCU_PORTE.1 
.................... #bit    MCU_RE2 = MCU_PORTE.2 
.................... #byte MCU_INTCON = 0x00B 
.................... #bit    MCU_RBIF = MCU_INTCON.0 
.................... #bit    MCU_INTF = MCU_INTCON.1 
.................... #bit    MCU_T0IF = MCU_INTCON.2 
.................... #bit    MCU_RBIE = MCU_INTCON.3 
.................... #bit    MCU_INTE = MCU_INTCON.4 
.................... #bit    MCU_T0IE = MCU_INTCON.5 
.................... #bit    MCU_PEIE = MCU_INTCON.6 
.................... #bit    MCU_GIE = MCU_INTCON.7 
.................... #byte MCU_PIR1 = 0x00C 
.................... #bit    MCU_TMR1IF = MCU_PIR1.0 
.................... #bit    MCU_TMR2IF = MCU_PIR1.1 
.................... #bit    MCU_CCP1IF = MCU_PIR1.2 
.................... #bit    MCU_SSPIF = MCU_PIR1.3 
.................... #bit    MCU_TXIF = MCU_PIR1.4 
.................... #bit    MCU_RCIF = MCU_PIR1.5 
.................... #bit    MCU_ADIF = MCU_PIR1.6 
.................... #bit    MCU_PSPIF = MCU_PIR1.7 
.................... #byte MCU_OPTION_REG = 0x181 
.................... #bit    MCU_PS0 = MCU_OPTION_REG.0 
.................... #bit    MCU_PS1 = MCU_OPTION_REG.1 
.................... #bit    MCU_PS2 = MCU_OPTION_REG.2 
.................... #bit    MCU_PSA = MCU_OPTION_REG.3 
.................... #bit    MCU_T0SE = MCU_OPTION_REG.4 
.................... #bit    MCU_T0CS = MCU_OPTION_REG.5 
.................... #bit    MCU_INTEDG = MCU_OPTION_REG.6 
.................... #bit    MCU_RBPU = MCU_OPTION_REG.7 
.................... #byte MCU_ANSEL = 0x188 
.................... #bit    MCU_ANSELANSO = MCU_ANSEL.0 
.................... #bit    MCU_ANSELANS1 = MCU_ANSEL.1 
.................... #bit    MCU_ANSELANS2 = MCU_ANSEL.2 
.................... #bit    MCU_ANSELANS3 = MCU_ANSEL.3 
.................... #bit    MCU_ANSELANS4 = MCU_ANSEL.4 
.................... #bit    MCU_ANSELANS5 = MCU_ANSEL.5 
.................... #bit    MCU_ANSELANS6 = MCU_ANSEL.6 
.................... #bit    MCU_ANSELANS7 = MCU_ANSEL.7 
.................... #byte MCU_ANSELH = 0x189 
.................... #bit    MCU_ANSELHANS8 = MCU_ANSELH.0 
.................... #bit    MCU_ANSELHANS9 = MCU_ANSELH.1 
.................... #bit    MCU_ANSELHANS10 = MCU_ANSELH.2 
.................... #bit    MCU_ANSELHANS11 = MCU_ANSELH.3 
.................... #byte MCU_ADCON0 = 0x01F 
.................... #bit    MCU_ADON = MCU_ADCON0.0 
.................... //#bit    MCU_GO/DONE = MCU_ADCON0.1 
.................... #bit    MCU_CHS0 = MCU_ADCON0.2 
.................... #bit    MCU_CHS1 = MCU_ADCON0.3 
.................... #bit    MCU_CHS2 = MCU_ADCON0.4 
.................... #bit    MCU_CHS3 = MCU_ADCON0.5 
.................... #byte MCU_OSCCON = 0x08F 
.................... #byte MCU_OSCTUNE= 0x090 
....................  
....................  
.................... #fuses HS,NOWDT,NOLVP,INTRC_IO,NOWDT,NOMCLR 
.................... #use delay(clock=8000000) 
*
014A:  MOVLW  A8
014B:  MOVWF  04
014C:  BCF    03.7
014D:  MOVF   00,W
014E:  BTFSC  03.2
014F:  GOTO   15D
0150:  MOVLW  02
0151:  MOVWF  78
0152:  CLRF   77
0153:  DECFSZ 77,F
0154:  GOTO   153
0155:  DECFSZ 78,F
0156:  GOTO   152
0157:  MOVLW  97
0158:  MOVWF  77
0159:  DECFSZ 77,F
015A:  GOTO   159
015B:  DECFSZ 00,F
015C:  GOTO   150
015D:  RETLW  00
....................  
....................  
.................... #include "variable.c" 
.................... #define disp1      PIN_B0 
.................... #define disp2      PIN_B1 
.................... #define disp3      PIN_B2 
.................... #define disp4      PIN_B3 
....................  
.................... #define segmenta   PIN_c0 
.................... #define segmentb   PIN_c1 
.................... #define segmentc   PIN_c2 
.................... #define segmentd   PIN_c3 
.................... #define segmente   PIN_c4 
.................... #define segmentf   PIN_c5 
.................... #define segmentg   PIN_c6 
.................... #define segmentdp  PIN_c7 
....................  
.................... #define sw1        PIN_A3 
.................... #define sw2        PIN_A4 
.................... #define sw3        PIN_A5 
.................... #define TIGSW      PIN_B5 
.................... //#define offset     PIN_B4 
....................  
.................... //--------------------------------------------------------------------- 
.................... unsigned char digitcnt=0,hexvalue=0,readadcf=0,jj=0;                     //pinout=0,readswitch1=0,mma=0,hibyte=0,lowbyte=0; 
*
080C:  CLRF   29
080D:  CLRF   2A
080E:  CLRF   2B
080F:  CLRF   2C
.................... static unsigned char digit[4],offsetokf=0,model=0,range=0,weldon=0;      //band=0 
0810:  CLRF   2D
0811:  CLRF   2E
0812:  CLRF   2F
0813:  CLRF   30
0814:  CLRF   31
0815:  CLRF   32
0816:  CLRF   33
0817:  CLRF   34
.................... unsigned int32 current=0,value=0,cur=0,prevcur=0,curoffset=0,offcnt=0;   //voltage=0,offset2=0,prevoff=0 
0818:  CLRF   35
0819:  CLRF   36
081A:  CLRF   37
081B:  CLRF   38
081C:  CLRF   39
081D:  CLRF   3A
081E:  CLRF   3B
081F:  CLRF   3C
0820:  CLRF   3D
0821:  CLRF   3E
0822:  CLRF   3F
0823:  CLRF   40
0824:  CLRF   41
0825:  CLRF   42
0826:  CLRF   43
0827:  CLRF   44
0828:  CLRF   45
0829:  CLRF   46
082A:  CLRF   47
082B:  CLRF   48
082C:  CLRF   49
082D:  CLRF   4A
082E:  CLRF   4B
082F:  CLRF   4C
.................... unsigned int32 calcur=0,maxadc=675,maxshunt=400; 
0830:  CLRF   4D
0831:  CLRF   4E
0832:  CLRF   4F
0833:  CLRF   50
0834:  MOVLW  A3
0835:  MOVWF  51
0836:  MOVLW  02
0837:  MOVWF  52
0838:  CLRF   53
0839:  CLRF   54
083A:  MOVLW  90
083B:  MOVWF  55
083C:  MOVLW  01
083D:  MOVWF  56
083E:  CLRF   57
083F:  CLRF   58
.................... unsigned int16 refoffset=9;//100;//7;//20;//123;//130;//123; //102; 
0840:  MOVLW  09
0841:  MOVWF  59
0842:  CLRF   5A
.................... unsigned int16 prevref=0,ref=0,offset1=0,ref2=0,errorp=0,constant=120,offset=0; 
0843:  CLRF   5B
0844:  CLRF   5C
0845:  CLRF   5D
0846:  CLRF   5E
0847:  CLRF   5F
0848:  CLRF   60
0849:  CLRF   61
084A:  CLRF   62
084B:  CLRF   63
084C:  CLRF   64
084D:  MOVLW  78
084E:  MOVWF  65
084F:  CLRF   66
0850:  CLRF   67
0851:  CLRF   68
.................... //--------------------------------------------------------------------- 
.................... //------------------------------------------------------------------------------ 
.................... void initialise(void); 
.................... void display(void); 
.................... void short_del(void); 
.................... void inttochar1(unsigned int16); 
.................... void adc_init(void); 
.................... void inttochar(unsigned int16); 
.................... void readadc(void); 
.................... void dispmodel(void); 
.................... unsigned char readswitch(); 
.................... unsigned char chk_band(unsigned int16,unsigned int16); 
.................... void mmatigsw(); 
.................... void debounce(); 
.................... void readmem(); 
....................  
....................  
.................... //------------------------------------------------------------------------------ 
....................  
.................... #include "interrupt.c" 
....................  
.................... /*#int_timer0 
.................... void timer0_isr(void) 
.................... { 
....................     static unsigned int count3=0; 
....................     clear_interrupt(INT_TIMER0); 
....................     set_timer0(0xFC40);              //sets timer to interrupt in 6ms 
....................     count3++; 
....................      if(count3==10) 
....................         { 
....................             count3=0; 
....................             readswitch1=1; 
....................         } 
.................... }*/ 
....................  
.................... #int_timer1 
.................... void timer1_isr(void) 
.................... { 
....................     static unsigned char count=0,count1=0,count2=0; 
0852:  CLRF   69
0853:  CLRF   6A
0854:  CLRF   6B
....................     clear_interrupt(INT_TIMER1); 
*
0068:  BCF    0C.0
....................     set_timer1(0xFC40);            //FC40 for 500usec at 8mhz 
0069:  MOVLW  FC
006A:  MOVWF  0F
006B:  MOVLW  40
006C:  MOVWF  0E
....................     count++; 
006D:  INCF   69,F
....................     count1++; 
006E:  INCF   6A,F
....................     count2++; 
006F:  INCF   6B,F
....................  
....................     /*if(pinout==0) 
....................      { 
....................          pinout=1; 
....................          output_a(0X00); 
....................          //MCU_PORTA=0X00; 
....................      } 
....................      else if(pinout==1) 
....................      { 
....................          pinout=0; 
....................          output_a(0xff); 
....................          //MCU_PORTA=0XFF; 
....................      }*/ 
....................    if(count==10) 
0070:  MOVF   69,W
0071:  SUBLW  0A
0072:  BTFSS  03.2
0073:  GOTO   105
....................    { 
....................          count=0; 
0074:  CLRF   69
....................          //inttochar(voltage); 
....................          display(); 
....................    } 
....................    if(count1==2) 
*
0105:  MOVF   6A,W
0106:  SUBLW  02
0107:  BTFSS  03.2
0108:  GOTO   10C
....................    { 
....................       count1=0; 
0109:  CLRF   6A
....................       readadcf=1; 
010A:  MOVLW  01
010B:  MOVWF  2B
....................    } 
....................   /* if(count2==10) 
....................    { 
....................       count2=0; 
....................       readswitch1=1; 
....................    }*/ 
....................  
.................... } 
....................  
....................  
.................... #include "display.c" 
....................  
....................  
....................  
....................  
....................  
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) 
....................  
....................  
010C:  BCF    0C.0
010D:  BCF    0A.3
010E:  GOTO   022
.................... void main() 
.................... { 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  BSF    03.5
0805:  BCF    1F.4
0806:  BCF    1F.5
0807:  MOVLW  00
0808:  MOVWF  1D
0809:  MOVLW  07
080A:  BCF    03.5
080B:  MOVWF  1F
....................    #asm 
....................          CLRF  MCU_ANSEL ;      //0-i/o,1-analog 
*
0868:  BSF    03.6
0869:  CLRF   08
....................          CLRF  MCU_ANSELH ; 
086A:  CLRF   09
....................          ; 
....................          BCF   MCU_RP1; 
086B:  BCF    03.6
....................          BCF   MCU_RP0; 
086C:  BCF    03.5
....................          ; 
....................          BCF   MCU_RP1; 
086D:  BCF    03.6
....................          BSF   MCU_RP0; 
086E:  BSF    03.5
....................          MOVLW  0xff 
086F:  MOVLW  FF
....................          MOVWF  0X90 
0870:  BCF    03.6
0871:  MOVWF  10
....................          MOVLW  0x73 
0872:  MOVLW  73
....................          MOVWF  0X8F 
0873:  MOVWF  0F
....................          BCF   MCU_RP1; 
0874:  BCF    03.6
....................          BCF   MCU_RP0; 
0875:  BCF    03.5
....................     #endasm 
....................       initialise(); 
0876:  BCF    0A.3
0877:  BCF    03.5
0878:  GOTO   10F
0879:  BSF    0A.3
....................       adc_init(); 
087A:  BCF    0A.3
087B:  GOTO   13B
087C:  BSF    0A.3
....................   // current=000; 
....................   // inttochar1(current); 
....................    //set_tris_a(0x38); 
....................    set_tris_a(0x38); 
087D:  MOVLW  38
087E:  BSF    03.5
087F:  MOVWF  05
....................    set_tris_b(0x10);//(0x00); 
0880:  MOVLW  10
0881:  MOVWF  06
....................    set_tris_c(0x00); 
*
0855:  MOVLW  FF
0856:  MOVWF  6C
*
0882:  MOVLW  00
0883:  MOVWF  07
0884:  BCF    03.5
0885:  MOVWF  6C
....................  
....................    //short_del(); 
....................    delay_ms(2); 
0886:  MOVLW  02
0887:  BSF    03.5
0888:  MOVWF  28
0889:  BCF    0A.3
088A:  BCF    03.5
088B:  CALL   14A
088C:  BSF    0A.3
....................    //voltage=985; 
....................    //inttochar(voltage); 
....................    //inttochar1(voltage); 
....................  
....................    digit[0]='D'- 0x30;; 
088D:  MOVLW  14
088E:  MOVWF  2D
....................    digit[1]='O'- 0x30; 
088F:  MOVLW  1F
0890:  MOVWF  2E
....................    digit[2]='R'- 0x30; 
0891:  MOVLW  22
0892:  MOVWF  2F
....................    digit[3]='A'- 0x30; 
0893:  MOVLW  11
0894:  MOVWF  30
....................    delay_ms(100); 
0895:  MOVLW  64
0896:  BSF    03.5
0897:  MOVWF  28
0898:  BCF    0A.3
0899:  BCF    03.5
089A:  CALL   14A
089B:  BSF    0A.3
....................    delay_ms(100); 
089C:  MOVLW  64
089D:  BSF    03.5
089E:  MOVWF  28
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   14A
08A2:  BSF    0A.3
....................    model= readswitch(); 
08A3:  BCF    0A.3
08A4:  GOTO   15E
08A5:  BSF    0A.3
08A6:  MOVF   78,W
08A7:  MOVWF  32
....................    dispmodel(); 
08A8:  BCF    0A.3
08A9:  GOTO   1CC
08AA:  BSF    0A.3
....................    delay_ms(100); 
08AB:  MOVLW  64
08AC:  BSF    03.5
08AD:  MOVWF  28
08AE:  BCF    0A.3
08AF:  BCF    03.5
08B0:  CALL   14A
08B1:  BSF    0A.3
....................    delay_ms(100); 
08B2:  MOVLW  64
08B3:  BSF    03.5
08B4:  MOVWF  28
08B5:  BCF    0A.3
08B6:  BCF    03.5
08B7:  CALL   14A
08B8:  BSF    0A.3
....................    //mma=1; 
....................    while(1) 
....................    { 
....................  
....................              if(readadcf==1) 
08B9:  DECFSZ 2B,W
08BA:  GOTO   0BF
....................              { 
....................                    readadc(); 
08BB:  BCF    0A.3
08BC:  GOTO   463
08BD:  BSF    0A.3
....................                    readadcf=0; 
08BE:  CLRF   2B
....................              } 
....................  
....................               if(weldon==1) 
08BF:  DECFSZ 34,W
08C0:  GOTO   0EB
....................               { 
....................                 if(prevcur!=current) 
08C1:  MOVF   35,W
08C2:  SUBWF  41,W
08C3:  BTFSS  03.2
08C4:  GOTO   0D1
08C5:  MOVF   36,W
08C6:  SUBWF  42,W
08C7:  BTFSS  03.2
08C8:  GOTO   0D1
08C9:  MOVF   37,W
08CA:  SUBWF  43,W
08CB:  BTFSS  03.2
08CC:  GOTO   0D1
08CD:  MOVF   38,W
08CE:  SUBWF  44,W
08CF:  BTFSC  03.2
08D0:  GOTO   0EA
....................                  { 
....................                     inttochar1(current); 
08D1:  MOVF   36,W
08D2:  BSF    03.5
08D3:  MOVWF  29
08D4:  BCF    03.5
08D5:  MOVF   35,W
08D6:  BSF    03.5
08D7:  MOVWF  28
08D8:  MOVF   29,W
08D9:  MOVWF  2B
08DA:  MOVF   28,W
08DB:  MOVWF  2A
08DC:  BCF    0A.3
08DD:  BCF    03.5
08DE:  CALL   6AD
08DF:  BSF    0A.3
....................                     prevcur=current; 
08E0:  MOVF   38,W
08E1:  MOVWF  44
08E2:  MOVF   37,W
08E3:  MOVWF  43
08E4:  MOVF   36,W
08E5:  MOVWF  42
08E6:  MOVF   35,W
08E7:  MOVWF  41
....................                     prevref=0; 
08E8:  CLRF   5C
08E9:  CLRF   5B
....................                  } 
....................               } 
....................               else 
08EA:  GOTO   106
....................               { 
....................                  if(prevref!=ref) 
08EB:  MOVF   5D,W
08EC:  SUBWF  5B,W
08ED:  BTFSS  03.2
08EE:  GOTO   0F3
08EF:  MOVF   5E,W
08F0:  SUBWF  5C,W
08F1:  BTFSC  03.2
08F2:  GOTO   106
....................                  { 
....................                     inttochar1(ref); 
08F3:  MOVF   5E,W
08F4:  BSF    03.5
08F5:  MOVWF  2B
08F6:  BCF    03.5
08F7:  MOVF   5D,W
08F8:  BSF    03.5
08F9:  MOVWF  2A
08FA:  BCF    0A.3
08FB:  BCF    03.5
08FC:  CALL   6AD
08FD:  BSF    0A.3
....................                     prevref=ref; 
08FE:  MOVF   5E,W
08FF:  MOVWF  5C
0900:  MOVF   5D,W
0901:  MOVWF  5B
....................                     prevcur=0; 
0902:  CLRF   44
0903:  CLRF   43
0904:  CLRF   42
0905:  CLRF   41
....................                  } 
....................               } 
....................    }//while 
0906:  GOTO   0B9
.................... }//main 
....................  
.................... void inttochar1(unsigned int16 parameter) 
.................... { 
0907:  SLEEP
....................    if(model=='G' || model=='H') 
*
06AD:  MOVF   32,W
06AE:  SUBLW  47
06AF:  BTFSC  03.2
06B0:  GOTO   6B5
06B1:  MOVF   32,W
06B2:  SUBLW  48
06B3:  BTFSS  03.2
06B4:  GOTO   708
....................    { 
....................       digit[2]=parameter % 10;//;//0;//'0'; 
06B5:  BSF    03.5
06B6:  MOVF   2B,W
06B7:  MOVWF  2D
06B8:  MOVF   2A,W
06B9:  MOVWF  2C
06BA:  CLRF   2F
06BB:  MOVLW  0A
06BC:  MOVWF  2E
06BD:  BCF    03.5
06BE:  CALL   686
06BF:  MOVF   77,W
06C0:  MOVWF  2F
....................       parameter /= 10; 
06C1:  BSF    03.5
06C2:  MOVF   2B,W
06C3:  MOVWF  2D
06C4:  MOVF   2A,W
06C5:  MOVWF  2C
06C6:  CLRF   2F
06C7:  MOVLW  0A
06C8:  MOVWF  2E
06C9:  BCF    03.5
06CA:  CALL   686
06CB:  MOVF   79,W
06CC:  BSF    03.5
06CD:  MOVWF  2B
06CE:  MOVF   78,W
06CF:  MOVWF  2A
....................       digit[1] = parameter % 10; 
06D0:  MOVF   2B,W
06D1:  MOVWF  2D
06D2:  MOVF   2A,W
06D3:  MOVWF  2C
06D4:  CLRF   2F
06D5:  MOVLW  0A
06D6:  MOVWF  2E
06D7:  BCF    03.5
06D8:  CALL   686
06D9:  MOVF   77,W
06DA:  MOVWF  2E
....................       parameter /= 10; 
06DB:  BSF    03.5
06DC:  MOVF   2B,W
06DD:  MOVWF  2D
06DE:  MOVF   2A,W
06DF:  MOVWF  2C
06E0:  CLRF   2F
06E1:  MOVLW  0A
06E2:  MOVWF  2E
06E3:  BCF    03.5
06E4:  CALL   686
06E5:  MOVF   79,W
06E6:  BSF    03.5
06E7:  MOVWF  2B
06E8:  MOVF   78,W
06E9:  MOVWF  2A
....................       digit[0] = parameter % 10; 
06EA:  MOVF   2B,W
06EB:  MOVWF  2D
06EC:  MOVF   2A,W
06ED:  MOVWF  2C
06EE:  CLRF   2F
06EF:  MOVLW  0A
06F0:  MOVWF  2E
06F1:  BCF    03.5
06F2:  CALL   686
06F3:  MOVF   77,W
06F4:  MOVWF  2D
....................       parameter /= 10; 
06F5:  BSF    03.5
06F6:  MOVF   2B,W
06F7:  MOVWF  2D
06F8:  MOVF   2A,W
06F9:  MOVWF  2C
06FA:  CLRF   2F
06FB:  MOVLW  0A
06FC:  MOVWF  2E
06FD:  BCF    03.5
06FE:  CALL   686
06FF:  MOVF   79,W
0700:  BSF    03.5
0701:  MOVWF  2B
0702:  MOVF   78,W
0703:  MOVWF  2A
....................       digit[3] = parameter; 
0704:  MOVF   2A,W
0705:  BCF    03.5
0706:  MOVWF  30
....................    } 
....................    else 
0707:  GOTO   741
....................    { 
....................       digit[3]=0; 
0708:  CLRF   30
....................       digit[2] = parameter % 10; 
0709:  BSF    03.5
070A:  MOVF   2B,W
070B:  MOVWF  2D
070C:  MOVF   2A,W
070D:  MOVWF  2C
070E:  CLRF   2F
070F:  MOVLW  0A
0710:  MOVWF  2E
0711:  BCF    03.5
0712:  CALL   686
0713:  MOVF   77,W
0714:  MOVWF  2F
....................       parameter /= 10; 
0715:  BSF    03.5
0716:  MOVF   2B,W
0717:  MOVWF  2D
0718:  MOVF   2A,W
0719:  MOVWF  2C
071A:  CLRF   2F
071B:  MOVLW  0A
071C:  MOVWF  2E
071D:  BCF    03.5
071E:  CALL   686
071F:  MOVF   79,W
0720:  BSF    03.5
0721:  MOVWF  2B
0722:  MOVF   78,W
0723:  MOVWF  2A
....................       digit[1] = parameter % 10; 
0724:  MOVF   2B,W
0725:  MOVWF  2D
0726:  MOVF   2A,W
0727:  MOVWF  2C
0728:  CLRF   2F
0729:  MOVLW  0A
072A:  MOVWF  2E
072B:  BCF    03.5
072C:  CALL   686
072D:  MOVF   77,W
072E:  MOVWF  2E
....................       parameter /= 10; 
072F:  BSF    03.5
0730:  MOVF   2B,W
0731:  MOVWF  2D
0732:  MOVF   2A,W
0733:  MOVWF  2C
0734:  CLRF   2F
0735:  MOVLW  0A
0736:  MOVWF  2E
0737:  BCF    03.5
0738:  CALL   686
0739:  MOVF   79,W
073A:  BSF    03.5
073B:  MOVWF  2B
073C:  MOVF   78,W
073D:  MOVWF  2A
....................       digit[0] = parameter; 
073E:  MOVF   2A,W
073F:  BCF    03.5
0740:  MOVWF  2D
....................    } 
.................... } 
0741:  RETLW  00
.................... void inttochar(unsigned int16 parameter) 
.................... { 
....................    digit[0]='A'- 0x30;; 
....................    digit[1]='D' - 0x30; 
....................    digit[2]='O' - 0x30; 
....................    digit[3]='R' - 0x30; 
.................... } 
....................  
.................... void short_del() 
.................... { 
....................   unsigned int16 i=0,j=0; 
....................   for(i=0;i<100;i++) 
....................   { 
....................      for(j=0;j<30;j++); 
....................   } 
.................... } 
....................  
.................... void initialise() 
.................... { 
....................          setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
010F:  BSF    03.5
0110:  BCF    1F.4
0111:  BCF    1F.5
0112:  MOVLW  00
0113:  MOVWF  1D
....................          setup_comparator(NC_NC_NC_NC); 
0114:  MOVLW  07
0115:  BCF    03.5
0116:  MOVWF  1F
0117:  BSF    03.5
0118:  MOVF   05,W
0119:  MOVLW  06
011A:  MOVWF  77
011B:  DECFSZ 77,F
011C:  GOTO   11B
011D:  NOP
011E:  BCF    03.5
011F:  MOVF   1F,W
0120:  BCF    0D.5
....................          setup_adc(ADC_CLOCK_INTERNAL  ); 
0121:  BSF    1F.6
0122:  BSF    1F.7
0123:  BSF    03.5
0124:  BSF    1F.7
0125:  BCF    03.5
0126:  BSF    1F.0
....................          enable_interrupts(GLOBAL); 
0127:  MOVLW  C0
0128:  IORWF  0B,F
....................          enable_interrupts(INT_TIMER1); 
0129:  BSF    03.5
012A:  BSF    0C.0
....................          setup_timer_0(T1_DISABLED); 
012B:  MOVF   01,W
012C:  ANDLW  C0
012D:  MOVWF  01
....................          setup_timer_1(T1_DISABLED); 
012E:  BCF    03.5
012F:  CLRF   10
....................          setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0130:  MOVLW  85
0131:  MOVWF  10
....................          disable_interrupts(INT_EXT); 
0132:  BCF    0B.4
....................          set_timer0(0x0f); 
0133:  MOVLW  0F
0134:  MOVWF  01
....................          set_timer1(0xFC40); 
0135:  MOVLW  FC
0136:  MOVWF  0F
0137:  MOVLW  40
0138:  MOVWF  0E
.................... } 
0139:  BSF    0A.3
013A:  GOTO   079 (RETURN)
.................... //============================================================================== 
.................... void adc_init() 
.................... { 
....................    setup_adc_ports(sAN0|sAN1|sAN2|VSS_VDD); 
013B:  BSF    03.5
013C:  BCF    1F.4
013D:  BCF    1F.5
013E:  MOVLW  00
013F:  IORLW  07
0140:  MOVWF  1D
....................      //setup_adc_ports(ALL_ANALOG); 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
0141:  BCF    03.5
0142:  BSF    1F.6
0143:  BSF    1F.7
0144:  BSF    03.5
0145:  BSF    1F.7
0146:  BCF    03.5
0147:  BSF    1F.0
....................    //set_adc_channel(0); 
.................... } 
0148:  BSF    0A.3
0149:  GOTO   07C (RETURN)
.................... //------------------------------------------------------------------------------ 
.................... const unsigned char lookup_table[45] = { 
....................                                      //{dp,g,f,e,d,c,b,a} 
....................                                      0x3F,   //0 
....................                                      0x06,   //1 
....................                                      0x5B,   //2 
....................                                      0x4F,   //3 
....................                                      0x66,   //4 
....................                                      0x6D,   //5 
....................                                      0x7D,   //6 
....................                                      0x07,   //7 
....................                                      0x7F,   //8 
....................                                      0x6F,   //9 
....................                                      0x00,   //3A Blank 
....................                                      0x00,   //3B Blank 
....................                                      0x00,   //3C Blank 
....................                                      0x00,   //3D Blank 
....................                                      0x00,   //3E Blank 
....................                                      0x00,   //3F Blank 
....................                                      0x00,   //40 Blank 
....................                                      0x77,   //A 
....................                                      0x7C,   //B 
....................                                      0x39,   //C 
....................                                      0x5E,   //D 
....................                                      0x79,   //E 
....................                                      0x71,   //F 
....................                                      0x3D,   //G 
....................                                      0x76,   //H 
....................                                      0x03,   //I 
....................                                      0x1E,   //J 
....................                                      0x70,   //K 
....................                                      0x38,   //L 
....................                                      0x55,   //M 
....................                                      0x54,   //N 
....................                                      0x5C,   //O 
....................                                      0x73,   //P 
....................                                      0x67,   //Q 
....................                                      0x50,   //R 
....................                                      0x6D,   //S 
....................                                      0x78,   //T 
....................                                      0x3E,   //U 
....................                                      0x1C    //V 
....................                                      0x6A,   //W 
....................                                      0x68,   //X 
....................                                      0x6E,   //Y 
....................                                      0x89,   //Z 
....................                                      }; 
.................... //------------------------------------------------------------------------------ 
....................  
.................... //------------------------------------------------------------------------------ 
.................... void display() 
.................... { 
....................    if(digitcnt==0) 
*
0075:  MOVF   29,F
0076:  BTFSS  03.2
0077:  GOTO   099
....................    { 
....................      OUTPUT_BIT(disp4,0); 
0078:  BCF    06.3
0079:  BSF    03.5
007A:  BCF    06.3
....................      //digit[0]=5; 
....................      hexvalue=lookup_table[digit[2]]; 
007B:  BCF    03.5
007C:  MOVF   2F,W
007D:  CALL   037
007E:  MOVWF  78
007F:  MOVWF  2A
....................      output_c(hexvalue); 
0080:  MOVLW  00
0081:  MOVWF  6C
0082:  BSF    03.5
0083:  CLRF   07
0084:  BCF    03.5
0085:  MOVF   2A,W
0086:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,1); 
0087:  BSF    06.0
0088:  BSF    03.5
0089:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
008A:  BCF    03.5
008B:  BCF    06.1
008C:  BSF    03.5
008D:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
008E:  BCF    03.5
008F:  BCF    06.2
0090:  BSF    03.5
0091:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0092:  BCF    03.5
0093:  BCF    06.3
0094:  BSF    03.5
0095:  BCF    06.3
....................      digitcnt++; 
0096:  BCF    03.5
0097:  INCF   29,F
....................    } 
....................    else if(digitcnt==1) 
0098:  GOTO   105
0099:  DECFSZ 29,W
009A:  GOTO   0BC
....................    { 
....................      OUTPUT_BIT(disp1,0); 
009B:  BCF    06.0
009C:  BSF    03.5
009D:  BCF    06.0
....................       //digit[1]=8; 
....................       hexvalue =lookup_table[digit[1]]; 
009E:  BCF    03.5
009F:  MOVF   2E,W
00A0:  CALL   037
00A1:  MOVWF  78
00A2:  MOVWF  2A
....................      output_c(hexvalue); 
00A3:  MOVLW  00
00A4:  MOVWF  6C
00A5:  BSF    03.5
00A6:  CLRF   07
00A7:  BCF    03.5
00A8:  MOVF   2A,W
00A9:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00AA:  BCF    06.0
00AB:  BSF    03.5
00AC:  BCF    06.0
....................      OUTPUT_BIT(disp2,1); 
00AD:  BCF    03.5
00AE:  BSF    06.1
00AF:  BSF    03.5
00B0:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00B1:  BCF    03.5
00B2:  BCF    06.2
00B3:  BSF    03.5
00B4:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00B5:  BCF    03.5
00B6:  BCF    06.3
00B7:  BSF    03.5
00B8:  BCF    06.3
....................      digitcnt++;// ++; 
00B9:  BCF    03.5
00BA:  INCF   29,F
....................    } 
....................    else if(digitcnt==2) 
00BB:  GOTO   105
00BC:  MOVF   29,W
00BD:  SUBLW  02
00BE:  BTFSS  03.2
00BF:  GOTO   0E1
....................    { 
....................      OUTPUT_BIT(disp2,0); 
00C0:  BCF    06.1
00C1:  BSF    03.5
00C2:  BCF    06.1
....................       //digit[2]=7; 
....................      hexvalue = lookup_table[digit[0]]; 
00C3:  BCF    03.5
00C4:  MOVF   2D,W
00C5:  CALL   037
00C6:  MOVWF  78
00C7:  MOVWF  2A
....................      output_c(hexvalue); 
00C8:  MOVLW  00
00C9:  MOVWF  6C
00CA:  BSF    03.5
00CB:  CLRF   07
00CC:  BCF    03.5
00CD:  MOVF   2A,W
00CE:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00CF:  BCF    06.0
00D0:  BSF    03.5
00D1:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00D2:  BCF    03.5
00D3:  BCF    06.1
00D4:  BSF    03.5
00D5:  BCF    06.1
....................      OUTPUT_BIT(disp3,1); 
00D6:  BCF    03.5
00D7:  BSF    06.2
00D8:  BSF    03.5
00D9:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00DA:  BCF    03.5
00DB:  BCF    06.3
00DC:  BSF    03.5
00DD:  BCF    06.3
....................      digitcnt++; 
00DE:  BCF    03.5
00DF:  INCF   29,F
....................    } 
....................    else if(digitcnt==3) 
00E0:  GOTO   105
00E1:  MOVF   29,W
00E2:  SUBLW  03
00E3:  BTFSS  03.2
00E4:  GOTO   105
....................    { 
....................      OUTPUT_BIT(disp3,0); 
00E5:  BCF    06.2
00E6:  BSF    03.5
00E7:  BCF    06.2
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[3]]; 
00E8:  BCF    03.5
00E9:  MOVF   30,W
00EA:  CALL   037
00EB:  MOVWF  78
00EC:  MOVWF  2A
....................      output_c(hexvalue); 
00ED:  MOVLW  00
00EE:  MOVWF  6C
00EF:  BSF    03.5
00F0:  CLRF   07
00F1:  BCF    03.5
00F2:  MOVF   2A,W
00F3:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00F4:  BCF    06.0
00F5:  BSF    03.5
00F6:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00F7:  BCF    03.5
00F8:  BCF    06.1
00F9:  BSF    03.5
00FA:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00FB:  BCF    03.5
00FC:  BCF    06.2
00FD:  BSF    03.5
00FE:  BCF    06.2
....................      OUTPUT_BIT(disp4,1); 
00FF:  BCF    03.5
0100:  BSF    06.3
0101:  BSF    03.5
0102:  BCF    06.3
....................      digitcnt=0; 
0103:  BCF    03.5
0104:  CLRF   29
....................    } 
.................... } 
....................  
....................  
.................... void readadc() 
.................... { 
....................     static unsigned int32 totalcur=0,totalvtg=0,adccntr=0,totalref=0;// 
*
0857:  CLRF   6D
0858:  CLRF   6E
0859:  CLRF   6F
085A:  CLRF   70
085B:  CLRF   71
085C:  CLRF   72
085D:  CLRF   73
085E:  CLRF   74
085F:  BSF    03.5
0860:  CLRF   20
0861:  CLRF   21
0862:  CLRF   22
0863:  CLRF   23
0864:  CLRF   24
0865:  CLRF   25
0866:  CLRF   26
0867:  CLRF   27
....................     /*set_adc_channel(0); 
....................     delay_us(10); 
....................     value=read_adc(); 
....................     totalvtg= totalvtg + value; 
....................     ;*/ 
....................     set_adc_channel(0); 
*
0463:  MOVLW  00
0464:  MOVWF  78
0465:  MOVF   1F,W
0466:  ANDLW  C3
0467:  IORWF  78,W
0468:  MOVWF  1F
....................     delay_us(5); 
0469:  MOVLW  03
046A:  MOVWF  77
046B:  DECFSZ 77,F
046C:  GOTO   46B
....................     value=read_adc(); 
046D:  BSF    1F.1
046E:  BTFSC  1F.1
046F:  GOTO   46E
0470:  BSF    03.5
0471:  MOVF   1E,W
0472:  BCF    03.5
0473:  MOVWF  39
0474:  MOVF   1E,W
0475:  MOVWF  3A
0476:  CLRF   3B
0477:  CLRF   3C
....................     totalcur= totalcur + value; 
0478:  MOVF   39,W
0479:  ADDWF  6D,F
047A:  MOVF   3A,W
047B:  BTFSC  03.0
047C:  INCFSZ 3A,W
047D:  ADDWF  6E,F
047E:  MOVF   3B,W
047F:  BTFSC  03.0
0480:  INCFSZ 3B,W
0481:  ADDWF  6F,F
0482:  MOVF   3C,W
0483:  BTFSC  03.0
0484:  INCFSZ 3C,W
0485:  ADDWF  70,F
....................     ; 
....................     set_adc_channel(2); 
0486:  MOVLW  08
0487:  MOVWF  78
0488:  MOVF   1F,W
0489:  ANDLW  C3
048A:  IORWF  78,W
048B:  MOVWF  1F
....................     delay_us(10); 
048C:  MOVLW  06
048D:  MOVWF  77
048E:  DECFSZ 77,F
048F:  GOTO   48E
0490:  NOP
....................     value=read_adc(); 
0491:  BSF    1F.1
0492:  BTFSC  1F.1
0493:  GOTO   492
0494:  BSF    03.5
0495:  MOVF   1E,W
0496:  BCF    03.5
0497:  MOVWF  39
0498:  MOVF   1E,W
0499:  MOVWF  3A
049A:  CLRF   3B
049B:  CLRF   3C
....................     totalref= totalref + value; 
049C:  MOVF   39,W
049D:  BSF    03.5
049E:  ADDWF  24,F
049F:  BCF    03.5
04A0:  MOVF   3A,W
04A1:  BTFSC  03.0
04A2:  INCFSZ 3A,W
04A3:  GOTO   4A5
04A4:  GOTO   4A8
04A5:  BSF    03.5
04A6:  ADDWF  25,F
04A7:  BCF    03.5
04A8:  MOVF   3B,W
04A9:  BTFSC  03.0
04AA:  INCFSZ 3B,W
04AB:  GOTO   4AD
04AC:  GOTO   4B0
04AD:  BSF    03.5
04AE:  ADDWF  26,F
04AF:  BCF    03.5
04B0:  MOVF   3C,W
04B1:  BTFSC  03.0
04B2:  INCFSZ 3C,W
04B3:  GOTO   4B5
04B4:  GOTO   4B8
04B5:  BSF    03.5
04B6:  ADDWF  27,F
04B7:  BCF    03.5
....................     ; 
....................     { 
....................        setup_adc_ports(ALL_ANALOG); 
04B8:  BSF    03.5
04B9:  BCF    1F.4
04BA:  BCF    1F.5
04BB:  MOVLW  00
04BC:  IORLW  FF
04BD:  MOVWF  1D
....................        set_adc_channel(11); 
04BE:  MOVLW  2C
04BF:  MOVWF  78
04C0:  BCF    03.5
04C1:  MOVF   1F,W
04C2:  ANDLW  C3
04C3:  IORWF  78,W
04C4:  MOVWF  1F
....................        delay_us(10); 
04C5:  MOVLW  06
04C6:  MOVWF  77
04C7:  DECFSZ 77,F
04C8:  GOTO   4C7
04C9:  NOP
....................        value=read_adc(); 
04CA:  BSF    1F.1
04CB:  BTFSC  1F.1
04CC:  GOTO   4CB
04CD:  BSF    03.5
04CE:  MOVF   1E,W
04CF:  BCF    03.5
04D0:  MOVWF  39
04D1:  MOVF   1E,W
04D2:  MOVWF  3A
04D3:  CLRF   3B
04D4:  CLRF   3C
....................        offset1=value; 
04D5:  MOVF   3A,W
04D6:  MOVWF  60
04D7:  MOVF   39,W
04D8:  MOVWF  5F
....................        setup_adc_ports(sAN0|sAN1|sAN2|VSS_VDD); 
04D9:  BSF    03.5
04DA:  BCF    1F.4
04DB:  BCF    1F.5
04DC:  MOVLW  00
04DD:  IORLW  07
04DE:  MOVWF  1D
....................  
....................     } 
....................  
....................     adccntr++; 
04DF:  MOVLW  01
04E0:  ADDWF  20,F
04E1:  BTFSC  03.0
04E2:  INCF   21,F
04E3:  BTFSC  03.2
04E4:  INCF   22,F
04E5:  BTFSC  03.2
04E6:  INCF   23,F
....................  
....................     if(adccntr >=256)//128) 
04E7:  MOVF   23,F
04E8:  BTFSS  03.2
04E9:  GOTO   4F1
04EA:  MOVF   22,F
04EB:  BTFSS  03.2
04EC:  GOTO   4F1
04ED:  MOVF   21,W
04EE:  SUBLW  00
04EF:  BTFSC  03.0
04F0:  GOTO   683
....................     { 
....................          cur=totalcur>>8; 
04F1:  BCF    03.5
04F2:  MOVF   6E,W
04F3:  MOVWF  3D
04F4:  MOVF   6F,W
04F5:  MOVWF  3E
04F6:  MOVF   70,W
04F7:  MOVWF  3F
04F8:  CLRF   40
....................          calcur=(cur*maxshunt)/maxadc; 
04F9:  MOVF   40,W
04FA:  BSF    03.5
04FB:  MOVWF  2B
04FC:  BCF    03.5
04FD:  MOVF   3F,W
04FE:  BSF    03.5
04FF:  MOVWF  2A
0500:  BCF    03.5
0501:  MOVF   3E,W
0502:  BSF    03.5
0503:  MOVWF  29
0504:  BCF    03.5
0505:  MOVF   3D,W
0506:  BSF    03.5
0507:  MOVWF  28
0508:  BCF    03.5
0509:  MOVF   58,W
050A:  BSF    03.5
050B:  MOVWF  2F
050C:  BCF    03.5
050D:  MOVF   57,W
050E:  BSF    03.5
050F:  MOVWF  2E
0510:  BCF    03.5
0511:  MOVF   56,W
0512:  BSF    03.5
0513:  MOVWF  2D
0514:  BCF    03.5
0515:  MOVF   55,W
0516:  BSF    03.5
0517:  MOVWF  2C
0518:  BCF    03.5
0519:  GOTO   286
051A:  MOVF   7A,W
051B:  BSF    03.5
051C:  MOVWF  2B
051D:  MOVF   79,W
051E:  MOVWF  2A
051F:  MOVF   78,W
0520:  MOVWF  29
0521:  MOVF   77,W
0522:  MOVWF  28
0523:  MOVF   2B,W
0524:  MOVWF  2F
0525:  MOVF   2A,W
0526:  MOVWF  2E
0527:  MOVF   29,W
0528:  MOVWF  2D
0529:  MOVF   28,W
052A:  MOVWF  2C
052B:  BCF    03.5
052C:  MOVF   54,W
052D:  BSF    03.5
052E:  MOVWF  33
052F:  BCF    03.5
0530:  MOVF   53,W
0531:  BSF    03.5
0532:  MOVWF  32
0533:  BCF    03.5
0534:  MOVF   52,W
0535:  BSF    03.5
0536:  MOVWF  31
0537:  BCF    03.5
0538:  MOVF   51,W
0539:  BSF    03.5
053A:  MOVWF  30
053B:  BCF    03.5
053C:  GOTO   2B3
053D:  MOVF   7A,W
053E:  MOVWF  50
053F:  MOVF   79,W
0540:  MOVWF  4F
0541:  MOVF   78,W
0542:  MOVWF  4E
0543:  MOVF   77,W
0544:  MOVWF  4D
....................       //calcur=(cur*400)/590;  //580; 
....................  
....................       //##################################################### 
....................  
....................         ref2=totalref>>8; 
0545:  BSF    03.5
0546:  MOVF   25,W
0547:  BCF    03.5
0548:  MOVWF  61
0549:  BSF    03.5
054A:  MOVF   26,W
054B:  BCF    03.5
054C:  MOVWF  62
....................  
....................         if(ref2<=120) //110 
054D:  MOVF   62,F
054E:  BTFSS  03.2
054F:  GOTO   558
0550:  MOVF   61,W
0551:  SUBLW  78
0552:  BTFSS  03.0
0553:  GOTO   558
....................          { 
....................             ref=10.0; 
0554:  CLRF   5E
0555:  MOVLW  0A
0556:  MOVWF  5D
....................          } 
....................          else 
0557:  GOTO   5C8
....................          { 
....................              errorp=ref2; 
0558:  MOVF   62,W
0559:  MOVWF  64
055A:  MOVF   61,W
055B:  MOVWF  63
....................              errorp=errorp/4.616;   //4.616 
055C:  MOVF   64,W
055D:  BSF    03.5
055E:  MOVWF  29
055F:  BCF    03.5
0560:  MOVF   63,W
0561:  BSF    03.5
0562:  MOVWF  28
0563:  BCF    03.5
0564:  CALL   2F8
0565:  MOVF   7A,W
0566:  BSF    03.5
0567:  MOVWF  2B
0568:  MOVF   79,W
0569:  MOVWF  2A
056A:  MOVF   78,W
056B:  MOVWF  29
056C:  MOVF   77,W
056D:  MOVWF  28
056E:  MOVLW  46
056F:  MOVWF  2F
0570:  MOVLW  B6
0571:  MOVWF  2E
0572:  MOVLW  13
0573:  MOVWF  2D
0574:  MOVLW  81
0575:  MOVWF  2C
0576:  BCF    03.5
0577:  CALL   317
0578:  MOVF   7A,W
0579:  BSF    03.5
057A:  MOVWF  2B
057B:  MOVF   79,W
057C:  MOVWF  2A
057D:  MOVF   78,W
057E:  MOVWF  29
057F:  MOVF   77,W
0580:  MOVWF  28
0581:  BCF    03.5
0582:  CALL   3E3
0583:  MOVF   79,W
0584:  MOVWF  64
0585:  MOVF   78,W
0586:  MOVWF  63
....................              offset=constant-errorp; 
0587:  MOVF   63,W
0588:  SUBWF  65,W
0589:  MOVWF  67
058A:  MOVF   66,W
058B:  MOVWF  68
058C:  MOVF   64,W
058D:  BTFSS  03.0
058E:  INCFSZ 64,W
058F:  SUBWF  68,F
....................              ref=ref2-offset; 
0590:  MOVF   67,W
0591:  SUBWF  61,W
0592:  MOVWF  5D
0593:  MOVF   62,W
0594:  MOVWF  5E
0595:  MOVF   68,W
0596:  BTFSS  03.0
0597:  INCFSZ 68,W
0598:  SUBWF  5E,F
....................              ref=ref-refoffset; 
0599:  MOVF   59,W
059A:  SUBWF  5D,F
059B:  MOVF   5A,W
059C:  BTFSS  03.0
059D:  INCFSZ 5A,W
059E:  SUBWF  5E,F
....................              //ref=(ref*40)/57; 
....................              ref=ref/0.9;         //   //1.05 
059F:  MOVF   5E,W
05A0:  BSF    03.5
05A1:  MOVWF  29
05A2:  BCF    03.5
05A3:  MOVF   5D,W
05A4:  BSF    03.5
05A5:  MOVWF  28
05A6:  BCF    03.5
05A7:  CALL   2F8
05A8:  MOVF   7A,W
05A9:  BSF    03.5
05AA:  MOVWF  2B
05AB:  MOVF   79,W
05AC:  MOVWF  2A
05AD:  MOVF   78,W
05AE:  MOVWF  29
05AF:  MOVF   77,W
05B0:  MOVWF  28
05B1:  MOVLW  66
05B2:  MOVWF  2F
05B3:  MOVWF  2E
05B4:  MOVWF  2D
05B5:  MOVLW  7E
05B6:  MOVWF  2C
05B7:  BCF    03.5
05B8:  CALL   317
05B9:  MOVF   7A,W
05BA:  BSF    03.5
05BB:  MOVWF  2B
05BC:  MOVF   79,W
05BD:  MOVWF  2A
05BE:  MOVF   78,W
05BF:  MOVWF  29
05C0:  MOVF   77,W
05C1:  MOVWF  28
05C2:  BCF    03.5
05C3:  CALL   3E3
05C4:  MOVF   79,W
05C5:  MOVWF  5E
05C6:  MOVF   78,W
05C7:  MOVWF  5D
....................  
....................          } 
....................          if(ref<=10.0) 
05C8:  MOVF   5E,W
05C9:  BSF    03.5
05CA:  MOVWF  29
05CB:  BCF    03.5
05CC:  MOVF   5D,W
05CD:  BSF    03.5
05CE:  MOVWF  28
05CF:  BCF    03.5
05D0:  CALL   2F8
05D1:  MOVF   7A,W
05D2:  BSF    03.5
05D3:  MOVWF  2B
05D4:  MOVF   79,W
05D5:  MOVWF  2A
05D6:  MOVF   78,W
05D7:  MOVWF  29
05D8:  MOVF   77,W
05D9:  MOVWF  28
05DA:  CLRF   2F
05DB:  CLRF   2E
05DC:  MOVLW  20
05DD:  MOVWF  2D
05DE:  MOVLW  82
05DF:  MOVWF  2C
05E0:  BCF    03.5
05E1:  CALL   404
05E2:  BTFSC  03.0
05E3:  GOTO   5E6
05E4:  BTFSS  03.2
05E5:  GOTO   5E9
....................          { 
....................             ref=10.0; 
05E6:  CLRF   5E
05E7:  MOVLW  0A
05E8:  MOVWF  5D
....................          } 
....................  
....................         /* if(ref>=400) 
....................          { 
....................             ref=400; 
....................          }*/ 
....................  
....................      if(offsetokf==0) 
05E9:  MOVF   31,F
05EA:  BTFSS  03.2
05EB:  GOTO   616
....................       { 
....................          offcnt++; 
05EC:  MOVLW  01
05ED:  ADDWF  49,F
05EE:  BTFSC  03.0
05EF:  INCF   4A,F
05F0:  BTFSC  03.2
05F1:  INCF   4B,F
05F2:  BTFSC  03.2
05F3:  INCF   4C,F
....................          if(offcnt==3) 
05F4:  MOVF   49,W
05F5:  SUBLW  03
05F6:  BTFSS  03.2
05F7:  GOTO   610
05F8:  MOVF   4A,F
05F9:  BTFSS  03.2
05FA:  GOTO   610
05FB:  MOVF   4B,F
05FC:  BTFSS  03.2
05FD:  GOTO   610
05FE:  MOVF   4C,F
05FF:  BTFSS  03.2
0600:  GOTO   610
....................          { 
....................             offsetokf=1; 
0601:  MOVLW  01
0602:  MOVWF  31
....................             offcnt=0; 
0603:  CLRF   4C
0604:  CLRF   4B
0605:  CLRF   4A
0606:  CLRF   49
....................             curoffset=calcur; 
0607:  MOVF   50,W
0608:  MOVWF  48
0609:  MOVF   4F,W
060A:  MOVWF  47
060B:  MOVF   4E,W
060C:  MOVWF  46
060D:  MOVF   4D,W
060E:  MOVWF  45
....................  
....................          } 
....................          else 
060F:  GOTO   615
....................          { 
....................            current=1;//curoffset; 
0610:  CLRF   38
0611:  CLRF   37
0612:  CLRF   36
0613:  MOVLW  01
0614:  MOVWF  35
....................          } 
....................       } 
....................       else 
0615:  GOTO   672
....................       { 
....................          if(calcur >= curoffset) 
0616:  MOVF   48,W
0617:  SUBWF  50,W
0618:  BTFSS  03.0
0619:  GOTO   66C
061A:  BTFSS  03.2
061B:  GOTO   62C
061C:  MOVF   47,W
061D:  SUBWF  4F,W
061E:  BTFSS  03.0
061F:  GOTO   66C
0620:  BTFSS  03.2
0621:  GOTO   62C
0622:  MOVF   46,W
0623:  SUBWF  4E,W
0624:  BTFSS  03.0
0625:  GOTO   66C
0626:  BTFSS  03.2
0627:  GOTO   62C
0628:  MOVF   45,W
0629:  SUBWF  4D,W
062A:  BTFSS  03.0
062B:  GOTO   66C
....................          { 
....................             current=calcur-curoffset; 
062C:  MOVF   45,W
062D:  SUBWF  4D,W
062E:  MOVWF  35
062F:  MOVF   4E,W
0630:  MOVWF  36
0631:  MOVF   46,W
0632:  BTFSS  03.0
0633:  INCFSZ 46,W
0634:  SUBWF  36,F
0635:  MOVF   4F,W
0636:  MOVWF  37
0637:  MOVF   47,W
0638:  BTFSS  03.0
0639:  INCFSZ 47,W
063A:  SUBWF  37,F
063B:  MOVF   50,W
063C:  MOVWF  38
063D:  MOVF   48,W
063E:  BTFSS  03.0
063F:  INCFSZ 48,W
0640:  SUBWF  38,F
....................  
....................             if(current >= 10.0) 
0641:  MOVF   38,W
0642:  BSF    03.5
0643:  MOVWF  2B
0644:  BCF    03.5
0645:  MOVF   37,W
0646:  BSF    03.5
0647:  MOVWF  2A
0648:  BCF    03.5
0649:  MOVF   36,W
064A:  BSF    03.5
064B:  MOVWF  29
064C:  BCF    03.5
064D:  MOVF   35,W
064E:  BSF    03.5
064F:  MOVWF  28
0650:  BCF    03.5
0651:  GOTO   445
0652:  BSF    03.5
0653:  CLRF   2B
0654:  CLRF   2A
0655:  MOVLW  20
0656:  MOVWF  29
0657:  MOVLW  82
0658:  MOVWF  28
0659:  MOVF   7A,W
065A:  MOVWF  2F
065B:  MOVF   79,W
065C:  MOVWF  2E
065D:  MOVF   78,W
065E:  MOVWF  2D
065F:  MOVF   77,W
0660:  MOVWF  2C
0661:  BCF    03.5
0662:  CALL   404
0663:  BTFSC  03.0
0664:  GOTO   667
0665:  BTFSS  03.2
0666:  GOTO   66A
....................             { 
....................                weldon=1;                  //welding started... 
0667:  MOVLW  01
0668:  MOVWF  34
....................             } 
....................             else 
0669:  GOTO   66B
....................             { 
....................                weldon=0; 
066A:  CLRF   34
....................             } 
....................          } 
....................          else 
066B:  GOTO   672
....................          { 
....................             current=1; 
066C:  CLRF   38
066D:  CLRF   37
066E:  CLRF   36
066F:  MOVLW  01
0670:  MOVWF  35
....................             weldon=0; 
0671:  CLRF   34
....................          } 
....................       } 
....................  
....................       totalvtg=0; 
0672:  CLRF   74
0673:  CLRF   73
0674:  CLRF   72
0675:  CLRF   71
....................       totalcur=0; 
0676:  CLRF   70
0677:  CLRF   6F
0678:  CLRF   6E
0679:  CLRF   6D
....................       adccntr=0; 
067A:  BSF    03.5
067B:  CLRF   23
067C:  CLRF   22
067D:  CLRF   21
067E:  CLRF   20
....................       totalref=0; 
067F:  CLRF   27
0680:  CLRF   26
0681:  CLRF   25
0682:  CLRF   24
....................       //inttochar1(current); 
....................       //printf("%lx",current); 
....................       //putchar(0x0D); 
....................       //putchar(0x0A); 
....................     } 
....................   } 
0683:  BCF    03.5
0684:  BSF    0A.3
0685:  GOTO   0BD (RETURN)
....................  
.................... //========================= 
....................  unsigned char chk_band(unsigned int16 cur11,unsigned int16 prevcur11) 
....................  { 
....................      unsigned int16 diff=0; 
....................      unsigned char ans=0; 
....................      { 
....................         if(cur11 >= prevcur11) 
....................         { 
....................             diff= cur11 - prevcur11; 
....................         } 
....................         else 
....................         { 
....................             diff= prevcur11 - cur11; 
....................         } 
....................      } 
....................      if(diff >=2) 
....................      {ans='Y';} 
....................      else 
....................      {ans='N';} 
....................      return(ans); 
....................  } 
....................  
.................... //========================= 
....................  
.................... unsigned char readswitch() 
.................... { 
....................    unsigned char data=0,data1=0; 
*
015E:  BSF    03.5
015F:  CLRF   28
0160:  CLRF   29
....................    data=input_a(); 
0161:  MOVLW  FF
0162:  MOVWF  05
0163:  BCF    03.5
0164:  MOVF   05,W
0165:  BSF    03.5
0166:  MOVWF  28
....................    data=data & 0x38; 
0167:  MOVLW  38
0168:  ANDWF  28,F
....................    data=data>>3; 
0169:  RRF    28,F
016A:  RRF    28,F
016B:  RRF    28,F
016C:  MOVLW  1F
016D:  ANDWF  28,F
....................    delay_us(200); 
016E:  MOVLW  85
016F:  MOVWF  77
0170:  DECFSZ 77,F
0171:  GOTO   170
....................    data1=input_a(); 
0172:  MOVLW  FF
0173:  MOVWF  05
0174:  BCF    03.5
0175:  MOVF   05,W
0176:  BSF    03.5
0177:  MOVWF  29
....................    data1=data1 & 0x38; 
0178:  MOVLW  38
0179:  ANDWF  29,F
....................    data1=data1>>3; 
017A:  RRF    29,F
017B:  RRF    29,F
017C:  RRF    29,F
017D:  MOVLW  1F
017E:  ANDWF  29,F
....................    if(data==data1) 
017F:  MOVF   29,W
0180:  SUBWF  28,W
0181:  BTFSS  03.2
0182:  GOTO   1C7
....................    { 
....................       if(data==0x00) 
0183:  MOVF   28,F
0184:  BTFSS  03.2
0185:  GOTO   18B
....................       {range='A';} 
0186:  MOVLW  41
0187:  BCF    03.5
0188:  MOVWF  33
....................       else if(data==0x01) 
0189:  GOTO   1C6
018A:  BSF    03.5
018B:  DECFSZ 28,W
018C:  GOTO   192
....................       {range='B';} 
018D:  MOVLW  42
018E:  BCF    03.5
018F:  MOVWF  33
....................       else if(data==0x02) 
0190:  GOTO   1C6
0191:  BSF    03.5
0192:  MOVF   28,W
0193:  SUBLW  02
0194:  BTFSS  03.2
0195:  GOTO   19B
....................       {range='C';} 
0196:  MOVLW  43
0197:  BCF    03.5
0198:  MOVWF  33
....................       else if(data==0x03) 
0199:  GOTO   1C6
019A:  BSF    03.5
019B:  MOVF   28,W
019C:  SUBLW  03
019D:  BTFSS  03.2
019E:  GOTO   1A4
....................       {range='D';} 
019F:  MOVLW  44
01A0:  BCF    03.5
01A1:  MOVWF  33
....................       else if(data==0x04) 
01A2:  GOTO   1C6
01A3:  BSF    03.5
01A4:  MOVF   28,W
01A5:  SUBLW  04
01A6:  BTFSS  03.2
01A7:  GOTO   1AD
....................       {range='E';} 
01A8:  MOVLW  45
01A9:  BCF    03.5
01AA:  MOVWF  33
....................       else if(data==0x05) 
01AB:  GOTO   1C6
01AC:  BSF    03.5
01AD:  MOVF   28,W
01AE:  SUBLW  05
01AF:  BTFSS  03.2
01B0:  GOTO   1B6
....................       {range='F';} 
01B1:  MOVLW  46
01B2:  BCF    03.5
01B3:  MOVWF  33
....................       else if(data==0x06) 
01B4:  GOTO   1C6
01B5:  BSF    03.5
01B6:  MOVF   28,W
01B7:  SUBLW  06
01B8:  BTFSS  03.2
01B9:  GOTO   1BF
....................       {range='G';} 
01BA:  MOVLW  47
01BB:  BCF    03.5
01BC:  MOVWF  33
....................       else if(data==0x07) 
01BD:  GOTO   1C6
01BE:  BSF    03.5
01BF:  MOVF   28,W
01C0:  SUBLW  07
01C1:  BTFSS  03.2
01C2:  GOTO   1C7
....................       {range='H';} 
01C3:  MOVLW  48
01C4:  BCF    03.5
01C5:  MOVWF  33
01C6:  BSF    03.5
....................    } 
....................  return(range); 
01C7:  BCF    03.5
01C8:  MOVF   33,W
01C9:  MOVWF  78
.................... } 
01CA:  BSF    0A.3
01CB:  GOTO   0A5 (RETURN)
....................  
.................... /*void mmatigsw() 
.................... { 
....................   unsigned char A; 
....................    A=input(PIN_B5); 
....................    if(A==1) 
....................    { 
....................       mma=1; 
....................    }    
....................    else 
....................    { 
....................       mma=0; 
....................    } 
.................... }*/ 
....................  
.................... void debounce() 
.................... { 
....................     for(jj=0;jj<255;jj++); 
.................... } 
....................  
.................... /*void readmem(void) 
.................... { 
....................   lowbyte=read_eeprom(0x00);   //priyanka 
....................   vrefmaxcnt1=lowbyte; 
....................   hibyte=read_eeprom(0x01); 
....................   vrefmaxcnt=(hibyte*256)+vrefmaxcnt1; 
.................... }*/ 
.................... void dispmodel() 
.................... { 
....................    if(model=='A') 
01CC:  MOVF   32,W
01CD:  SUBLW  41
01CE:  BTFSS  03.2
01CF:  GOTO   1E3
....................    { 
....................       digit[0]='2'- 0x30;; 
01D0:  MOVLW  02
01D1:  MOVWF  2D
....................       digit[1]='5'- 0x30; 
01D2:  MOVLW  05
01D3:  MOVWF  2E
....................       digit[2]='0'- 0x30; 
01D4:  CLRF   2F
....................       digit[3]='C'- 0x30; 
01D5:  MOVLW  13
01D6:  MOVWF  30
....................       maxadc=625; 
01D7:  CLRF   54
01D8:  CLRF   53
01D9:  MOVLW  02
01DA:  MOVWF  52
01DB:  MOVLW  71
01DC:  MOVWF  51
....................       maxshunt=250; 
01DD:  CLRF   58
01DE:  CLRF   57
01DF:  CLRF   56
01E0:  MOVLW  FA
01E1:  MOVWF  55
....................    } 
....................    else if(model=='B') 
01E2:  GOTO   284
01E3:  MOVF   32,W
01E4:  SUBLW  42
01E5:  BTFSS  03.2
01E6:  GOTO   1FA
....................    { 
....................       digit[0]='3'- 0x30;; 
01E7:  MOVLW  03
01E8:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
01E9:  CLRF   2E
....................       digit[2]='0'- 0x30; 
01EA:  CLRF   2F
....................       digit[3]='C'- 0x30; 
01EB:  MOVLW  13
01EC:  MOVWF  30
....................       maxadc=625; 
01ED:  CLRF   54
01EE:  CLRF   53
01EF:  MOVLW  02
01F0:  MOVWF  52
01F1:  MOVLW  71
01F2:  MOVWF  51
....................       maxshunt=300; 
01F3:  CLRF   58
01F4:  CLRF   57
01F5:  MOVLW  01
01F6:  MOVWF  56
01F7:  MOVLW  2C
01F8:  MOVWF  55
....................    } 
....................    else if(model=='C') 
01F9:  GOTO   284
01FA:  MOVF   32,W
01FB:  SUBLW  43
01FC:  BTFSS  03.2
01FD:  GOTO   211
....................    { 
....................       digit[0]='4'- 0x30;; 
01FE:  MOVLW  04
01FF:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
0200:  CLRF   2E
....................       digit[2]='0'- 0x30; 
0201:  CLRF   2F
....................       digit[3]='C'- 0x30; 
0202:  MOVLW  13
0203:  MOVWF  30
....................       maxadc=625; 
0204:  CLRF   54
0205:  CLRF   53
0206:  MOVLW  02
0207:  MOVWF  52
0208:  MOVLW  71
0209:  MOVWF  51
....................       maxshunt=400; 
020A:  CLRF   58
020B:  CLRF   57
020C:  MOVLW  01
020D:  MOVWF  56
020E:  MOVLW  90
020F:  MOVWF  55
....................    } 
....................    else if(model=='D') 
0210:  GOTO   284
0211:  MOVF   32,W
0212:  SUBLW  44
0213:  BTFSS  03.2
0214:  GOTO   228
....................    { 
....................       digit[0]='5'- 0x30;; 
0215:  MOVLW  05
0216:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
0217:  CLRF   2E
....................       digit[2]='0'- 0x30; 
0218:  CLRF   2F
....................       digit[3]='C'- 0x30; 
0219:  MOVLW  13
021A:  MOVWF  30
....................       maxadc=625; 
021B:  CLRF   54
021C:  CLRF   53
021D:  MOVLW  02
021E:  MOVWF  52
021F:  MOVLW  71
0220:  MOVWF  51
....................       maxshunt=500; 
0221:  CLRF   58
0222:  CLRF   57
0223:  MOVLW  01
0224:  MOVWF  56
0225:  MOVLW  F4
0226:  MOVWF  55
....................    } 
....................    else if(model=='E') 
0227:  GOTO   284
0228:  MOVF   32,W
0229:  SUBLW  45
022A:  BTFSS  03.2
022B:  GOTO   23F
....................    { 
....................       digit[0]='6'- 0x30;; 
022C:  MOVLW  06
022D:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
022E:  CLRF   2E
....................       digit[2]='0'- 0x30; 
022F:  CLRF   2F
....................       digit[3]='C'- 0x30; 
0230:  MOVLW  13
0231:  MOVWF  30
....................       maxadc=625; 
0232:  CLRF   54
0233:  CLRF   53
0234:  MOVLW  02
0235:  MOVWF  52
0236:  MOVLW  71
0237:  MOVWF  51
....................       maxshunt=600; 
0238:  CLRF   58
0239:  CLRF   57
023A:  MOVLW  02
023B:  MOVWF  56
023C:  MOVLW  58
023D:  MOVWF  55
....................    } 
....................    else if(model=='F') 
023E:  GOTO   284
023F:  MOVF   32,W
0240:  SUBLW  46
0241:  BTFSS  03.2
0242:  GOTO   256
....................    { 
....................       digit[0]='8'- 0x30;; 
0243:  MOVLW  08
0244:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
0245:  CLRF   2E
....................       digit[2]='0'- 0x30; 
0246:  CLRF   2F
....................       digit[3]='C'- 0x30; 
0247:  MOVLW  13
0248:  MOVWF  30
....................       maxadc=625; 
0249:  CLRF   54
024A:  CLRF   53
024B:  MOVLW  02
024C:  MOVWF  52
024D:  MOVLW  71
024E:  MOVWF  51
....................       maxshunt=800; 
024F:  CLRF   58
0250:  CLRF   57
0251:  MOVLW  03
0252:  MOVWF  56
0253:  MOVLW  20
0254:  MOVWF  55
....................    } 
....................    else if(model=='G') 
0255:  GOTO   284
0256:  MOVF   32,W
0257:  SUBLW  47
0258:  BTFSS  03.2
0259:  GOTO   26D
....................    { 
....................       digit[0]='1'- 0x30;; 
025A:  MOVLW  01
025B:  MOVWF  2D
....................       digit[1]='0'- 0x30; 
025C:  CLRF   2E
....................       digit[2]='0'- 0x30; 
025D:  CLRF   2F
....................       digit[3]='C'- 0x30; 
025E:  MOVLW  13
025F:  MOVWF  30
....................       maxadc=625; 
0260:  CLRF   54
0261:  CLRF   53
0262:  MOVLW  02
0263:  MOVWF  52
0264:  MOVLW  71
0265:  MOVWF  51
....................       maxshunt=1000; 
0266:  CLRF   58
0267:  CLRF   57
0268:  MOVLW  03
0269:  MOVWF  56
026A:  MOVLW  E8
026B:  MOVWF  55
....................    } 
....................    else if(model=='H') 
026C:  GOTO   284
026D:  MOVF   32,W
026E:  SUBLW  48
026F:  BTFSS  03.2
0270:  GOTO   284
....................    { 
....................       digit[0]='1'- 0x30;; 
0271:  MOVLW  01
0272:  MOVWF  2D
....................       digit[1]='2'- 0x30; 
0273:  MOVLW  02
0274:  MOVWF  2E
....................       digit[2]='0'- 0x30; 
0275:  CLRF   2F
....................       digit[3]='C'- 0x30; 
0276:  MOVLW  13
0277:  MOVWF  30
....................       maxadc=625; 
0278:  CLRF   54
0279:  CLRF   53
027A:  MOVLW  02
027B:  MOVWF  52
027C:  MOVLW  71
027D:  MOVWF  51
....................       maxshunt=1200; 
027E:  CLRF   58
027F:  CLRF   57
0280:  MOVLW  04
0281:  MOVWF  56
0282:  MOVLW  B0
0283:  MOVWF  55
....................    } 
....................  } 
0284:  BSF    0A.3
0285:  GOTO   0AA (RETURN)
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2CD4   INTRC_IO NOWDT NOPWRT NOMCLR NOCP NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BOR4VBROWNOUT_SL NOWRT
