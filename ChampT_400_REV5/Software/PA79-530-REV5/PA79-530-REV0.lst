CCS PCM C Compiler, Version 4.005, 35007               28-Jun-23 14:10

               Filename: C:\Users\mk11\Desktop\PA79-530-REV0\PA79-530-REV0.lst

               ROM used: 2185 words (53%)
                         Largest free fragment is 1747
               RAM used: 119 (68%) at main() level
                         134 (76%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   035
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  7B
002E:  MOVF   28,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
0035:  BCF    0A.3
0036:  GOTO   068
.................... #include "curandref.h" 
.................... #include <16F883.h> 
.................... //////// Standard Header file for the PIC16F883 device //////////////// 
.................... #device PIC16F883 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... //#FUSES NIWRTC 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES INTRC 
.................... #use delay(clock=8000000) 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... //#include "D:\PRIYANKA\PROJECT\DPM\current&ref\DPM.h" 
.................... #include "controller.c" 
.................... //------------------------------------------------------------------------------ 
.................... #byte MCU_STATUS = 0x003 
.................... #bit    MCU_C = MCU_STATUS.0 
.................... #bit    MCU_DC = MCU_STATUS.1 
.................... #bit    MCU_Z = MCU_STATUS.2 
.................... #bit    MCU_PD = MCU_STATUS.3 
.................... #bit    MCU_TO = MCU_STATUS.4 
.................... #bit    MCU_RP0 = MCU_STATUS.5 
.................... #bit    MCU_RP1 = MCU_STATUS.6 
.................... #bit    MCU_IRP = MCU_STATUS.7 
.................... #byte MCU_PORTA = 0x005 
.................... #byte MCU_PORTB = 0x006 
.................... #byte MCU_PORTC = 0x007 
.................... #byte MCU_PORTD = 0x008 
.................... #byte MCU_PORTE = 0x009 
.................... #bit    MCU_RE0 = MCU_PORTE.0 
.................... #bit    MCU_RE1 = MCU_PORTE.1 
.................... #bit    MCU_RE2 = MCU_PORTE.2 
.................... #byte MCU_INTCON = 0x00B 
.................... #bit    MCU_RBIF = MCU_INTCON.0 
.................... #bit    MCU_INTF = MCU_INTCON.1 
.................... #bit    MCU_T0IF = MCU_INTCON.2 
.................... #bit    MCU_RBIE = MCU_INTCON.3 
.................... #bit    MCU_INTE = MCU_INTCON.4 
.................... #bit    MCU_T0IE = MCU_INTCON.5 
.................... #bit    MCU_PEIE = MCU_INTCON.6 
.................... #bit    MCU_GIE = MCU_INTCON.7 
.................... #byte MCU_PIR1 = 0x00C 
.................... #bit    MCU_TMR1IF = MCU_PIR1.0 
.................... #bit    MCU_TMR2IF = MCU_PIR1.1 
.................... #bit    MCU_CCP1IF = MCU_PIR1.2 
.................... #bit    MCU_SSPIF = MCU_PIR1.3 
.................... #bit    MCU_TXIF = MCU_PIR1.4 
.................... #bit    MCU_RCIF = MCU_PIR1.5 
.................... #bit    MCU_ADIF = MCU_PIR1.6 
.................... #bit    MCU_PSPIF = MCU_PIR1.7 
.................... #byte MCU_OPTION_REG = 0x181 
.................... #bit    MCU_PS0 = MCU_OPTION_REG.0 
.................... #bit    MCU_PS1 = MCU_OPTION_REG.1 
.................... #bit    MCU_PS2 = MCU_OPTION_REG.2 
.................... #bit    MCU_PSA = MCU_OPTION_REG.3 
.................... #bit    MCU_T0SE = MCU_OPTION_REG.4 
.................... #bit    MCU_T0CS = MCU_OPTION_REG.5 
.................... #bit    MCU_INTEDG = MCU_OPTION_REG.6 
.................... #bit    MCU_RBPU = MCU_OPTION_REG.7 
.................... #byte MCU_ANSEL = 0x188 
.................... #bit    MCU_ANSELANSO = MCU_ANSEL.0 
.................... #bit    MCU_ANSELANS1 = MCU_ANSEL.1 
.................... #bit    MCU_ANSELANS2 = MCU_ANSEL.2 
.................... #bit    MCU_ANSELANS3 = MCU_ANSEL.3 
.................... #bit    MCU_ANSELANS4 = MCU_ANSEL.4 
.................... #bit    MCU_ANSELANS5 = MCU_ANSEL.5 
.................... #bit    MCU_ANSELANS6 = MCU_ANSEL.6 
.................... #bit    MCU_ANSELANS7 = MCU_ANSEL.7 
.................... #byte MCU_ANSELH = 0x189 
.................... #bit    MCU_ANSELHANS8 = MCU_ANSELH.0 
.................... #bit    MCU_ANSELHANS9 = MCU_ANSELH.1 
.................... #bit    MCU_ANSELHANS10 = MCU_ANSELH.2 
.................... #bit    MCU_ANSELHANS11 = MCU_ANSELH.3 
.................... #byte MCU_ADCON0 = 0x01F 
.................... #bit    MCU_ADON = MCU_ADCON0.0 
.................... //#bit    MCU_GO/DONE = MCU_ADCON0.1 
.................... #bit    MCU_CHS0 = MCU_ADCON0.2 
.................... #bit    MCU_CHS1 = MCU_ADCON0.3 
.................... #bit    MCU_CHS2 = MCU_ADCON0.4 
.................... #bit    MCU_CHS3 = MCU_ADCON0.5 
.................... #byte MCU_OSCCON = 0x08F 
.................... #byte MCU_OSCTUNE= 0x090 
....................  
....................  
.................... #fuses HS,NOWDT,NOLVP,INTRC_IO,NOWDT,NOMCLR 
.................... #use delay(clock=8000000) 
*
0150:  MOVLW  B5
0151:  MOVWF  04
0152:  BCF    03.7
0153:  MOVF   00,W
0154:  BTFSC  03.2
0155:  GOTO   163
0156:  MOVLW  02
0157:  MOVWF  78
0158:  CLRF   77
0159:  DECFSZ 77,F
015A:  GOTO   159
015B:  DECFSZ 78,F
015C:  GOTO   158
015D:  MOVLW  97
015E:  MOVWF  77
015F:  DECFSZ 77,F
0160:  GOTO   15F
0161:  DECFSZ 00,F
0162:  GOTO   156
0163:  RETLW  00
....................  
....................  
.................... #include "variable.c" 
.................... #define disp1      PIN_B0 
.................... #define disp2      PIN_B1 
.................... #define disp3      PIN_B2 
.................... #define disp4      PIN_B3 
....................  
.................... #define segmenta   PIN_c0 
.................... #define segmentb   PIN_c1 
.................... #define segmentc   PIN_c2 
.................... #define segmentd   PIN_c3 
.................... #define segmente   PIN_c4 
.................... #define segmentf   PIN_c5 
.................... #define segmentg   PIN_c6 
.................... #define segmentdp  PIN_c7 
....................  
.................... #define sw1        PIN_A3 
.................... #define sw2        PIN_A4 
.................... #define sw3        PIN_A5 
.................... #define TIGSW      PIN_B5 
.................... //#define offset     PIN_B4 
....................  
.................... //--------------------------------------------------------------------- 
.................... unsigned char digitcnt=0,hexvalue=0,pinout=0,readadcf=0,readswitch1=0,jj=0,mma=0,hibyte=0,lowbyte=0; 
*
080C:  CLRF   29
080D:  CLRF   2A
080E:  CLRF   2B
080F:  CLRF   2C
0810:  CLRF   2D
0811:  CLRF   2E
0812:  CLRF   2F
0813:  CLRF   30
0814:  CLRF   31
.................... static unsigned char digit[4],offsetokf=0,model=0,range=0,weldon=0,band=0; 
0815:  CLRF   32
0816:  CLRF   33
0817:  CLRF   34
0818:  CLRF   35
0819:  CLRF   36
081A:  CLRF   37
081B:  CLRF   38
081C:  CLRF   39
081D:  CLRF   3A
.................... unsigned int32 current=0,value=0,voltage=0,cur=0,prevcur=0,curoffset=0,offcnt=0,prevoff=0,offset2=0; 
081E:  CLRF   3B
081F:  CLRF   3C
0820:  CLRF   3D
0821:  CLRF   3E
0822:  CLRF   3F
0823:  CLRF   40
0824:  CLRF   41
0825:  CLRF   42
0826:  CLRF   43
0827:  CLRF   44
0828:  CLRF   45
0829:  CLRF   46
082A:  CLRF   47
082B:  CLRF   48
082C:  CLRF   49
082D:  CLRF   4A
082E:  CLRF   4B
082F:  CLRF   4C
0830:  CLRF   4D
0831:  CLRF   4E
0832:  CLRF   4F
0833:  CLRF   50
0834:  CLRF   51
0835:  CLRF   52
0836:  CLRF   53
0837:  CLRF   54
0838:  CLRF   55
0839:  CLRF   56
083A:  CLRF   57
083B:  CLRF   58
083C:  CLRF   59
083D:  CLRF   5A
083E:  CLRF   5B
083F:  CLRF   5C
0840:  CLRF   5D
0841:  CLRF   5E
.................... unsigned int32 calcur=0,maxadc=675,maxshunt=400; 
0842:  CLRF   5F
0843:  CLRF   60
0844:  CLRF   61
0845:  CLRF   62
0846:  MOVLW  A3
0847:  MOVWF  63
0848:  MOVLW  02
0849:  MOVWF  64
084A:  CLRF   65
084B:  CLRF   66
084C:  MOVLW  90
084D:  MOVWF  67
084E:  MOVLW  01
084F:  MOVWF  68
0850:  CLRF   69
0851:  CLRF   6A
.................... unsigned int16 refoffset=9;//100;//7;//20;//123;//130;//123; //102; 
0852:  MOVLW  09
0853:  MOVWF  6B
0854:  CLRF   6C
.................... unsigned int16 prevref=0,ref=0,offset1=0,ref2=0,errorp=0,constant=120,offset=0; 
0855:  CLRF   6D
0856:  CLRF   6E
0857:  CLRF   6F
0858:  CLRF   70
0859:  CLRF   71
085A:  CLRF   72
085B:  CLRF   73
085C:  CLRF   74
085D:  CLRF   75
085E:  CLRF   76
085F:  MOVLW  78
0860:  MOVWF  7C
0861:  CLRF   7D
0862:  BSF    03.5
0863:  CLRF   20
0864:  CLRF   21
.................... //--------------------------------------------------------------------- 
.................... //------------------------------------------------------------------------------ 
.................... void initialise(void); 
.................... void display(void); 
.................... void short_del(void); 
.................... void inttochar1(unsigned int16); 
.................... void adc_init(void); 
.................... void inttochar(unsigned int16); 
.................... void readadc(void); 
.................... void dispmodel(void); 
.................... unsigned char readswitch(); 
.................... unsigned char chk_band(unsigned int16,unsigned int16); 
.................... void mmatigsw(); 
.................... void debounce(); 
.................... void readmem(); 
....................  
....................  
.................... //------------------------------------------------------------------------------ 
....................  
.................... #include "interrupt.c" 
....................  
.................... /*#int_timer0 
.................... void timer0_isr(void) 
.................... { 
....................     static unsigned int count3=0; 
....................     clear_interrupt(INT_TIMER0); 
....................     set_timer0(0xFC40);              //sets timer to interrupt in 6ms 
....................     count3++; 
....................      if(count3==10) 
....................         { 
....................             count3=0; 
....................             readswitch1=1; 
....................         } 
.................... }*/ 
....................  
.................... #int_timer1 
.................... void timer1_isr(void) 
.................... { 
....................     static unsigned char count=0,count1=0,count2=0; 
0865:  CLRF   7E
0866:  CLRF   22
0867:  CLRF   23
....................     clear_interrupt(INT_TIMER1); 
*
0068:  BCF    0C.0
....................     set_timer1(0xFC40);            //FC40 for 500usec at 8mhz 
0069:  MOVLW  FC
006A:  MOVWF  0F
006B:  MOVLW  40
006C:  MOVWF  0E
....................     count++; 
006D:  INCF   7E,F
....................     count1++; 
006E:  BSF    03.5
006F:  INCF   22,F
....................     count2++; 
0070:  INCF   23,F
....................  
....................     /*if(pinout==0) 
....................      { 
....................          pinout=1; 
....................          output_a(0X00); 
....................          //MCU_PORTA=0X00; 
....................      } 
....................      else if(pinout==1) 
....................      { 
....................          pinout=0; 
....................          output_a(0xff); 
....................          //MCU_PORTA=0XFF; 
....................      }*/ 
....................    if(count==10) 
0071:  MOVF   7E,W
0072:  SUBLW  0A
0073:  BTFSS  03.2
0074:  GOTO   108
....................    { 
....................          count=0; 
0075:  CLRF   7E
....................          //inttochar(voltage); 
....................          display(); 
....................    } 
....................    if(count1==2) 
*
0108:  MOVF   22,W
0109:  SUBLW  02
010A:  BTFSS  03.2
010B:  GOTO   111
....................    { 
....................       count1=0; 
010C:  CLRF   22
....................       readadcf=1; 
010D:  MOVLW  01
010E:  BCF    03.5
010F:  MOVWF  2C
0110:  BSF    03.5
....................    } 
....................   /* if(count2==10) 
....................    { 
....................       count2=0; 
....................       readswitch1=1; 
....................    }*/ 
....................  
.................... } 
....................  
....................  
.................... #include "display.c" 
....................  
....................  
....................  
....................  
....................  
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) 
....................  
....................  
0111:  BCF    03.5
0112:  BCF    0C.0
0113:  BCF    0A.3
0114:  GOTO   022
.................... void main() 
.................... { 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  BSF    03.5
0805:  BCF    1F.4
0806:  BCF    1F.5
0807:  MOVLW  00
0808:  MOVWF  1D
0809:  MOVLW  07
080A:  BCF    03.5
080B:  MOVWF  1F
....................    #asm 
....................          CLRF  MCU_ANSEL ;      //0-i/o,1-analog 
*
087A:  BSF    03.6
087B:  CLRF   08
....................          CLRF  MCU_ANSELH ; 
087C:  CLRF   09
....................          ; 
....................          BCF   MCU_RP1; 
087D:  BCF    03.6
....................          BCF   MCU_RP0; 
087E:  BCF    03.5
....................  
.................... ;         BCF   MCU_RP1; 
....................          BSF   MCU_RP0; 
087F:  BSF    03.5
....................          MOVLW  0xff 
0880:  MOVLW  FF
....................          MOVWF  0X90 
0881:  BCF    03.6
0882:  MOVWF  10
....................          MOVLW  0x73 
0883:  MOVLW  73
....................          MOVWF  0X8F 
0884:  MOVWF  0F
....................          BCF   MCU_RP1; 
0885:  BCF    03.6
....................          BCF   MCU_RP0; 
0886:  BCF    03.5
....................     #endasm 
....................       initialise(); 
0887:  BCF    0A.3
0888:  BCF    03.5
0889:  GOTO   115
088A:  BSF    0A.3
....................       adc_init(); 
088B:  BCF    0A.3
088C:  GOTO   141
088D:  BSF    0A.3
....................   // current=000; 
....................   // inttochar1(current); 
....................    //set_tris_a(0x38); 
....................    set_tris_a(0x38); 
088E:  MOVLW  38
088F:  BSF    03.5
0890:  MOVWF  05
....................    set_tris_b(0x10);//(0x00); 
0891:  MOVLW  10
0892:  MOVWF  06
....................    set_tris_c(0x00); 
*
0868:  MOVLW  FF
0869:  MOVWF  24
*
0893:  MOVLW  00
0894:  MOVWF  07
0895:  MOVWF  24
....................  
....................    //short_del(); 
....................    delay_ms(2); 
0896:  MOVLW  02
0897:  MOVWF  35
0898:  BCF    0A.3
0899:  BCF    03.5
089A:  CALL   150
089B:  BSF    0A.3
....................    //voltage=985; 
....................    //inttochar(voltage); 
....................    //inttochar1(voltage); 
....................  
....................    digit[0]='D'- 0x30;; 
089C:  MOVLW  14
089D:  MOVWF  32
....................    digit[1]='O'- 0x30; 
089E:  MOVLW  1F
089F:  MOVWF  33
....................    digit[2]='R'- 0x30; 
08A0:  MOVLW  22
08A1:  MOVWF  34
....................    digit[3]='A'- 0x30; 
08A2:  MOVLW  11
08A3:  MOVWF  35
....................    delay_ms(200); 
08A4:  MOVLW  C8
08A5:  BSF    03.5
08A6:  MOVWF  35
08A7:  BCF    0A.3
08A8:  BCF    03.5
08A9:  CALL   150
08AA:  BSF    0A.3
....................    delay_ms(200); 
08AB:  MOVLW  C8
08AC:  BSF    03.5
08AD:  MOVWF  35
08AE:  BCF    0A.3
08AF:  BCF    03.5
08B0:  CALL   150
08B1:  BSF    0A.3
....................  
....................    digit[0]='E'- 0x30; 
08B2:  MOVLW  15
08B3:  MOVWF  32
....................    digit[1]='V'- 0x30; 
08B4:  MOVLW  26
08B5:  MOVWF  33
....................    digit[2]='5'- 0x30; 
08B6:  MOVLW  05
08B7:  MOVWF  34
....................    digit[3]='R'- 0x30; 
08B8:  MOVLW  22
08B9:  MOVWF  35
....................    delay_ms(200); 
08BA:  MOVLW  C8
08BB:  BSF    03.5
08BC:  MOVWF  35
08BD:  BCF    0A.3
08BE:  BCF    03.5
08BF:  CALL   150
08C0:  BSF    0A.3
....................    delay_ms(200); 
08C1:  MOVLW  C8
08C2:  BSF    03.5
08C3:  MOVWF  35
08C4:  BCF    0A.3
08C5:  BCF    03.5
08C6:  CALL   150
08C7:  BSF    0A.3
....................    model= readswitch(); 
08C8:  BCF    0A.3
08C9:  GOTO   164
08CA:  BSF    0A.3
08CB:  MOVF   78,W
08CC:  MOVWF  37
....................    dispmodel(); 
08CD:  BCF    0A.3
08CE:  GOTO   1D2
08CF:  BSF    0A.3
....................    delay_ms(200); 
08D0:  MOVLW  C8
08D1:  BSF    03.5
08D2:  MOVWF  35
08D3:  BCF    0A.3
08D4:  BCF    03.5
08D5:  CALL   150
08D6:  BSF    0A.3
....................    delay_ms(200); 
08D7:  MOVLW  C8
08D8:  BSF    03.5
08D9:  MOVWF  35
08DA:  BCF    0A.3
08DB:  BCF    03.5
08DC:  CALL   150
08DD:  BSF    0A.3
....................  
....................    //mma=1; 
....................    while(1) 
....................    { 
....................  
....................            if(readadcf==1) 
08DE:  DECFSZ 2C,W
08DF:  GOTO   0E4
....................            { 
....................  
....................                readadc(); 
08E0:  BCF    0A.3
08E1:  GOTO   469
08E2:  BSF    0A.3
....................                readadcf=0; 
08E3:  CLRF   2C
....................            } 
....................  
....................            /*if(readswitch1==1) 
....................            { 
....................             mmatigsw(); 
....................             readswitch1=0; 
....................            }*/ 
....................        /*    if(prevcur!=current && offsetokf==1) 
....................            { 
....................               inttochar1(current); 
....................               prevcur=current; 
....................            }  */ 
....................            { 
....................               if(weldon==1) 
08E4:  DECFSZ 39,W
08E5:  GOTO   110
....................               { 
....................  
....................                 if(prevcur!=current)// && offsetokf==1) 
08E6:  MOVF   3B,W
08E7:  SUBWF  4B,W
08E8:  BTFSS  03.2
08E9:  GOTO   0F6
08EA:  MOVF   3C,W
08EB:  SUBWF  4C,W
08EC:  BTFSS  03.2
08ED:  GOTO   0F6
08EE:  MOVF   3D,W
08EF:  SUBWF  4D,W
08F0:  BTFSS  03.2
08F1:  GOTO   0F6
08F2:  MOVF   3E,W
08F3:  SUBWF  4E,W
08F4:  BTFSC  03.2
08F5:  GOTO   10F
....................                  { 
....................                     //band=chk_band(current,prevcur); 
....................                    // if(band=='Y') 
....................                     { 
....................                        inttochar1(current); 
08F6:  MOVF   3C,W
08F7:  BSF    03.5
08F8:  MOVWF  36
08F9:  BCF    03.5
08FA:  MOVF   3B,W
08FB:  BSF    03.5
08FC:  MOVWF  35
08FD:  MOVF   36,W
08FE:  MOVWF  38
08FF:  MOVF   35,W
0900:  MOVWF  37
0901:  BCF    0A.3
0902:  BCF    03.5
0903:  CALL   6C7
0904:  BSF    0A.3
....................                     } 
....................                     prevcur=current; 
0905:  MOVF   3E,W
0906:  MOVWF  4E
0907:  MOVF   3D,W
0908:  MOVWF  4D
0909:  MOVF   3C,W
090A:  MOVWF  4C
090B:  MOVF   3B,W
090C:  MOVWF  4B
....................                     prevref=0; 
090D:  CLRF   6E
090E:  CLRF   6D
....................                  } 
....................               } 
....................               else 
090F:  GOTO   12B
....................               { 
....................                  if(prevref!=ref) 
0910:  MOVF   6F,W
0911:  SUBWF  6D,W
0912:  BTFSS  03.2
0913:  GOTO   118
0914:  MOVF   70,W
0915:  SUBWF  6E,W
0916:  BTFSC  03.2
0917:  GOTO   12B
....................                  { 
....................                    // band=chk_band(ref,prevref); 
....................                    // if(band=='Y') 
....................                     { 
....................                        inttochar1(ref); 
0918:  MOVF   70,W
0919:  BSF    03.5
091A:  MOVWF  38
091B:  BCF    03.5
091C:  MOVF   6F,W
091D:  BSF    03.5
091E:  MOVWF  37
091F:  BCF    0A.3
0920:  BCF    03.5
0921:  CALL   6C7
0922:  BSF    0A.3
....................                     } 
....................                     prevref=ref; 
0923:  MOVF   70,W
0924:  MOVWF  6E
0925:  MOVF   6F,W
0926:  MOVWF  6D
....................                     prevcur=0; 
0927:  CLRF   4E
0928:  CLRF   4D
0929:  CLRF   4C
092A:  CLRF   4B
....................                  } 
....................               } 
....................             } 
....................    }//while 
092B:  GOTO   0DE
.................... }//main 
....................  
.................... void inttochar1(unsigned int16 parameter) 
.................... { 
092C:  SLEEP
....................    if(model=='G' || model=='H') 
*
06C7:  MOVF   37,W
06C8:  SUBLW  47
06C9:  BTFSC  03.2
06CA:  GOTO   6CF
06CB:  MOVF   37,W
06CC:  SUBLW  48
06CD:  BTFSS  03.2
06CE:  GOTO   722
....................    { 
....................       digit[2]=parameter % 10;//;//0;//'0'; 
06CF:  BSF    03.5
06D0:  MOVF   38,W
06D1:  MOVWF  3A
06D2:  MOVF   37,W
06D3:  MOVWF  39
06D4:  CLRF   3C
06D5:  MOVLW  0A
06D6:  MOVWF  3B
06D7:  BCF    03.5
06D8:  CALL   6A0
06D9:  MOVF   77,W
06DA:  MOVWF  34
....................       parameter /= 10; 
06DB:  BSF    03.5
06DC:  MOVF   38,W
06DD:  MOVWF  3A
06DE:  MOVF   37,W
06DF:  MOVWF  39
06E0:  CLRF   3C
06E1:  MOVLW  0A
06E2:  MOVWF  3B
06E3:  BCF    03.5
06E4:  CALL   6A0
06E5:  MOVF   79,W
06E6:  BSF    03.5
06E7:  MOVWF  38
06E8:  MOVF   78,W
06E9:  MOVWF  37
....................       digit[1] = parameter % 10; 
06EA:  MOVF   38,W
06EB:  MOVWF  3A
06EC:  MOVF   37,W
06ED:  MOVWF  39
06EE:  CLRF   3C
06EF:  MOVLW  0A
06F0:  MOVWF  3B
06F1:  BCF    03.5
06F2:  CALL   6A0
06F3:  MOVF   77,W
06F4:  MOVWF  33
....................       parameter /= 10; 
06F5:  BSF    03.5
06F6:  MOVF   38,W
06F7:  MOVWF  3A
06F8:  MOVF   37,W
06F9:  MOVWF  39
06FA:  CLRF   3C
06FB:  MOVLW  0A
06FC:  MOVWF  3B
06FD:  BCF    03.5
06FE:  CALL   6A0
06FF:  MOVF   79,W
0700:  BSF    03.5
0701:  MOVWF  38
0702:  MOVF   78,W
0703:  MOVWF  37
....................       digit[0] = parameter % 10; 
0704:  MOVF   38,W
0705:  MOVWF  3A
0706:  MOVF   37,W
0707:  MOVWF  39
0708:  CLRF   3C
0709:  MOVLW  0A
070A:  MOVWF  3B
070B:  BCF    03.5
070C:  CALL   6A0
070D:  MOVF   77,W
070E:  MOVWF  32
....................       parameter /= 10; 
070F:  BSF    03.5
0710:  MOVF   38,W
0711:  MOVWF  3A
0712:  MOVF   37,W
0713:  MOVWF  39
0714:  CLRF   3C
0715:  MOVLW  0A
0716:  MOVWF  3B
0717:  BCF    03.5
0718:  CALL   6A0
0719:  MOVF   79,W
071A:  BSF    03.5
071B:  MOVWF  38
071C:  MOVF   78,W
071D:  MOVWF  37
....................       digit[3] = parameter; 
071E:  MOVF   37,W
071F:  BCF    03.5
0720:  MOVWF  35
....................    } 
....................    else 
0721:  GOTO   75B
....................    { 
....................       digit[3]=0; 
0722:  CLRF   35
....................       digit[2] = parameter % 10; 
0723:  BSF    03.5
0724:  MOVF   38,W
0725:  MOVWF  3A
0726:  MOVF   37,W
0727:  MOVWF  39
0728:  CLRF   3C
0729:  MOVLW  0A
072A:  MOVWF  3B
072B:  BCF    03.5
072C:  CALL   6A0
072D:  MOVF   77,W
072E:  MOVWF  34
....................       parameter /= 10; 
072F:  BSF    03.5
0730:  MOVF   38,W
0731:  MOVWF  3A
0732:  MOVF   37,W
0733:  MOVWF  39
0734:  CLRF   3C
0735:  MOVLW  0A
0736:  MOVWF  3B
0737:  BCF    03.5
0738:  CALL   6A0
0739:  MOVF   79,W
073A:  BSF    03.5
073B:  MOVWF  38
073C:  MOVF   78,W
073D:  MOVWF  37
....................       digit[1] = parameter % 10; 
073E:  MOVF   38,W
073F:  MOVWF  3A
0740:  MOVF   37,W
0741:  MOVWF  39
0742:  CLRF   3C
0743:  MOVLW  0A
0744:  MOVWF  3B
0745:  BCF    03.5
0746:  CALL   6A0
0747:  MOVF   77,W
0748:  MOVWF  33
....................       parameter /= 10; 
0749:  BSF    03.5
074A:  MOVF   38,W
074B:  MOVWF  3A
074C:  MOVF   37,W
074D:  MOVWF  39
074E:  CLRF   3C
074F:  MOVLW  0A
0750:  MOVWF  3B
0751:  BCF    03.5
0752:  CALL   6A0
0753:  MOVF   79,W
0754:  BSF    03.5
0755:  MOVWF  38
0756:  MOVF   78,W
0757:  MOVWF  37
....................       digit[0] = parameter; 
0758:  MOVF   37,W
0759:  BCF    03.5
075A:  MOVWF  32
....................    } 
.................... } 
075B:  RETLW  00
.................... void inttochar(unsigned int16 parameter) 
.................... { 
....................    digit[0]='A'- 0x30;; 
....................    digit[1]='D' - 0x30; 
....................    digit[2]='O' - 0x30; 
....................    digit[3]='R' - 0x30; 
....................  
.................... } 
....................  
.................... void short_del() 
.................... { 
....................   unsigned int16 i=0,j=0; 
....................   for(i=0;i<100;i++) 
....................   { 
....................      for(j=0;j<30;j++); 
....................   } 
.................... } 
....................  
.................... void initialise() 
.................... { 
....................          setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
0115:  BSF    03.5
0116:  BCF    1F.4
0117:  BCF    1F.5
0118:  MOVLW  00
0119:  MOVWF  1D
....................          setup_comparator(NC_NC_NC_NC); 
011A:  MOVLW  07
011B:  BCF    03.5
011C:  MOVWF  1F
011D:  BSF    03.5
011E:  MOVF   05,W
011F:  MOVLW  06
0120:  MOVWF  77
0121:  DECFSZ 77,F
0122:  GOTO   121
0123:  NOP
0124:  BCF    03.5
0125:  MOVF   1F,W
0126:  BCF    0D.5
....................          setup_adc(ADC_CLOCK_INTERNAL  ); 
0127:  BSF    1F.6
0128:  BSF    1F.7
0129:  BSF    03.5
012A:  BSF    1F.7
012B:  BCF    03.5
012C:  BSF    1F.0
....................          enable_interrupts(GLOBAL); 
012D:  MOVLW  C0
012E:  IORWF  0B,F
....................          enable_interrupts(INT_TIMER1); 
012F:  BSF    03.5
0130:  BSF    0C.0
....................          setup_timer_0(T1_DISABLED); 
0131:  MOVF   01,W
0132:  ANDLW  C0
0133:  MOVWF  01
....................          setup_timer_1(T1_DISABLED); 
0134:  BCF    03.5
0135:  CLRF   10
....................          setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0136:  MOVLW  85
0137:  MOVWF  10
....................          disable_interrupts(INT_EXT); 
0138:  BCF    0B.4
....................          set_timer0(0x0f); 
0139:  MOVLW  0F
013A:  MOVWF  01
....................          set_timer1(0xFC40); 
013B:  MOVLW  FC
013C:  MOVWF  0F
013D:  MOVLW  40
013E:  MOVWF  0E
.................... } 
013F:  BSF    0A.3
0140:  GOTO   08A (RETURN)
.................... //============================================================================== 
.................... void adc_init() 
.................... { 
....................    setup_adc_ports(sAN0|sAN1|sAN2|VSS_VDD); 
0141:  BSF    03.5
0142:  BCF    1F.4
0143:  BCF    1F.5
0144:  MOVLW  00
0145:  IORLW  07
0146:  MOVWF  1D
....................      //setup_adc_ports(ALL_ANALOG); 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
0147:  BCF    03.5
0148:  BSF    1F.6
0149:  BSF    1F.7
014A:  BSF    03.5
014B:  BSF    1F.7
014C:  BCF    03.5
014D:  BSF    1F.0
....................    //set_adc_channel(0); 
.................... } 
014E:  BSF    0A.3
014F:  GOTO   08D (RETURN)
.................... //------------------------------------------------------------------------------ 
.................... const unsigned char lookup_table[45] = { 
....................                                     // {dp,g,f,e,d,c,b,a} 
....................                                      0x3F,   //0 
....................                                      0x06,   //1 
....................                                      0x5B,   //2 
....................                                      0x4F,   //3 
....................                                      0x66,   //4 
....................                                      0x6D,   //5 
....................                                      0x7D,   //6 
....................                                      0x07,   //7 
....................                                      0x7F,   //8 
....................                                      0x6F,   //9 
....................                                      0x00,   //3A Blank 
....................                                      0x00,   //3B Blank 
....................                                      0x00,   //3C Blank 
....................                                      0x00,   //3D Blank 
....................                                      0x00,   //3E Blank 
....................                                      0x00,   //3F Blank 
....................                                      0x00,   //40 Blank 
....................                                      0x77,   //A 
....................                                      0x7C,   //B 
....................                                      0x39,   //C 
....................                                      0x5E,   //D 
....................                                      0x79,   //E 
....................                                      0x71,   //F 
....................                                      0x3D,   //G 
....................                                      0x76,   //H 
....................                                      0x03,   //I 
....................                                      0x1E,   //J 
....................                                      0x70,   //K 
....................                                      0x38,   //L 
....................                                      0x55,   //M 
....................                                      0x54,   //N 
....................                                      0x5C,   //O 
....................                                      0x73,   //P 
....................                                      0x67,   //Q 
....................                                      0x50,   //R 
....................                                      0x6D,   //S 
....................                                      0x78,   //T 
....................                                      0x3E,   //U 
....................                                      0x1C    //V 
....................                                      0x6A,   //W 
....................                                      0x68,   //X 
....................                                      0x6E,   //Y 
....................                                      0x89,   //Z 
....................                                      }; 
.................... //------------------------------------------------------------------------------ 
....................  
.................... //------------------------------------------------------------------------------ 
.................... void display() 
.................... { 
....................    if(digitcnt==0) 
*
0076:  BCF    03.5
0077:  MOVF   29,F
0078:  BTFSS  03.2
0079:  GOTO   09B
....................    { 
....................      OUTPUT_BIT(disp4,0); 
007A:  BCF    06.3
007B:  BSF    03.5
007C:  BCF    06.3
....................      //digit[0]=5; 
....................      hexvalue=lookup_table[digit[2]]; 
007D:  BCF    03.5
007E:  MOVF   34,W
007F:  CALL   037
0080:  MOVWF  78
0081:  MOVWF  2A
....................      output_c(hexvalue); 
0082:  MOVLW  00
0083:  BSF    03.5
0084:  MOVWF  24
0085:  CLRF   07
0086:  BCF    03.5
0087:  MOVF   2A,W
0088:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,1); 
0089:  BSF    06.0
008A:  BSF    03.5
008B:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
008C:  BCF    03.5
008D:  BCF    06.1
008E:  BSF    03.5
008F:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0090:  BCF    03.5
0091:  BCF    06.2
0092:  BSF    03.5
0093:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0094:  BCF    03.5
0095:  BCF    06.3
0096:  BSF    03.5
0097:  BCF    06.3
....................      digitcnt++; 
0098:  BCF    03.5
0099:  INCF   29,F
....................    } 
....................    else if(digitcnt==1) 
009A:  GOTO   107
009B:  DECFSZ 29,W
009C:  GOTO   0BE
....................    { 
....................      OUTPUT_BIT(disp1,0); 
009D:  BCF    06.0
009E:  BSF    03.5
009F:  BCF    06.0
....................       //digit[1]=8; 
....................       hexvalue =lookup_table[digit[1]]; 
00A0:  BCF    03.5
00A1:  MOVF   33,W
00A2:  CALL   037
00A3:  MOVWF  78
00A4:  MOVWF  2A
....................      output_c(hexvalue); 
00A5:  MOVLW  00
00A6:  BSF    03.5
00A7:  MOVWF  24
00A8:  CLRF   07
00A9:  BCF    03.5
00AA:  MOVF   2A,W
00AB:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00AC:  BCF    06.0
00AD:  BSF    03.5
00AE:  BCF    06.0
....................      OUTPUT_BIT(disp2,1); 
00AF:  BCF    03.5
00B0:  BSF    06.1
00B1:  BSF    03.5
00B2:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00B3:  BCF    03.5
00B4:  BCF    06.2
00B5:  BSF    03.5
00B6:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00B7:  BCF    03.5
00B8:  BCF    06.3
00B9:  BSF    03.5
00BA:  BCF    06.3
....................      digitcnt++;// ++; 
00BB:  BCF    03.5
00BC:  INCF   29,F
....................    } 
....................    else if(digitcnt==2) 
00BD:  GOTO   107
00BE:  MOVF   29,W
00BF:  SUBLW  02
00C0:  BTFSS  03.2
00C1:  GOTO   0E3
....................    { 
....................      OUTPUT_BIT(disp2,0); 
00C2:  BCF    06.1
00C3:  BSF    03.5
00C4:  BCF    06.1
....................       //digit[2]=7; 
....................      hexvalue = lookup_table[digit[0]]; 
00C5:  BCF    03.5
00C6:  MOVF   32,W
00C7:  CALL   037
00C8:  MOVWF  78
00C9:  MOVWF  2A
....................      output_c(hexvalue); 
00CA:  MOVLW  00
00CB:  BSF    03.5
00CC:  MOVWF  24
00CD:  CLRF   07
00CE:  BCF    03.5
00CF:  MOVF   2A,W
00D0:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00D1:  BCF    06.0
00D2:  BSF    03.5
00D3:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00D4:  BCF    03.5
00D5:  BCF    06.1
00D6:  BSF    03.5
00D7:  BCF    06.1
....................      OUTPUT_BIT(disp3,1); 
00D8:  BCF    03.5
00D9:  BSF    06.2
00DA:  BSF    03.5
00DB:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00DC:  BCF    03.5
00DD:  BCF    06.3
00DE:  BSF    03.5
00DF:  BCF    06.3
....................      digitcnt++; 
00E0:  BCF    03.5
00E1:  INCF   29,F
....................    } 
....................    else if(digitcnt==3) 
00E2:  GOTO   107
00E3:  MOVF   29,W
00E4:  SUBLW  03
00E5:  BTFSS  03.2
00E6:  GOTO   107
....................    { 
....................      OUTPUT_BIT(disp3,0); 
00E7:  BCF    06.2
00E8:  BSF    03.5
00E9:  BCF    06.2
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[3]]; 
00EA:  BCF    03.5
00EB:  MOVF   35,W
00EC:  CALL   037
00ED:  MOVWF  78
00EE:  MOVWF  2A
....................      output_c(hexvalue); 
00EF:  MOVLW  00
00F0:  BSF    03.5
00F1:  MOVWF  24
00F2:  CLRF   07
00F3:  BCF    03.5
00F4:  MOVF   2A,W
00F5:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00F6:  BCF    06.0
00F7:  BSF    03.5
00F8:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00F9:  BCF    03.5
00FA:  BCF    06.1
00FB:  BSF    03.5
00FC:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00FD:  BCF    03.5
00FE:  BCF    06.2
00FF:  BSF    03.5
0100:  BCF    06.2
....................      OUTPUT_BIT(disp4,1); 
0101:  BCF    03.5
0102:  BSF    06.3
0103:  BSF    03.5
0104:  BCF    06.3
....................      digitcnt=0; 
0105:  BCF    03.5
0106:  CLRF   29
0107:  BSF    03.5
....................    } 
.................... } 
....................  
....................  
.................... void readadc() 
.................... { 
....................     static unsigned int32 totalcur=0,totalvtg=0,adccntr=0,totalref=0;// 
*
086A:  CLRF   25
086B:  CLRF   26
086C:  CLRF   27
086D:  CLRF   28
086E:  CLRF   29
086F:  CLRF   2A
0870:  CLRF   2B
0871:  CLRF   2C
0872:  CLRF   2D
0873:  CLRF   2E
0874:  CLRF   2F
0875:  CLRF   30
0876:  CLRF   31
0877:  CLRF   32
0878:  CLRF   33
0879:  CLRF   34
....................     /*set_adc_channel(0); 
....................     delay_us(10); 
....................     value=read_adc(); 
....................     totalvtg= totalvtg + value; 
....................     ;*/ 
....................     set_adc_channel(0); 
*
0469:  MOVLW  00
046A:  MOVWF  78
046B:  MOVF   1F,W
046C:  ANDLW  C3
046D:  IORWF  78,W
046E:  MOVWF  1F
....................     delay_us(5); 
046F:  MOVLW  03
0470:  MOVWF  77
0471:  DECFSZ 77,F
0472:  GOTO   471
....................     value=read_adc(); 
0473:  BSF    1F.1
0474:  BTFSC  1F.1
0475:  GOTO   474
0476:  BSF    03.5
0477:  MOVF   1E,W
0478:  BCF    03.5
0479:  MOVWF  3F
047A:  MOVF   1E,W
047B:  MOVWF  40
047C:  CLRF   41
047D:  CLRF   42
....................     totalcur= totalcur + value; 
047E:  MOVF   3F,W
047F:  BSF    03.5
0480:  ADDWF  25,F
0481:  BCF    03.5
0482:  MOVF   40,W
0483:  BTFSC  03.0
0484:  INCFSZ 40,W
0485:  GOTO   487
0486:  GOTO   48A
0487:  BSF    03.5
0488:  ADDWF  26,F
0489:  BCF    03.5
048A:  MOVF   41,W
048B:  BTFSC  03.0
048C:  INCFSZ 41,W
048D:  GOTO   48F
048E:  GOTO   492
048F:  BSF    03.5
0490:  ADDWF  27,F
0491:  BCF    03.5
0492:  MOVF   42,W
0493:  BTFSC  03.0
0494:  INCFSZ 42,W
0495:  GOTO   497
0496:  GOTO   49A
0497:  BSF    03.5
0498:  ADDWF  28,F
0499:  BCF    03.5
....................     ; 
....................     set_adc_channel(2); 
049A:  MOVLW  08
049B:  MOVWF  78
049C:  MOVF   1F,W
049D:  ANDLW  C3
049E:  IORWF  78,W
049F:  MOVWF  1F
....................     delay_us(10); 
04A0:  MOVLW  06
04A1:  MOVWF  77
04A2:  DECFSZ 77,F
04A3:  GOTO   4A2
04A4:  NOP
....................     value=read_adc(); 
04A5:  BSF    1F.1
04A6:  BTFSC  1F.1
04A7:  GOTO   4A6
04A8:  BSF    03.5
04A9:  MOVF   1E,W
04AA:  BCF    03.5
04AB:  MOVWF  3F
04AC:  MOVF   1E,W
04AD:  MOVWF  40
04AE:  CLRF   41
04AF:  CLRF   42
....................     totalref= totalref + value; 
04B0:  MOVF   3F,W
04B1:  BSF    03.5
04B2:  ADDWF  31,F
04B3:  BCF    03.5
04B4:  MOVF   40,W
04B5:  BTFSC  03.0
04B6:  INCFSZ 40,W
04B7:  GOTO   4B9
04B8:  GOTO   4BC
04B9:  BSF    03.5
04BA:  ADDWF  32,F
04BB:  BCF    03.5
04BC:  MOVF   41,W
04BD:  BTFSC  03.0
04BE:  INCFSZ 41,W
04BF:  GOTO   4C1
04C0:  GOTO   4C4
04C1:  BSF    03.5
04C2:  ADDWF  33,F
04C3:  BCF    03.5
04C4:  MOVF   42,W
04C5:  BTFSC  03.0
04C6:  INCFSZ 42,W
04C7:  GOTO   4C9
04C8:  GOTO   4CC
04C9:  BSF    03.5
04CA:  ADDWF  34,F
04CB:  BCF    03.5
....................     ; 
....................  
....................  
....................     { 
....................        setup_adc_ports(ALL_ANALOG); 
04CC:  BSF    03.5
04CD:  BCF    1F.4
04CE:  BCF    1F.5
04CF:  MOVLW  00
04D0:  IORLW  FF
04D1:  MOVWF  1D
....................        set_adc_channel(11); 
04D2:  MOVLW  2C
04D3:  MOVWF  78
04D4:  BCF    03.5
04D5:  MOVF   1F,W
04D6:  ANDLW  C3
04D7:  IORWF  78,W
04D8:  MOVWF  1F
....................        delay_us(10); 
04D9:  MOVLW  06
04DA:  MOVWF  77
04DB:  DECFSZ 77,F
04DC:  GOTO   4DB
04DD:  NOP
....................        value=read_adc(); 
04DE:  BSF    1F.1
04DF:  BTFSC  1F.1
04E0:  GOTO   4DF
04E1:  BSF    03.5
04E2:  MOVF   1E,W
04E3:  BCF    03.5
04E4:  MOVWF  3F
04E5:  MOVF   1E,W
04E6:  MOVWF  40
04E7:  CLRF   41
04E8:  CLRF   42
....................         offset1=value; 
04E9:  MOVF   40,W
04EA:  MOVWF  72
04EB:  MOVF   3F,W
04EC:  MOVWF  71
....................        setup_adc_ports(sAN0|sAN1|sAN2|VSS_VDD); 
04ED:  BSF    03.5
04EE:  BCF    1F.4
04EF:  BCF    1F.5
04F0:  MOVLW  00
04F1:  IORLW  07
04F2:  MOVWF  1D
....................  
....................     } 
....................     adccntr++; 
04F3:  MOVLW  01
04F4:  ADDWF  2D,F
04F5:  BTFSC  03.0
04F6:  INCF   2E,F
04F7:  BTFSC  03.2
04F8:  INCF   2F,F
04F9:  BTFSC  03.2
04FA:  INCF   30,F
....................  
....................     if(adccntr >=256)//128) 
04FB:  MOVF   30,F
04FC:  BTFSS  03.2
04FD:  GOTO   505
04FE:  MOVF   2F,F
04FF:  BTFSS  03.2
0500:  GOTO   505
0501:  MOVF   2E,W
0502:  SUBLW  00
0503:  BTFSC  03.0
0504:  GOTO   69D
....................     { 
....................       cur=totalcur>>8; 
0505:  MOVF   26,W
0506:  BCF    03.5
0507:  MOVWF  47
0508:  BSF    03.5
0509:  MOVF   27,W
050A:  BCF    03.5
050B:  MOVWF  48
050C:  BSF    03.5
050D:  MOVF   28,W
050E:  BCF    03.5
050F:  MOVWF  49
0510:  CLRF   4A
....................       //calcur=(cur*3)/5;//10)/19; 
....................       calcur=(cur*maxshunt)/maxadc; 
0511:  MOVF   4A,W
0512:  BSF    03.5
0513:  MOVWF  38
0514:  BCF    03.5
0515:  MOVF   49,W
0516:  BSF    03.5
0517:  MOVWF  37
0518:  BCF    03.5
0519:  MOVF   48,W
051A:  BSF    03.5
051B:  MOVWF  36
051C:  BCF    03.5
051D:  MOVF   47,W
051E:  BSF    03.5
051F:  MOVWF  35
0520:  BCF    03.5
0521:  MOVF   6A,W
0522:  BSF    03.5
0523:  MOVWF  3C
0524:  BCF    03.5
0525:  MOVF   69,W
0526:  BSF    03.5
0527:  MOVWF  3B
0528:  BCF    03.5
0529:  MOVF   68,W
052A:  BSF    03.5
052B:  MOVWF  3A
052C:  BCF    03.5
052D:  MOVF   67,W
052E:  BSF    03.5
052F:  MOVWF  39
0530:  BCF    03.5
0531:  GOTO   28C
0532:  MOVF   7A,W
0533:  BSF    03.5
0534:  MOVWF  38
0535:  MOVF   79,W
0536:  MOVWF  37
0537:  MOVF   78,W
0538:  MOVWF  36
0539:  MOVF   77,W
053A:  MOVWF  35
053B:  MOVF   38,W
053C:  MOVWF  3C
053D:  MOVF   37,W
053E:  MOVWF  3B
053F:  MOVF   36,W
0540:  MOVWF  3A
0541:  MOVF   35,W
0542:  MOVWF  39
0543:  BCF    03.5
0544:  MOVF   66,W
0545:  BSF    03.5
0546:  MOVWF  40
0547:  BCF    03.5
0548:  MOVF   65,W
0549:  BSF    03.5
054A:  MOVWF  3F
054B:  BCF    03.5
054C:  MOVF   64,W
054D:  BSF    03.5
054E:  MOVWF  3E
054F:  BCF    03.5
0550:  MOVF   63,W
0551:  BSF    03.5
0552:  MOVWF  3D
0553:  BCF    03.5
0554:  GOTO   2B9
0555:  MOVF   7A,W
0556:  MOVWF  62
0557:  MOVF   79,W
0558:  MOVWF  61
0559:  MOVF   78,W
055A:  MOVWF  60
055B:  MOVF   77,W
055C:  MOVWF  5F
....................       //calcur=(cur*400)/590;  //580; 
.................... //##################################################### 
....................       ref2=totalref>>8; 
055D:  BSF    03.5
055E:  MOVF   32,W
055F:  MOVWF  73
0560:  MOVF   33,W
0561:  MOVWF  74
....................       //inttochar1(ref2); 
....................       //***************************************************** 
....................         // ref=ref-refoffset; 
....................         // ref=(ref*40)/57; 
....................         // ref=ref/1.407; 
....................         /* if(mma==0) 
....................          { 
....................  
....................             //offset2=(ref2*128/1241); 
....................             //offset2=(ref2*100/1008); 
....................               band=chk_band(offset1,prevoff); 
....................                     if(band=='Y') 
....................                     { 
....................                        offset1=offset1; 
....................                     } 
....................                     prevoff=offset1; 
....................               // offset2=(ref2*offset1/1008); 
....................                offset2=(ref2*offset1/504); 
....................             ref2=ref2-offset2; 
....................          }*/ 
....................          if(ref2<=120) //110 
0562:  MOVF   74,F
0563:  BTFSS  03.2
0564:  GOTO   56F
0565:  MOVF   73,W
0566:  SUBLW  78
0567:  BTFSS  03.0
0568:  GOTO   56F
....................          { 
....................             ref=10.0; 
0569:  CLRF   70
056A:  MOVLW  0A
056B:  BCF    03.5
056C:  MOVWF  6F
....................          } 
....................          else 
056D:  GOTO   5E2
056E:  BSF    03.5
....................          { 
....................              errorp=ref2; 
056F:  MOVF   74,W
0570:  MOVWF  76
0571:  MOVF   73,W
0572:  MOVWF  75
....................              errorp=errorp/4.616;   //4.616 
0573:  MOVF   76,W
0574:  MOVWF  36
0575:  MOVF   75,W
0576:  MOVWF  35
0577:  BCF    03.5
0578:  CALL   2FE
0579:  MOVF   7A,W
057A:  BSF    03.5
057B:  MOVWF  38
057C:  MOVF   79,W
057D:  MOVWF  37
057E:  MOVF   78,W
057F:  MOVWF  36
0580:  MOVF   77,W
0581:  MOVWF  35
0582:  MOVLW  46
0583:  MOVWF  3C
0584:  MOVLW  B6
0585:  MOVWF  3B
0586:  MOVLW  13
0587:  MOVWF  3A
0588:  MOVLW  81
0589:  MOVWF  39
058A:  BCF    03.5
058B:  CALL   31D
058C:  MOVF   7A,W
058D:  BSF    03.5
058E:  MOVWF  38
058F:  MOVF   79,W
0590:  MOVWF  37
0591:  MOVF   78,W
0592:  MOVWF  36
0593:  MOVF   77,W
0594:  MOVWF  35
0595:  BCF    03.5
0596:  CALL   3E9
0597:  MOVF   79,W
0598:  MOVWF  76
0599:  MOVF   78,W
059A:  MOVWF  75
....................              offset=constant-errorp; 
059B:  MOVF   75,W
059C:  SUBWF  7C,W
059D:  BSF    03.5
059E:  MOVWF  20
059F:  MOVF   7D,W
05A0:  MOVWF  21
05A1:  MOVF   76,W
05A2:  BTFSS  03.0
05A3:  INCFSZ 76,W
05A4:  SUBWF  21,F
....................              ref=ref2-offset; 
05A5:  MOVF   20,W
05A6:  SUBWF  73,W
05A7:  BCF    03.5
05A8:  MOVWF  6F
05A9:  MOVF   74,W
05AA:  MOVWF  70
05AB:  BSF    03.5
05AC:  MOVF   21,W
05AD:  BTFSS  03.0
05AE:  INCFSZ 21,W
05AF:  SUBWF  70,F
....................              ref=ref-refoffset; 
05B0:  BCF    03.5
05B1:  MOVF   6B,W
05B2:  SUBWF  6F,F
05B3:  MOVF   6C,W
05B4:  BTFSS  03.0
05B5:  INCFSZ 6C,W
05B6:  SUBWF  70,F
....................              //ref=(ref*40)/57; 
....................              ref=ref/1.385;         //1.385 
05B7:  MOVF   70,W
05B8:  BSF    03.5
05B9:  MOVWF  36
05BA:  BCF    03.5
05BB:  MOVF   6F,W
05BC:  BSF    03.5
05BD:  MOVWF  35
05BE:  BCF    03.5
05BF:  CALL   2FE
05C0:  MOVF   7A,W
05C1:  BSF    03.5
05C2:  MOVWF  38
05C3:  MOVF   79,W
05C4:  MOVWF  37
05C5:  MOVF   78,W
05C6:  MOVWF  36
05C7:  MOVF   77,W
05C8:  MOVWF  35
05C9:  MOVLW  AE
05CA:  MOVWF  3C
05CB:  MOVLW  47
05CC:  MOVWF  3B
05CD:  MOVLW  31
05CE:  MOVWF  3A
05CF:  MOVLW  7F
05D0:  MOVWF  39
05D1:  BCF    03.5
05D2:  CALL   31D
05D3:  MOVF   7A,W
05D4:  BSF    03.5
05D5:  MOVWF  38
05D6:  MOVF   79,W
05D7:  MOVWF  37
05D8:  MOVF   78,W
05D9:  MOVWF  36
05DA:  MOVF   77,W
05DB:  MOVWF  35
05DC:  BCF    03.5
05DD:  CALL   3E9
05DE:  MOVF   79,W
05DF:  MOVWF  70
05E0:  MOVF   78,W
05E1:  MOVWF  6F
....................  
....................          } 
....................          if(ref<=10.0) 
05E2:  MOVF   70,W
05E3:  BSF    03.5
05E4:  MOVWF  36
05E5:  BCF    03.5
05E6:  MOVF   6F,W
05E7:  BSF    03.5
05E8:  MOVWF  35
05E9:  BCF    03.5
05EA:  CALL   2FE
05EB:  MOVF   7A,W
05EC:  BSF    03.5
05ED:  MOVWF  38
05EE:  MOVF   79,W
05EF:  MOVWF  37
05F0:  MOVF   78,W
05F1:  MOVWF  36
05F2:  MOVF   77,W
05F3:  MOVWF  35
05F4:  CLRF   3C
05F5:  CLRF   3B
05F6:  MOVLW  20
05F7:  MOVWF  3A
05F8:  MOVLW  82
05F9:  MOVWF  39
05FA:  BCF    03.5
05FB:  CALL   40A
05FC:  BTFSC  03.0
05FD:  GOTO   600
05FE:  BTFSS  03.2
05FF:  GOTO   603
....................          { 
....................             ref=10.0; 
0600:  CLRF   70
0601:  MOVLW  0A
0602:  MOVWF  6F
....................          } 
....................         /* if(ref>=400) 
....................          { 
....................             ref=400; 
....................          }*/ 
....................  
....................       //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
....................      if(offsetokf==0) 
0603:  MOVF   36,F
0604:  BTFSS  03.2
0605:  GOTO   630
....................       { 
....................          offcnt++; 
0606:  MOVLW  01
0607:  ADDWF  53,F
0608:  BTFSC  03.0
0609:  INCF   54,F
060A:  BTFSC  03.2
060B:  INCF   55,F
060C:  BTFSC  03.2
060D:  INCF   56,F
....................          if(offcnt==3) 
060E:  MOVF   53,W
060F:  SUBLW  03
0610:  BTFSS  03.2
0611:  GOTO   62A
0612:  MOVF   54,F
0613:  BTFSS  03.2
0614:  GOTO   62A
0615:  MOVF   55,F
0616:  BTFSS  03.2
0617:  GOTO   62A
0618:  MOVF   56,F
0619:  BTFSS  03.2
061A:  GOTO   62A
....................          { 
....................             offsetokf=1; 
061B:  MOVLW  01
061C:  MOVWF  36
....................             offcnt=0; 
061D:  CLRF   56
061E:  CLRF   55
061F:  CLRF   54
0620:  CLRF   53
....................             curoffset=calcur; 
0621:  MOVF   62,W
0622:  MOVWF  52
0623:  MOVF   61,W
0624:  MOVWF  51
0625:  MOVF   60,W
0626:  MOVWF  50
0627:  MOVF   5F,W
0628:  MOVWF  4F
....................  
....................          } 
....................          else 
0629:  GOTO   62F
....................          { 
....................            current=1;//curoffset; 
062A:  CLRF   3E
062B:  CLRF   3D
062C:  CLRF   3C
062D:  MOVLW  01
062E:  MOVWF  3B
....................          } 
....................       } 
....................       else 
062F:  GOTO   68C
....................       { 
....................          if(calcur >= curoffset) 
0630:  MOVF   52,W
0631:  SUBWF  62,W
0632:  BTFSS  03.0
0633:  GOTO   686
0634:  BTFSS  03.2
0635:  GOTO   646
0636:  MOVF   51,W
0637:  SUBWF  61,W
0638:  BTFSS  03.0
0639:  GOTO   686
063A:  BTFSS  03.2
063B:  GOTO   646
063C:  MOVF   50,W
063D:  SUBWF  60,W
063E:  BTFSS  03.0
063F:  GOTO   686
0640:  BTFSS  03.2
0641:  GOTO   646
0642:  MOVF   4F,W
0643:  SUBWF  5F,W
0644:  BTFSS  03.0
0645:  GOTO   686
....................          { 
....................             current=calcur-curoffset; 
0646:  MOVF   4F,W
0647:  SUBWF  5F,W
0648:  MOVWF  3B
0649:  MOVF   60,W
064A:  MOVWF  3C
064B:  MOVF   50,W
064C:  BTFSS  03.0
064D:  INCFSZ 50,W
064E:  SUBWF  3C,F
064F:  MOVF   61,W
0650:  MOVWF  3D
0651:  MOVF   51,W
0652:  BTFSS  03.0
0653:  INCFSZ 51,W
0654:  SUBWF  3D,F
0655:  MOVF   62,W
0656:  MOVWF  3E
0657:  MOVF   52,W
0658:  BTFSS  03.0
0659:  INCFSZ 52,W
065A:  SUBWF  3E,F
....................             if(current >= 10.0) 
065B:  MOVF   3E,W
065C:  BSF    03.5
065D:  MOVWF  38
065E:  BCF    03.5
065F:  MOVF   3D,W
0660:  BSF    03.5
0661:  MOVWF  37
0662:  BCF    03.5
0663:  MOVF   3C,W
0664:  BSF    03.5
0665:  MOVWF  36
0666:  BCF    03.5
0667:  MOVF   3B,W
0668:  BSF    03.5
0669:  MOVWF  35
066A:  BCF    03.5
066B:  GOTO   44B
066C:  BSF    03.5
066D:  CLRF   38
066E:  CLRF   37
066F:  MOVLW  20
0670:  MOVWF  36
0671:  MOVLW  82
0672:  MOVWF  35
0673:  MOVF   7A,W
0674:  MOVWF  3C
0675:  MOVF   79,W
0676:  MOVWF  3B
0677:  MOVF   78,W
0678:  MOVWF  3A
0679:  MOVF   77,W
067A:  MOVWF  39
067B:  BCF    03.5
067C:  CALL   40A
067D:  BTFSC  03.0
067E:  GOTO   681
067F:  BTFSS  03.2
0680:  GOTO   684
....................             { 
....................                weldon=1;                  //welding started... 
0681:  MOVLW  01
0682:  MOVWF  39
....................             } 
....................             else 
0683:  GOTO   685
....................             { 
....................                weldon=0; 
0684:  CLRF   39
....................             } 
....................          } 
....................          else 
0685:  GOTO   68C
....................          { 
....................             current=1; 
0686:  CLRF   3E
0687:  CLRF   3D
0688:  CLRF   3C
0689:  MOVLW  01
068A:  MOVWF  3B
....................             weldon=0; 
068B:  CLRF   39
....................          } 
....................       } 
....................  
....................  
....................       totalvtg=0; 
068C:  BSF    03.5
068D:  CLRF   2C
068E:  CLRF   2B
068F:  CLRF   2A
0690:  CLRF   29
....................       totalcur=0; 
0691:  CLRF   28
0692:  CLRF   27
0693:  CLRF   26
0694:  CLRF   25
....................       adccntr=0; 
0695:  CLRF   30
0696:  CLRF   2F
0697:  CLRF   2E
0698:  CLRF   2D
....................       totalref=0; 
0699:  CLRF   34
069A:  CLRF   33
069B:  CLRF   32
069C:  CLRF   31
....................       //inttochar1(current); 
....................       //printf("%lx",current); 
....................       //putchar(0x0D); 
....................       //putchar(0x0A); 
....................     } 
....................   } 
069D:  BCF    03.5
069E:  BSF    0A.3
069F:  GOTO   0E2 (RETURN)
....................  
.................... //========================= 
....................  unsigned char chk_band(unsigned int16 cur11,unsigned int16 prevcur11) 
....................  { 
....................      unsigned int16 diff=0; 
....................      unsigned char ans=0; 
....................      { 
....................         if(cur11 >= prevcur11) 
....................         { 
....................             diff= cur11 - prevcur11; 
....................         } 
....................         else 
....................         { 
....................             diff= prevcur11 - cur11; 
....................         } 
....................      } 
....................      if(diff >=2) 
....................      {ans='Y';} 
....................      else 
....................      {ans='N';} 
....................      return(ans); 
....................  } 
....................  
.................... //========================= 
....................  
.................... unsigned char readswitch() 
.................... { 
....................    unsigned char data=0,data1=0; 
*
0164:  BSF    03.5
0165:  CLRF   35
0166:  CLRF   36
....................    data=input_a(); 
0167:  MOVLW  FF
0168:  MOVWF  05
0169:  BCF    03.5
016A:  MOVF   05,W
016B:  BSF    03.5
016C:  MOVWF  35
....................    data=data & 0x38; 
016D:  MOVLW  38
016E:  ANDWF  35,F
....................    data=data>>3; 
016F:  RRF    35,F
0170:  RRF    35,F
0171:  RRF    35,F
0172:  MOVLW  1F
0173:  ANDWF  35,F
....................    delay_us(200); 
0174:  MOVLW  85
0175:  MOVWF  77
0176:  DECFSZ 77,F
0177:  GOTO   176
....................    data1=input_a(); 
0178:  MOVLW  FF
0179:  MOVWF  05
017A:  BCF    03.5
017B:  MOVF   05,W
017C:  BSF    03.5
017D:  MOVWF  36
....................    data1=data1 & 0x38; 
017E:  MOVLW  38
017F:  ANDWF  36,F
....................    data1=data1>>3; 
0180:  RRF    36,F
0181:  RRF    36,F
0182:  RRF    36,F
0183:  MOVLW  1F
0184:  ANDWF  36,F
....................    if(data==data1) 
0185:  MOVF   36,W
0186:  SUBWF  35,W
0187:  BTFSS  03.2
0188:  GOTO   1CD
....................    { 
....................       if(data==0x00) 
0189:  MOVF   35,F
018A:  BTFSS  03.2
018B:  GOTO   191
....................       {range='A';} 
018C:  MOVLW  41
018D:  BCF    03.5
018E:  MOVWF  38
....................       else if(data==0x01) 
018F:  GOTO   1CC
0190:  BSF    03.5
0191:  DECFSZ 35,W
0192:  GOTO   198
....................       {range='B';} 
0193:  MOVLW  42
0194:  BCF    03.5
0195:  MOVWF  38
....................       else if(data==0x02) 
0196:  GOTO   1CC
0197:  BSF    03.5
0198:  MOVF   35,W
0199:  SUBLW  02
019A:  BTFSS  03.2
019B:  GOTO   1A1
....................       {range='C';} 
019C:  MOVLW  43
019D:  BCF    03.5
019E:  MOVWF  38
....................       else if(data==0x03) 
019F:  GOTO   1CC
01A0:  BSF    03.5
01A1:  MOVF   35,W
01A2:  SUBLW  03
01A3:  BTFSS  03.2
01A4:  GOTO   1AA
....................       {range='D';} 
01A5:  MOVLW  44
01A6:  BCF    03.5
01A7:  MOVWF  38
....................       else if(data==0x04) 
01A8:  GOTO   1CC
01A9:  BSF    03.5
01AA:  MOVF   35,W
01AB:  SUBLW  04
01AC:  BTFSS  03.2
01AD:  GOTO   1B3
....................       {range='E';} 
01AE:  MOVLW  45
01AF:  BCF    03.5
01B0:  MOVWF  38
....................       else if(data==0x05) 
01B1:  GOTO   1CC
01B2:  BSF    03.5
01B3:  MOVF   35,W
01B4:  SUBLW  05
01B5:  BTFSS  03.2
01B6:  GOTO   1BC
....................       {range='F';} 
01B7:  MOVLW  46
01B8:  BCF    03.5
01B9:  MOVWF  38
....................       else if(data==0x06) 
01BA:  GOTO   1CC
01BB:  BSF    03.5
01BC:  MOVF   35,W
01BD:  SUBLW  06
01BE:  BTFSS  03.2
01BF:  GOTO   1C5
....................       {range='G';} 
01C0:  MOVLW  47
01C1:  BCF    03.5
01C2:  MOVWF  38
....................       else if(data==0x07) 
01C3:  GOTO   1CC
01C4:  BSF    03.5
01C5:  MOVF   35,W
01C6:  SUBLW  07
01C7:  BTFSS  03.2
01C8:  GOTO   1CD
....................       {range='H';} 
01C9:  MOVLW  48
01CA:  BCF    03.5
01CB:  MOVWF  38
01CC:  BSF    03.5
....................    } 
....................  return(range); 
01CD:  BCF    03.5
01CE:  MOVF   38,W
01CF:  MOVWF  78
.................... } 
01D0:  BSF    0A.3
01D1:  GOTO   0CA (RETURN)
....................  
.................... /*void mmatigsw() 
.................... { 
....................   unsigned char A; 
....................    A=input(PIN_B5); 
....................    if(A==1) 
....................    { 
....................       mma=1; 
....................    } 
....................    else 
....................    { 
....................       mma=0; 
....................    } 
.................... }*/ 
....................  
.................... void debounce() 
.................... { 
....................     for(jj=0;jj<255;jj++); 
.................... } 
....................  
.................... /*void readmem(void) 
.................... { 
....................   lowbyte=read_eeprom(0x00);   //priyanka 
....................   vrefmaxcnt1=lowbyte; 
....................   hibyte=read_eeprom(0x01); 
....................   vrefmaxcnt=(hibyte*256)+vrefmaxcnt1; 
.................... }*/ 
.................... void dispmodel() 
.................... { 
....................    if(model=='A') 
01D2:  MOVF   37,W
01D3:  SUBLW  41
01D4:  BTFSS  03.2
01D5:  GOTO   1E9
....................    { 
....................       digit[0]='2'- 0x30;; 
01D6:  MOVLW  02
01D7:  MOVWF  32
....................       digit[1]='5'- 0x30; 
01D8:  MOVLW  05
01D9:  MOVWF  33
....................       digit[2]='0'- 0x30; 
01DA:  CLRF   34
....................       digit[3]='C'- 0x30; 
01DB:  MOVLW  13
01DC:  MOVWF  35
....................       maxadc=625; 
01DD:  CLRF   66
01DE:  CLRF   65
01DF:  MOVLW  02
01E0:  MOVWF  64
01E1:  MOVLW  71
01E2:  MOVWF  63
....................       maxshunt=250; 
01E3:  CLRF   6A
01E4:  CLRF   69
01E5:  CLRF   68
01E6:  MOVLW  FA
01E7:  MOVWF  67
....................    } 
....................    else if(model=='B') 
01E8:  GOTO   28A
01E9:  MOVF   37,W
01EA:  SUBLW  42
01EB:  BTFSS  03.2
01EC:  GOTO   200
....................    { 
....................       digit[0]='3'- 0x30;; 
01ED:  MOVLW  03
01EE:  MOVWF  32
....................       digit[1]='0'- 0x30; 
01EF:  CLRF   33
....................       digit[2]='0'- 0x30; 
01F0:  CLRF   34
....................       digit[3]='C'- 0x30; 
01F1:  MOVLW  13
01F2:  MOVWF  35
....................       maxadc=625; 
01F3:  CLRF   66
01F4:  CLRF   65
01F5:  MOVLW  02
01F6:  MOVWF  64
01F7:  MOVLW  71
01F8:  MOVWF  63
....................       maxshunt=300; 
01F9:  CLRF   6A
01FA:  CLRF   69
01FB:  MOVLW  01
01FC:  MOVWF  68
01FD:  MOVLW  2C
01FE:  MOVWF  67
....................    } 
....................    else if(model=='C') 
01FF:  GOTO   28A
0200:  MOVF   37,W
0201:  SUBLW  43
0202:  BTFSS  03.2
0203:  GOTO   217
....................    { 
....................       digit[0]='4'- 0x30;; 
0204:  MOVLW  04
0205:  MOVWF  32
....................       digit[1]='0'- 0x30; 
0206:  CLRF   33
....................       digit[2]='0'- 0x30; 
0207:  CLRF   34
....................       digit[3]='C'- 0x30; 
0208:  MOVLW  13
0209:  MOVWF  35
....................       maxadc=625; 
020A:  CLRF   66
020B:  CLRF   65
020C:  MOVLW  02
020D:  MOVWF  64
020E:  MOVLW  71
020F:  MOVWF  63
....................       maxshunt=400; 
0210:  CLRF   6A
0211:  CLRF   69
0212:  MOVLW  01
0213:  MOVWF  68
0214:  MOVLW  90
0215:  MOVWF  67
....................    } 
....................    else if(model=='D') 
0216:  GOTO   28A
0217:  MOVF   37,W
0218:  SUBLW  44
0219:  BTFSS  03.2
021A:  GOTO   22E
....................    { 
....................       digit[0]='5'- 0x30;; 
021B:  MOVLW  05
021C:  MOVWF  32
....................       digit[1]='0'- 0x30; 
021D:  CLRF   33
....................       digit[2]='0'- 0x30; 
021E:  CLRF   34
....................       digit[3]='C'- 0x30; 
021F:  MOVLW  13
0220:  MOVWF  35
....................       maxadc=625; 
0221:  CLRF   66
0222:  CLRF   65
0223:  MOVLW  02
0224:  MOVWF  64
0225:  MOVLW  71
0226:  MOVWF  63
....................       maxshunt=500; 
0227:  CLRF   6A
0228:  CLRF   69
0229:  MOVLW  01
022A:  MOVWF  68
022B:  MOVLW  F4
022C:  MOVWF  67
....................    } 
....................    else if(model=='E') 
022D:  GOTO   28A
022E:  MOVF   37,W
022F:  SUBLW  45
0230:  BTFSS  03.2
0231:  GOTO   245
....................    { 
....................       digit[0]='6'- 0x30;; 
0232:  MOVLW  06
0233:  MOVWF  32
....................       digit[1]='0'- 0x30; 
0234:  CLRF   33
....................       digit[2]='0'- 0x30; 
0235:  CLRF   34
....................       digit[3]='C'- 0x30; 
0236:  MOVLW  13
0237:  MOVWF  35
....................       maxadc=625; 
0238:  CLRF   66
0239:  CLRF   65
023A:  MOVLW  02
023B:  MOVWF  64
023C:  MOVLW  71
023D:  MOVWF  63
....................       maxshunt=600; 
023E:  CLRF   6A
023F:  CLRF   69
0240:  MOVLW  02
0241:  MOVWF  68
0242:  MOVLW  58
0243:  MOVWF  67
....................    } 
....................    else if(model=='F') 
0244:  GOTO   28A
0245:  MOVF   37,W
0246:  SUBLW  46
0247:  BTFSS  03.2
0248:  GOTO   25C
....................    { 
....................       digit[0]='8'- 0x30;; 
0249:  MOVLW  08
024A:  MOVWF  32
....................       digit[1]='0'- 0x30; 
024B:  CLRF   33
....................       digit[2]='0'- 0x30; 
024C:  CLRF   34
....................       digit[3]='C'- 0x30; 
024D:  MOVLW  13
024E:  MOVWF  35
....................       maxadc=625; 
024F:  CLRF   66
0250:  CLRF   65
0251:  MOVLW  02
0252:  MOVWF  64
0253:  MOVLW  71
0254:  MOVWF  63
....................       maxshunt=800; 
0255:  CLRF   6A
0256:  CLRF   69
0257:  MOVLW  03
0258:  MOVWF  68
0259:  MOVLW  20
025A:  MOVWF  67
....................    } 
....................    else if(model=='G') 
025B:  GOTO   28A
025C:  MOVF   37,W
025D:  SUBLW  47
025E:  BTFSS  03.2
025F:  GOTO   273
....................    { 
....................       digit[0]='1'- 0x30;; 
0260:  MOVLW  01
0261:  MOVWF  32
....................       digit[1]='0'- 0x30; 
0262:  CLRF   33
....................       digit[2]='0'- 0x30; 
0263:  CLRF   34
....................       digit[3]='C'- 0x30; 
0264:  MOVLW  13
0265:  MOVWF  35
....................       maxadc=625; 
0266:  CLRF   66
0267:  CLRF   65
0268:  MOVLW  02
0269:  MOVWF  64
026A:  MOVLW  71
026B:  MOVWF  63
....................       maxshunt=1000; 
026C:  CLRF   6A
026D:  CLRF   69
026E:  MOVLW  03
026F:  MOVWF  68
0270:  MOVLW  E8
0271:  MOVWF  67
....................    } 
....................    else if(model=='H') 
0272:  GOTO   28A
0273:  MOVF   37,W
0274:  SUBLW  48
0275:  BTFSS  03.2
0276:  GOTO   28A
....................    { 
....................       digit[0]='1'- 0x30;; 
0277:  MOVLW  01
0278:  MOVWF  32
....................       digit[1]='2'- 0x30; 
0279:  MOVLW  02
027A:  MOVWF  33
....................       digit[2]='0'- 0x30; 
027B:  CLRF   34
....................       digit[3]='C'- 0x30; 
027C:  MOVLW  13
027D:  MOVWF  35
....................       maxadc=625; 
027E:  CLRF   66
027F:  CLRF   65
0280:  MOVLW  02
0281:  MOVWF  64
0282:  MOVLW  71
0283:  MOVWF  63
....................       maxshunt=1200; 
0284:  CLRF   6A
0285:  CLRF   69
0286:  MOVLW  04
0287:  MOVWF  68
0288:  MOVLW  B0
0289:  MOVWF  67
....................    } 
....................  } 
028A:  BSF    0A.3
028B:  GOTO   0CF (RETURN)
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2CD4   INTRC_IO NOWDT NOPWRT NOMCLR NOCP NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BOR4VBROWNOUT_SL NOWRT
