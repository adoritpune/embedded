CCS PCM C Compiler, Version 4.005, 35007               12-Jun-20 10:48

               Filename: D:\TDC\VERSA 800 FINAL CODE\REMOTE 9600\rev0.lst

               ROM used: 929 words (23%)
                         Largest free fragment is 2048
               RAM used: 41 (23%) at main() level
                         59 (34%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   33B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   03B
0022:  MOVLW  8C
0023:  MOVWF  04
0024:  BTFSS  00.1
0025:  GOTO   028
0026:  BTFSC  0C.1
0027:  GOTO   03D
0028:  MOVF   22,W
0029:  MOVWF  04
002A:  MOVF   23,W
002B:  MOVWF  77
002C:  MOVF   24,W
002D:  MOVWF  78
002E:  MOVF   25,W
002F:  MOVWF  79
0030:  MOVF   26,W
0031:  MOVWF  7A
0032:  MOVF   27,W
0033:  MOVWF  7B
0034:  MOVF   28,W
0035:  MOVWF  0A
0036:  SWAPF  21,W
0037:  MOVWF  03
0038:  SWAPF  7F,F
0039:  SWAPF  7F,W
003A:  RETFIE
003B:  BCF    0A.3
003C:  GOTO   03F
003D:  BCF    0A.3
003E:  GOTO   04F
.................... //***************************************************************************************************** 
.................... //SOFTWARE REV.NO:00   ** PCB N0:-PA9/513/A 
.................... //************************************MODIFICATION DETAILS********************************************* 
.................... //DATE:          //MODIFICATION NOTE NO.:          //DONE BY: 
....................  
....................  
....................  
....................  
.................... //***************************************************************************************************** 
.................... //#include "D:\TDC\MAHESH\MAESTRO_1200\POWERSOURCE\REMOTE\rev0.h" 
.................... //#include "D:\suresh\SAW POWER SOURCE NEW\Remote\Working\rev0.h" 
.................... #include <rev0.h> 
.................... #include <16F883.h> 
.................... //////// Standard Header file for the PIC16F883 device //////////////// 
.................... #device PIC16F883 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... //#FUSES NIWRTC 
.................... //#FUSES NOWRT                  //Program memory not write protected 
....................  
.................... #use delay(clock=8000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)//modified 9600 mahesh 22.05.2015 
....................  
....................  
.................... #use delay(clock=8000000) 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) //baud rate modified mahesh 22.05.2015 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) //baud rate modified saurabh 10.01.2020 
.................... //------------------------------------------------------------------------------ 
.................... #byte MCU_STATUS = 0x003 
.................... #bit    MCU_C = MCU_STATUS.0 
.................... #bit    MCU_DC = MCU_STATUS.1 
.................... #bit    MCU_Z = MCU_STATUS.2 
.................... #bit    MCU_PD = MCU_STATUS.3 
.................... #bit    MCU_TO = MCU_STATUS.4 
.................... #bit    MCU_RP0 = MCU_STATUS.5 
.................... #bit    MCU_RP1 = MCU_STATUS.6 
.................... #bit    MCU_IRP = MCU_STATUS.7 
.................... #byte MCU_PORTA = 0x005 
.................... #byte MCU_PORTB = 0x006 
.................... #byte MCU_PORTC = 0x007 
.................... #byte MCU_PORTD = 0x008 
.................... #byte MCU_PORTE = 0x009 
.................... #bit    MCU_RE0 = MCU_PORTE.0 
.................... #bit    MCU_RE1 = MCU_PORTE.1 
.................... #bit    MCU_RE2 = MCU_PORTE.2 
.................... #byte MCU_INTCON = 0x00B 
.................... #bit    MCU_RBIF = MCU_INTCON.0 
.................... #bit    MCU_INTF = MCU_INTCON.1 
.................... #bit    MCU_T0IF = MCU_INTCON.2 
.................... #bit    MCU_RBIE = MCU_INTCON.3 
.................... #bit    MCU_INTE = MCU_INTCON.4 
.................... #bit    MCU_T0IE = MCU_INTCON.5 
.................... #bit    MCU_PEIE = MCU_INTCON.6 
.................... #bit    MCU_GIE = MCU_INTCON.7 
.................... #byte MCU_PIR1 = 0x00C 
.................... #bit    MCU_TMR1IF = MCU_PIR1.0 
.................... #bit    MCU_TMR2IF = MCU_PIR1.1 
.................... #bit    MCU_CCP1IF = MCU_PIR1.2 
.................... #bit    MCU_SSPIF = MCU_PIR1.3 
.................... #bit    MCU_TXIF = MCU_PIR1.4 
.................... #bit    MCU_RCIF = MCU_PIR1.5 
.................... #bit    MCU_ADIF = MCU_PIR1.6 
.................... #bit    MCU_PSPIF = MCU_PIR1.7 
.................... #byte MCU_OPTION_REG = 0x181 
.................... #bit    MCU_PS0 = MCU_OPTION_REG.0 
.................... #bit    MCU_PS1 = MCU_OPTION_REG.1 
.................... #bit    MCU_PS2 = MCU_OPTION_REG.2 
.................... #bit    MCU_PSA = MCU_OPTION_REG.3 
.................... #bit    MCU_T0SE = MCU_OPTION_REG.4 
.................... #bit    MCU_T0CS = MCU_OPTION_REG.5 
.................... #bit    MCU_INTEDG = MCU_OPTION_REG.6 
.................... #bit    MCU_RBPU = MCU_OPTION_REG.7 
.................... #byte MCU_ANSEL = 0x188 
.................... #bit    MCU_ANSELANSO = MCU_ANSEL.0 
.................... #bit    MCU_ANSELANS1 = MCU_ANSEL.1 
.................... #bit    MCU_ANSELANS2 = MCU_ANSEL.2 
.................... #bit    MCU_ANSELANS3 = MCU_ANSEL.3 
.................... #bit    MCU_ANSELANS4 = MCU_ANSEL.4 
.................... #bit    MCU_ANSELANS5 = MCU_ANSEL.5 
.................... #bit    MCU_ANSELANS6 = MCU_ANSEL.6 
.................... #bit    MCU_ANSELANS7 = MCU_ANSEL.7 
.................... #byte MCU_ANSELH = 0x189 
.................... #bit    MCU_ANSELHANS8 = MCU_ANSELH.0 
.................... #bit    MCU_ANSELHANS9 = MCU_ANSELH.1 
.................... #bit    MCU_ANSELHANS10 = MCU_ANSELH.2 
.................... #bit    MCU_ANSELHANS11 = MCU_ANSELH.3 
.................... #byte MCU_OSCCON = 0x08F 
.................... #byte MCU_OSCTUNE= 0x090 
....................  
.................... #fuses HS,NOWDT,NOLVP,INTRC_IO,NOWDT,NOMCLR 
.................... //------------------------------------------------------------------------------ 
.................... void transmit(unsigned int16); 
.................... void readadc(void); 
.................... unsigned char aaa=0; 
*
035D:  CLRF   29
.................... unsigned int16 value=0,current_count=0,prevcurrent_count=0,error1=0,setcurrent=0,psetcurrent=0; 
035E:  CLRF   2A
035F:  CLRF   2B
0360:  CLRF   2C
0361:  CLRF   2D
0362:  CLRF   2E
0363:  CLRF   2F
0364:  CLRF   30
0365:  CLRF   31
0366:  CLRF   32
0367:  CLRF   33
0368:  CLRF   34
0369:  CLRF   35
.................... unsigned char transchksum=0,adccnt=0,readadcf=0,bk,bk1; 
036A:  CLRF   36
036B:  CLRF   37
036C:  CLRF   38
.................... //------------------------------------------------------------------------------ 
.................... #int_timer1 
.................... void timer1_isr(void) 
.................... { 
....................     clear_interrupt(INT_TIMER1); 
*
003F:  BCF    0C.0
....................     set_timer1(0xFC40); 
0040:  MOVLW  FC
0041:  MOVWF  0F
0042:  MOVLW  40
0043:  MOVWF  0E
....................     adccnt++; 
0044:  INCF   37,F
....................     if(adccnt>=1) 
0045:  MOVF   37,W
0046:  SUBLW  00
0047:  BTFSC  03.0
0048:  GOTO   04C
....................     { 
....................       adccnt=0; 
0049:  CLRF   37
....................       readadcf=1; 
004A:  MOVLW  01
004B:  MOVWF  38
....................     } 
.................... } 
....................  
004C:  BCF    0C.0
004D:  BCF    0A.3
004E:  GOTO   028
.................... #int_timer2 
.................... void timer2_isr(void) 
.................... { 
....................   MCU_TMR2IF=0; 
004F:  BCF    0C.1
.................... } 
....................  
.................... //------------------------------------------------------------------------------ 
0050:  BCF    0C.1
0051:  BCF    0A.3
0052:  GOTO   028
.................... void initialize(void) 
.................... { 
....................     #asm 
....................          CLRF  MCU_ANSEL ;      //0-i/o,1-analog 
0053:  BSF    03.5
0054:  BSF    03.6
0055:  CLRF   08
....................          CLRF  MCU_ANSELH ; 
0056:  CLRF   09
....................          ; 
....................          BCF   MCU_RP1; 
0057:  BCF    03.6
....................          BCF   MCU_RP0; 
0058:  BCF    03.5
....................          ; 
....................          BCF   MCU_RP1; 
0059:  BCF    03.6
....................          BSF   MCU_RP0; 
005A:  BSF    03.5
....................          MOVLW  0xff 
005B:  MOVLW  FF
....................          MOVWF  0X90 
005C:  BCF    03.6
005D:  MOVWF  10
....................          MOVLW  0x73 
005E:  MOVLW  73
....................          MOVWF  0X8F 
005F:  MOVWF  0F
....................          BCF   MCU_RP1; 
0060:  BCF    03.6
....................          BCF   MCU_RP0; 
0061:  BCF    03.5
....................     #endasm 
....................          setup_adc_ports(NO_ANALOGS|VSS_VDD); 
0062:  BCF    1F.4
0063:  BCF    1F.5
0064:  MOVLW  00
0065:  MOVWF  1D
....................          setup_comparator(NC_NC_NC_NC); 
0066:  MOVLW  07
0067:  BCF    03.5
0068:  MOVWF  1F
0069:  BSF    03.5
006A:  MOVF   05,W
006B:  MOVLW  06
006C:  MOVWF  77
006D:  DECFSZ 77,F
006E:  GOTO   06D
006F:  NOP
0070:  BCF    03.5
0071:  MOVF   1F,W
0072:  BCF    0D.5
....................          setup_adc(ADC_CLOCK_INTERNAL  ); 
0073:  BSF    1F.6
0074:  BSF    1F.7
0075:  BSF    03.5
0076:  BSF    1F.7
0077:  BCF    03.5
0078:  BSF    1F.0
....................          enable_interrupts(global); 
0079:  MOVLW  C0
007A:  IORWF  0B,F
....................          setup_timer_1(T1_DISABLED); 
007B:  CLRF   10
....................          setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
007C:  MOVLW  85
007D:  MOVWF  10
....................          set_timer1(0xFC00); 
007E:  MOVLW  FC
007F:  MOVWF  0F
0080:  CLRF   0E
....................          disable_interrupts(INT_RDA); 
0081:  BSF    03.5
0082:  BCF    0C.5
....................          enable_interrupts(INT_TIMER1); 
0083:  BSF    0C.0
....................          disable_interrupts(INT_RDA); 
0084:  BCF    0C.5
.................... } 
0085:  BCF    03.5
0086:  BCF    0A.3
0087:  GOTO   386 (RETURN)
.................... //------------------------------------------------------------------------------ 
.................... void main() 
.................... { 
*
033B:  CLRF   04
033C:  BCF    03.7
033D:  MOVLW  1F
033E:  ANDWF  03,F
033F:  BSF    03.5
0340:  BSF    03.6
0341:  BCF    07.3
0342:  MOVLW  0C
0343:  BCF    03.6
0344:  MOVWF  19
0345:  MOVLW  A2
0346:  MOVWF  18
0347:  MOVLW  90
0348:  BCF    03.5
0349:  MOVWF  18
034A:  BSF    03.5
034B:  BSF    03.6
034C:  BCF    07.3
034D:  MOVLW  0C
034E:  BCF    03.6
034F:  MOVWF  19
0350:  MOVLW  A2
0351:  MOVWF  18
0352:  MOVLW  90
0353:  BCF    03.5
0354:  MOVWF  18
0355:  BSF    03.5
0356:  BCF    1F.4
0357:  BCF    1F.5
0358:  MOVLW  00
0359:  MOVWF  1D
035A:  MOVLW  07
035B:  BCF    03.5
035C:  MOVWF  1F
....................     enable_interrupts(global); 
*
0375:  MOVLW  C0
0376:  IORWF  0B,F
....................     for(bk=0;bk<25;bk++) 
0377:  CLRF   39
0378:  MOVF   39,W
0379:  SUBLW  18
037A:  BTFSS  03.0
037B:  GOTO   385
....................     for(bk1=0;bk1<250;bk1++); 
037C:  CLRF   3A
037D:  MOVF   3A,W
037E:  SUBLW  F9
037F:  BTFSS  03.0
0380:  GOTO   383
0381:  INCF   3A,F
0382:  GOTO   37D
0383:  INCF   39,F
0384:  GOTO   378
....................     initialize(); 
0385:  GOTO   053
....................     disable_interrupts(INT_RDA); 
0386:  BSF    03.5
0387:  BCF    0C.5
....................     for(bk=0;bk<50;bk++); 
0388:  BCF    03.5
0389:  CLRF   39
038A:  MOVF   39,W
038B:  SUBLW  31
038C:  BTFSS  03.0
038D:  GOTO   390
038E:  INCF   39,F
038F:  GOTO   38A
....................     //for(bk1=0;bk1<250;bk1++); 
....................     for(bk=0;bk<50;bk++); 
0390:  CLRF   39
0391:  MOVF   39,W
0392:  SUBLW  31
0393:  BTFSS  03.0
0394:  GOTO   397
0395:  INCF   39,F
0396:  GOTO   391
....................     set_tris_a(0x03); 
0397:  MOVLW  03
0398:  BSF    03.5
0399:  MOVWF  05
....................  
....................     while(1) 
....................     { 
....................        if(readadcf==1) 
039A:  BCF    03.5
039B:  DECFSZ 38,W
039C:  GOTO   39F
....................          { 
....................            readadcf=0; 
039D:  CLRF   38
....................            readadc(); 
039E:  GOTO   22A
....................          } 
....................     }//WHILE 
039F:  GOTO   39B
.................... }//VOID 
.................... //------------------------------------------------------------------------------ 
.................... // read analog reference ======================================================= 
.................... void readadc() 
.................... { 
03A0:  SLEEP
....................     static unsigned int32 current=0,adccntr=0;// 
*
036D:  CLRF   3B
036E:  CLRF   3C
036F:  CLRF   3D
0370:  CLRF   3E
0371:  CLRF   3F
0372:  CLRF   40
0373:  CLRF   41
0374:  CLRF   42
....................     set_adc_channel(0); 
*
022A:  MOVLW  00
022B:  MOVWF  78
022C:  MOVF   1F,W
022D:  ANDLW  C3
022E:  IORWF  78,W
022F:  MOVWF  1F
....................     for(aaa=0;aaa<=100;aaa++);                           //delay_us(20); 
0230:  CLRF   29
0231:  MOVF   29,W
0232:  SUBLW  64
0233:  BTFSS  03.0
0234:  GOTO   237
0235:  INCF   29,F
0236:  GOTO   231
....................     value=read_adc();                                    // maincurrent read CN4. JP1 2-3 
0237:  BSF    1F.1
0238:  BTFSC  1F.1
0239:  GOTO   238
023A:  BSF    03.5
023B:  MOVF   1E,W
023C:  BCF    03.5
023D:  MOVWF  2A
023E:  MOVF   1E,W
023F:  MOVWF  2B
....................     current= current + value; 
0240:  MOVF   2A,W
0241:  ADDWF  3B,F
0242:  MOVF   2B,W
0243:  BTFSC  03.0
0244:  INCFSZ 2B,W
0245:  ADDWF  3C,F
0246:  MOVLW  00
0247:  BTFSC  03.0
0248:  MOVLW  01
0249:  ADDWF  3D,F
024A:  MOVLW  00
024B:  BTFSC  03.0
024C:  MOVLW  01
024D:  ADDWF  3E,F
....................     value=0; 
024E:  CLRF   2B
024F:  CLRF   2A
....................     ; 
....................  
....................     adccntr++; 
0250:  MOVLW  01
0251:  ADDWF  3F,F
0252:  BTFSC  03.0
0253:  INCF   40,F
0254:  BTFSC  03.2
0255:  INCF   41,F
0256:  BTFSC  03.2
0257:  INCF   42,F
....................     if(adccntr >=128) 
0258:  MOVF   42,F
0259:  BTFSS  03.2
025A:  GOTO   265
025B:  MOVF   41,F
025C:  BTFSS  03.2
025D:  GOTO   265
025E:  MOVF   40,F
025F:  BTFSS  03.2
0260:  GOTO   265
0261:  MOVF   3F,W
0262:  SUBLW  7F
0263:  BTFSC  03.0
0264:  GOTO   339
....................     { 
....................       current_count=current>>7; 
0265:  RRF    3E,W
0266:  MOVWF  7A
0267:  RRF    3D,W
0268:  MOVWF  79
0269:  RRF    3C,W
026A:  MOVWF  78
026B:  RRF    3B,W
026C:  MOVWF  77
026D:  RRF    7A,F
026E:  RRF    79,F
026F:  RRF    78,F
0270:  RRF    77,F
0271:  RRF    7A,F
0272:  RRF    79,F
0273:  RRF    78,F
0274:  RRF    77,F
0275:  RRF    7A,F
0276:  RRF    79,F
0277:  RRF    78,F
0278:  RRF    77,F
0279:  RRF    7A,F
027A:  RRF    79,F
027B:  RRF    78,F
027C:  RRF    77,F
027D:  RRF    7A,F
027E:  RRF    79,F
027F:  RRF    78,F
0280:  RRF    77,F
0281:  RRF    7A,F
0282:  RRF    79,F
0283:  RRF    78,F
0284:  RRF    77,F
0285:  MOVF   77,W
0286:  MOVWF  2C
0287:  MOVF   78,W
0288:  MOVWF  2D
....................       current = 0; 
0289:  CLRF   3E
028A:  CLRF   3D
028B:  CLRF   3C
028C:  CLRF   3B
....................       adccntr   = 0; 
028D:  CLRF   42
028E:  CLRF   41
028F:  CLRF   40
0290:  CLRF   3F
....................       { 
....................       if(current_count >= 750)//905) 
0291:  MOVF   2D,W
0292:  SUBLW  01
0293:  BTFSC  03.0
0294:  GOTO   2A0
0295:  XORLW  FF
0296:  BTFSS  03.2
0297:  GOTO   29C
0298:  MOVF   2C,W
0299:  SUBLW  ED
029A:  BTFSC  03.0
029B:  GOTO   2A0
....................          current_count=750;//905; 
029C:  MOVLW  02
029D:  MOVWF  2D
029E:  MOVLW  EE
029F:  MOVWF  2C
....................       } 
....................       ; 
....................       { 
....................       if(prevcurrent_count > current_count) 
02A0:  MOVF   2D,W
02A1:  SUBWF  2F,W
02A2:  BTFSS  03.0
02A3:  GOTO   2B4
02A4:  BTFSS  03.2
02A5:  GOTO   2AA
02A6:  MOVF   2E,W
02A7:  SUBWF  2C,W
02A8:  BTFSC  03.0
02A9:  GOTO   2B4
....................           error1=prevcurrent_count - current_count; 
02AA:  MOVF   2C,W
02AB:  SUBWF  2E,W
02AC:  MOVWF  30
02AD:  MOVF   2F,W
02AE:  MOVWF  31
02AF:  MOVF   2D,W
02B0:  BTFSS  03.0
02B1:  INCFSZ 2D,W
02B2:  SUBWF  31,F
....................       else if (current_count > prevcurrent_count) 
02B3:  GOTO   2C7
02B4:  MOVF   2F,W
02B5:  SUBWF  2D,W
02B6:  BTFSS  03.0
02B7:  GOTO   2C7
02B8:  BTFSS  03.2
02B9:  GOTO   2BE
02BA:  MOVF   2C,W
02BB:  SUBWF  2E,W
02BC:  BTFSC  03.0
02BD:  GOTO   2C7
....................           error1=current_count -  prevcurrent_count; 
02BE:  MOVF   2E,W
02BF:  SUBWF  2C,W
02C0:  MOVWF  30
02C1:  MOVF   2D,W
02C2:  MOVWF  31
02C3:  MOVF   2F,W
02C4:  BTFSS  03.0
02C5:  INCFSZ 2F,W
02C6:  SUBWF  31,F
....................               if(current_count==prevcurrent_count) 
02C7:  MOVF   2E,W
02C8:  SUBWF  2C,W
02C9:  BTFSS  03.2
02CA:  GOTO   2D1
02CB:  MOVF   2F,W
02CC:  SUBWF  2D,W
02CD:  BTFSS  03.2
02CE:  GOTO   2D1
....................                  error1=0; 
02CF:  CLRF   31
02D0:  CLRF   30
....................       } 
....................  
....................          if (error1>2) 
02D1:  MOVF   31,F
02D2:  BTFSS  03.2
02D3:  GOTO   2D8
02D4:  MOVF   30,W
02D5:  SUBLW  02
02D6:  BTFSC  03.0
02D7:  GOTO   334
....................             { 
....................              setcurrent=(current_count*5.4)/5.0;//4)/3; 
02D8:  MOVF   2D,W
02D9:  MOVWF  44
02DA:  MOVF   2C,W
02DB:  MOVWF  43
02DC:  GOTO   088
02DD:  MOVF   7A,W
02DE:  MOVWF  46
02DF:  MOVF   79,W
02E0:  MOVWF  45
02E1:  MOVF   78,W
02E2:  MOVWF  44
02E3:  MOVF   77,W
02E4:  MOVWF  43
02E5:  MOVLW  CD
02E6:  MOVWF  4A
02E7:  MOVLW  CC
02E8:  MOVWF  49
02E9:  MOVLW  2C
02EA:  MOVWF  48
02EB:  MOVLW  81
02EC:  MOVWF  47
02ED:  GOTO   0A6
02EE:  MOVF   77,W
02EF:  MOVWF  43
02F0:  MOVF   78,W
02F1:  MOVWF  44
02F2:  MOVF   79,W
02F3:  MOVWF  45
02F4:  MOVF   7A,W
02F5:  MOVWF  46
02F6:  MOVWF  4A
02F7:  MOVF   79,W
02F8:  MOVWF  49
02F9:  MOVF   78,W
02FA:  MOVWF  48
02FB:  MOVF   77,W
02FC:  MOVWF  47
02FD:  CLRF   4E
02FE:  CLRF   4D
02FF:  MOVLW  20
0300:  MOVWF  4C
0301:  MOVLW  81
0302:  MOVWF  4B
0303:  GOTO   11C
0304:  MOVF   7A,W
0305:  MOVWF  4A
0306:  MOVF   79,W
0307:  MOVWF  49
0308:  MOVF   78,W
0309:  MOVWF  48
030A:  MOVF   77,W
030B:  MOVWF  47
030C:  GOTO   1E7
030D:  MOVF   79,W
030E:  MOVWF  33
030F:  MOVF   78,W
0310:  MOVWF  32
....................              if(setcurrent<=100) 
0311:  MOVF   33,F
0312:  BTFSS  03.2
0313:  GOTO   31B
0314:  MOVF   32,W
0315:  SUBLW  64
0316:  BTFSS  03.0
0317:  GOTO   31B
....................                 setcurrent=100; 
0318:  CLRF   33
0319:  MOVLW  64
031A:  MOVWF  32
....................              if(setcurrent>=800) 
031B:  MOVF   33,W
031C:  SUBLW  02
031D:  BTFSC  03.0
031E:  GOTO   32A
031F:  XORLW  FF
0320:  BTFSS  03.2
0321:  GOTO   326
0322:  MOVF   32,W
0323:  SUBLW  1F
0324:  BTFSC  03.0
0325:  GOTO   32A
....................                 setcurrent=800; 
0326:  MOVLW  03
0327:  MOVWF  33
0328:  MOVLW  20
0329:  MOVWF  32
....................              psetcurrent = setcurrent; 
032A:  MOVF   33,W
032B:  MOVWF  35
032C:  MOVF   32,W
032D:  MOVWF  34
....................              transmit(setcurrent); 
032E:  MOVF   33,W
032F:  MOVWF  44
0330:  MOVF   32,W
0331:  MOVWF  43
0332:  CALL   207
....................             } 
....................          else 
0333:  GOTO   339
....................             { 
....................               transmit(psetcurrent); 
0334:  MOVF   35,W
0335:  MOVWF  44
0336:  MOVF   34,W
0337:  MOVWF  43
0338:  CALL   207
....................             } 
....................       }//adccntr 
....................  } 
0339:  BCF    0A.3
033A:  GOTO   39F (RETURN)
.................... //============================================================================== 
.................... void transmit(unsigned int16 transdata) 
.................... { 
....................  unsigned char higher=0,lower=0; 
*
0207:  CLRF   45
0208:  CLRF   46
....................  lower=transdata; 
0209:  MOVF   43,W
020A:  MOVWF  46
....................  higher=transdata >>8; 
020B:  MOVF   44,W
020C:  MOVWF  45
....................  transchksum=0; 
020D:  CLRF   36
....................  putchar('$'); 
020E:  MOVLW  24
020F:  BTFSS  0C.4
0210:  GOTO   20F
0211:  MOVWF  19
....................  putchar('%'); 
0212:  MOVLW  25
0213:  BTFSS  0C.4
0214:  GOTO   213
0215:  MOVWF  19
....................  transchksum=transchksum +'%'; 
0216:  MOVLW  25
0217:  ADDWF  36,F
....................  putchar(lower); 
0218:  MOVF   46,W
0219:  BTFSS  0C.4
021A:  GOTO   219
021B:  MOVWF  19
....................  transchksum=transchksum + lower; 
021C:  MOVF   46,W
021D:  ADDWF  36,F
....................  putchar(higher); 
021E:  MOVF   45,W
021F:  BTFSS  0C.4
0220:  GOTO   21F
0221:  MOVWF  19
....................  transchksum=transchksum + higher; 
0222:  MOVF   45,W
0223:  ADDWF  36,F
....................  //transchksum=transchksum +'M'; 
....................  putchar(transchksum); 
0224:  MOVF   36,W
0225:  BTFSS  0C.4
0226:  GOTO   225
0227:  MOVWF  19
....................  transchksum=0; 
0228:  CLRF   36
.................... } 
0229:  RETLW  00
.................... //============================================================================== 

Configuration Fuses:
   Word  1: 2CD4   INTRC_IO NOWDT NOPWRT NOMCLR NOCP NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BOR4VBROWNOUT_SL NOWRT
