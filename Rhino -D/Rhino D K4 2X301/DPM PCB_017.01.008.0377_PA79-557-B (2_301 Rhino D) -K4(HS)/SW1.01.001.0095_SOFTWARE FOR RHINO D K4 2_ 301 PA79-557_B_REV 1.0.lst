CCS PCM C Compiler, Version 4.005, 35007               10-Mar-23 11:59

               Filename: D:\Rahul -\ED\Rhino D K4 2_301\DPM PA79-557-B_R2 (2_301 Rhino D) -K4(HS)\SW1.01.001.0095_SOFTWARE FOR RHINO D K4 2_ 301 PA79-557_B_REV 1.0.lst

               ROM used: 2808 words (34%)
                         Largest free fragment is 2048
               RAM used: 122 (45%) at main() level
                         138 (51%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   1F6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.0
001C:  GOTO   01F
001D:  BTFSC  0C.0
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   08D
....................    /* 
.................... * File:  PA79-557-B-REV0.c 
.................... * Author: PT03 
.................... * 
.................... * 
.................... * ********************* # MODIFICATION DETAILS # ******************************* 
.................... *   Date     Rev.No      Done By         Description 
.................... * 14-08-14   REV 0.0       PPT         DPM shows Actual current,Voltage & Ref current 
.................... *                                      ARC ON TIME & RESET, ESD ON/OFF 
.................... * 16-10-14   REV 0.0       PPT         Added ERROR 04 for NO OCV 
.................... * 03-02-22   REV 2.0                  Display shows  Set and Actual Current 
.................... ******************************************************************************** 
.................... */ 
....................  
.................... #include "curandref.h" 
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES NOCPD                    //No EE protection 
.................... //#FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... //#FUSES NIWRTC 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES INTRC 
.................... #use delay(clock=8000000) 
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... //#include "D:\PRIYANKA\PROJECT\DPM\current&ref\DPM.h" 
.................... #include "controller.c" 
.................... //------------------------------------------------------------------------------ 
.................... #byte MCU_STATUS = 0x003 
.................... #bit    MCU_C = MCU_STATUS.0 
.................... #bit    MCU_DC = MCU_STATUS.1 
.................... #bit    MCU_Z = MCU_STATUS.2 
.................... #bit    MCU_PD = MCU_STATUS.3 
.................... #bit    MCU_TO = MCU_STATUS.4 
.................... #bit    MCU_RP0 = MCU_STATUS.5 
.................... #bit    MCU_RP1 = MCU_STATUS.6 
.................... #bit    MCU_IRP = MCU_STATUS.7 
.................... #byte MCU_PORTA = 0x005 
.................... #byte MCU_PORTB = 0x006 
.................... #byte MCU_PORTC = 0x007 
.................... #byte MCU_PORTD = 0x008 
.................... #byte MCU_PORTE = 0x009 
.................... #bit    MCU_RE0 = MCU_PORTE.0 
.................... #bit    MCU_RE1 = MCU_PORTE.1 
.................... #bit    MCU_RE2 = MCU_PORTE.2 
.................... #byte MCU_INTCON = 0x00B 
.................... #bit    MCU_RBIF = MCU_INTCON.0 
.................... #bit    MCU_INTF = MCU_INTCON.1 
.................... #bit    MCU_T0IF = MCU_INTCON.2 
.................... #bit    MCU_RBIE = MCU_INTCON.3 
.................... #bit    MCU_INTE = MCU_INTCON.4 
.................... #bit    MCU_T0IE = MCU_INTCON.5 
.................... #bit    MCU_PEIE = MCU_INTCON.6 
.................... #bit    MCU_GIE = MCU_INTCON.7 
.................... #byte MCU_PIR1 = 0x00C 
.................... #bit    MCU_TMR1IF = MCU_PIR1.0 
.................... #bit    MCU_TMR2IF = MCU_PIR1.1 
.................... #bit    MCU_CCP1IF = MCU_PIR1.2 
.................... #bit    MCU_SSPIF = MCU_PIR1.3 
.................... #bit    MCU_TXIF = MCU_PIR1.4 
.................... #bit    MCU_RCIF = MCU_PIR1.5 
.................... #bit    MCU_ADIF = MCU_PIR1.6 
.................... #bit    MCU_PSPIF = MCU_PIR1.7 
.................... #byte MCU_OPTION_REG = 0x181 
.................... #bit    MCU_PS0 = MCU_OPTION_REG.0 
.................... #bit    MCU_PS1 = MCU_OPTION_REG.1 
.................... #bit    MCU_PS2 = MCU_OPTION_REG.2 
.................... #bit    MCU_PSA = MCU_OPTION_REG.3 
.................... #bit    MCU_T0SE = MCU_OPTION_REG.4 
.................... #bit    MCU_T0CS = MCU_OPTION_REG.5 
.................... #bit    MCU_INTEDG = MCU_OPTION_REG.6 
.................... #bit    MCU_RBPU = MCU_OPTION_REG.7 
.................... #byte MCU_ANSEL = 0x188 
.................... #bit    MCU_ANSELANSO = MCU_ANSEL.0 
.................... #bit    MCU_ANSELANS1 = MCU_ANSEL.1 
.................... #bit    MCU_ANSELANS2 = MCU_ANSEL.2 
.................... #bit    MCU_ANSELANS3 = MCU_ANSEL.3 
.................... #bit    MCU_ANSELANS4 = MCU_ANSEL.4 
.................... #bit    MCU_ANSELANS5 = MCU_ANSEL.5 
.................... #bit    MCU_ANSELANS6 = MCU_ANSEL.6 
.................... #bit    MCU_ANSELANS7 = MCU_ANSEL.7 
.................... #byte MCU_ANSELH = 0x189 
.................... #bit    MCU_ANSELHANS8 = MCU_ANSELH.0 
.................... #bit    MCU_ANSELHANS9 = MCU_ANSELH.1 
.................... #bit    MCU_ANSELHANS10 = MCU_ANSELH.2 
.................... #bit    MCU_ANSELHANS11 = MCU_ANSELH.3 
.................... #byte MCU_ADCON0 = 0x01F 
.................... #bit    MCU_ADON = MCU_ADCON0.0 
.................... //#bit    MCU_GO/DONE = MCU_ADCON0.1 
.................... #bit    MCU_CHS0 = MCU_ADCON0.2 
.................... #bit    MCU_CHS1 = MCU_ADCON0.3 
.................... #bit    MCU_CHS2 = MCU_ADCON0.4 
.................... #bit    MCU_CHS3 = MCU_ADCON0.5 
.................... #byte MCU_OSCCON = 0x08F 
.................... #byte MCU_OSCTUNE= 0x090 
....................  
....................  
.................... #fuses HS,NOWDT,NOLVP,INTRC_IO,NOWDT,NOMCLR 
.................... #use delay(clock=8000000) 
*
02D9:  MOVLW  B9
02DA:  MOVWF  04
02DB:  BCF    03.7
02DC:  MOVF   00,W
02DD:  BTFSC  03.2
02DE:  GOTO   2EC
02DF:  MOVLW  02
02E0:  MOVWF  78
02E1:  CLRF   77
02E2:  DECFSZ 77,F
02E3:  GOTO   2E2
02E4:  DECFSZ 78,F
02E5:  GOTO   2E1
02E6:  MOVLW  97
02E7:  MOVWF  77
02E8:  DECFSZ 77,F
02E9:  GOTO   2E8
02EA:  DECFSZ 00,F
02EB:  GOTO   2DF
02EC:  RETLW  00
....................  
....................  
.................... #include "variable.c" 
.................... #define disp1      PIN_B0 
.................... #define disp2      PIN_B1 
.................... #define disp3      PIN_B2 
.................... #define disp4      PIN_B3 
.................... #define disp5      PIN_A4 
.................... #define disp6      PIN_A7 
.................... #define disp7      PIN_A6 
.................... #define disp8      PIN_B5 
....................  
.................... #define segmenta   PIN_c0 
.................... #define segmentb   PIN_c1 
.................... #define segmentc   PIN_c2 
.................... #define segmentd   PIN_c3 
.................... #define segmente   PIN_c4 
.................... #define segmentf   PIN_c5 
.................... #define segmentg   PIN_c6 
.................... #define segmentdp  PIN_c7 
....................  
.................... #define ARCONKEY    PIN_B7 
.................... #define ARCONRST    PIN_B6 
.................... #define ESDIN       PIN_B4 
.................... //#define sw1        PIN_A3 
.................... //#define sw2        PIN_A4 
.................... //#define sw3        PIN_A5 
.................... #define TIGSW      PIN_B5 
.................... //#define offset     PIN_B4 
....................  
.................... #define adcavg      256   // 256 
.................... #define leftshift   8 
.................... #define adcavg1     64 
.................... #define leftshift1   6 //8 
....................  
.................... //--------------------------------------------------------------------- 
.................... unsigned char digitcnt=0,hexvalue=0,readadcf=0,jj=0,setdp1=0,setdp=0;//mma=0,hibyte=0,lowbyte=0; //,pinout=0,,readswitch1=0 
*
0A02:  CLRF   28
0A03:  CLRF   29
0A04:  CLRF   2A
0A05:  CLRF   2B
0A06:  CLRF   2C
0A07:  CLRF   2D
.................... static unsigned char digit[8],offsetokf=0,model=0,range=0,weldon=0;//,band=0; 
0A08:  CLRF   2E
0A09:  CLRF   2F
0A0A:  CLRF   30
0A0B:  CLRF   31
0A0C:  CLRF   32
0A0D:  CLRF   33
0A0E:  CLRF   34
0A0F:  CLRF   35
0A10:  CLRF   36
0A11:  CLRF   37
0A12:  CLRF   38
0A13:  CLRF   39
.................... unsigned int32 current=0,value=0,voltage=0,cur=0,prevcur=0,curoffset=0,offcnt=0;//,offset2=0; 
0A14:  CLRF   3A
0A15:  CLRF   3B
0A16:  CLRF   3C
0A17:  CLRF   3D
0A18:  CLRF   3E
0A19:  CLRF   3F
0A1A:  CLRF   40
0A1B:  CLRF   41
0A1C:  CLRF   42
0A1D:  CLRF   43
0A1E:  CLRF   44
0A1F:  CLRF   45
0A20:  CLRF   46
0A21:  CLRF   47
0A22:  CLRF   48
0A23:  CLRF   49
0A24:  CLRF   4A
0A25:  CLRF   4B
0A26:  CLRF   4C
0A27:  CLRF   4D
0A28:  CLRF   4E
0A29:  CLRF   4F
0A2A:  CLRF   50
0A2B:  CLRF   51
0A2C:  CLRF   52
0A2D:  CLRF   53
0A2E:  CLRF   54
0A2F:  CLRF   55
.................... unsigned int32 calcur=0,maxadc=625,maxshunt=500,voltage1=0; 
0A30:  CLRF   56
0A31:  CLRF   57
0A32:  CLRF   58
0A33:  CLRF   59
0A34:  MOVLW  71
0A35:  MOVWF  5A
0A36:  MOVLW  02
0A37:  MOVWF  5B
0A38:  CLRF   5C
0A39:  CLRF   5D
0A3A:  MOVLW  F4
0A3B:  MOVWF  5E
0A3C:  MOVLW  01
0A3D:  MOVWF  5F
0A3E:  CLRF   60
0A3F:  CLRF   61
0A40:  CLRF   62
0A41:  CLRF   63
0A42:  CLRF   64
0A43:  CLRF   65
.................... unsigned int16 vtg=0;//100;//7;//20;//123;//130;//123; //102; 
0A44:  CLRF   66
0A45:  CLRF   67
.................... unsigned int16 prevvtg=1000; 
0A46:  MOVLW  E8
0A47:  MOVWF  68
0A48:  MOVLW  03
0A49:  MOVWF  69
.................... unsigned char dispvalf=0,ucModelSel=0; 
0A4A:  CLRF   6A
0A4B:  CLRF   6B
.................... unsigned char  esdonf=0,setdp2=0,dispcnt=0; 
0A4C:  CLRF   6C
0A4D:  CLRF   6D
0A4E:  CLRF   6E
.................... unsigned int32 prevref=0, ref2=0,ucSetCurr=0,Err=0; 
0A4F:  CLRF   6F
0A50:  CLRF   70
0A51:  CLRF   71
0A52:  CLRF   72
0A53:  CLRF   73
0A54:  CLRF   74
0A55:  CLRF   75
0A56:  CLRF   76
0A57:  BSF    03.5
0A58:  CLRF   20
0A59:  CLRF   21
0A5A:  CLRF   22
0A5B:  CLRF   23
0A5C:  CLRF   24
0A5D:  CLRF   25
0A5E:  CLRF   26
0A5F:  CLRF   27
....................  
.................... //unsigned int16 i=0,num=1900, 
.................... //------------------------------------------------------------------------------ 
.................... //------------------------------------------------------------------------------ 
.................... void initialise(void); 
.................... void display(void); 
.................... void short_del(void); 
.................... void inttochar1(unsigned int16); 
.................... void adc_init(void); 
.................... void inttochar(unsigned int16); 
.................... void readadc(void); 
.................... void dispmodel(void); 
.................... unsigned char readswitch(); 
.................... unsigned char chk_band(unsigned int16,unsigned int16); 
.................... void write_memory(); 
.................... void read_memory(); 
.................... void debounce(); 
.................... void readmem(); 
.................... void SetCurrentCal_600(void); 
.................... void SetCurrentCal_400(void); 
.................... void SetCurrentCal_500(void); 
.................... void SetCurrentCal_300(void); 
....................  
.................... //void inttochar2(unsigned int16 hour,unsigned int16 min); 
.................... void inttochar2(unsigned char hour,unsigned char min); 
....................  
.................... //------------------------------------------------------------------------------ 
.................... const unsigned char lookup_table[40] = { 
....................                                        0x3F, //0    // Position - 0x00 
....................                                        0x06, //1    // Position - 0x01 
....................                                        0x5B, //2    // Position - 0x02 
....................                                        0x4F, //3    // Position - 0x03 
....................                                        0x66, //4    // Position - 0x04 
....................                                        0x6D, //5    // Position - 0x05 
....................                                        0x7D, //6    // Position - 0x06 
....................                                        0x07, //7    // Position - 0x07 
....................                                        0x7F, //8    // Position - 0x08 
....................                                        0x6F, //9    // Position - 0x09 
....................                                        0x80, //DP   // Position - 0x0A 
....................                                        0x77, //A    // Position - 0x0B 
....................                                        0x7C, //B    // Position - 0x0C 
....................                                        0x39, //c    // Position - 0x0D 
....................                                        0x5E, //D    // Position - 0x0E 
....................                                        0x79, //E    // Position - 0x0F 
....................                                        0x71, //F    // Position - 0x10 
....................                                        0x3D  //0x7D, //G    // Position - 0x11 
....................                                        0x76, //H    // Position - 0x12 
....................                                        0x06, //I    // Position - 0x13 
....................                                        0x1E, //J    // Position - 0x14 
....................                                        0x70, //K    // Position - 0x15 
....................                                        0x38, //L    // Position - 0x16 
....................                                        0x55, //M    // Position - 0x17 
....................                                        0x54, //N    // Position - 0x18 
....................                                        0x3F, //O    // Position - 0x19 
....................                                        0x73, //P    // Position - 0x1A 
....................                                        0x67, //Q    // Position - 0x1B 
....................                                        0x50, //R    // Position - 0x1C 
....................                                        0x6D, //S    // Position - 0x1D 
....................                                        0x78, //T    // Position - 0x1E 
....................                                        0x1C, //3E, //U    // Position - 0x1F 
....................                                        0x3E, //1C, //1C   //V    // Position - 0x20 
....................                                        0x6A, //7E,  //W    // Position - 0x21 
....................                                        0x68, //X    // Position - 0x22 
....................                                        0x6E, //Y    // Position - 0x23 
....................                                        0x89, //Z    // Position - 0x24 
....................                                        0x00, //all seg ON  // Position - 0x25 
....................                                        0x40, //-         // Position - 0x26 
....................                                        0xFF, //o         // Position - 0x27 
.................... }; 
....................  
.................... const unsigned char lookup_table1[40] = { 
....................                                        0x3F, //0    // Position - 0x00 
....................                                        0x06, //1    // Position - 0x01 
....................                                        0x9B, //2    // Position - 0x02 
....................                                        0x8F, //3    // Position - 0x03 
....................                                        0xA6, //4    // Position - 0x04 
....................                                        0xAD, //5    // Position - 0x05 
....................                                        0xBD, //6    // Position - 0x06 
....................                                        0x07, //7    // Position - 0x07 
....................                                        0xBF, //8    // Position - 0x08 
....................                                        0xAF, //9    // Position - 0x09 
....................                                        0x40, //DP   // Position - 0x0A 
....................                                        0xB7, //A    // Position - 0x0B 
....................                                        0xBC, //B    // Position - 0x0C 
....................                                        0x39, //c    // Position - 0x0D 
....................                                        0x9E, //D    // Position - 0x0E 
....................                                        0xB9, //E    // Position - 0x0F 
....................                                        0xB1, //F    // Position - 0x10 
....................                                        0x3D  //0x7D, //G    // Position - 0x11 
....................                                        0xB6, //H    // Position - 0x12 
....................                                        0x06, //I    // Position - 0x13 
....................                                        0x1E, //J    // Position - 0x14 
....................                                        0xB0, //K    // Position - 0x15 
....................                                        0x38, //L    // Position - 0x16 
....................                                        0x95, //M    // Position - 0x17 
....................                                        0x94, //N    // Position - 0x18 
....................                                        0x3F, //O    // Position - 0x19 
....................                                        0xB3, //P    // Position - 0x1A 
....................                                        0xA7, //Q    // Position - 0x1B 
....................                                        0x90, //R    // Position - 0x1C 
....................                                        0xAD, //S    // Position - 0x1D 
....................                                        0xB8, //T    // Position - 0x1E 
....................                                        0x1C, //3E, //U    // Position - 0x1F 
....................                                        0x3E, //1C, //1C   //V    // Position - 0x20 
....................                                        0xAA, //7E,  //W    // Position - 0x21 
....................                                        0xA8, //X    // Position - 0x22 
....................                                        0xAE, //Y    // Position - 0x23 
....................                                        0x49, //Z    // Position - 0x24 
....................                                        0x00, //all seg ON  // Position - 0x25 
....................                                        0x80, //-         // Position - 0x26 
....................                                        0xFF, //o         // Position - 0x27 
.................... }; 
....................  
....................  
.................... #include "interrupt.c" 
....................  
.................... /*#int_timer0 
.................... void timer0_isr(void) 
.................... { 
....................     static unsigned int count3=0; 
....................     clear_interrupt(INT_TIMER0); 
....................     set_timer0(0xFC40);              //sets timer to interrupt in 6ms 
....................     count3++; 
....................      if(count3==10) 
....................         { 
....................             count3=0; 
....................             readswitch1=1; 
....................         } 
.................... }*/ 
....................  
.................... #int_timer1 
.................... void timer1_isr(void) 
.................... { 
....................     static unsigned char count=0,count1=0; 
0A60:  CLRF   7C
0A61:  CLRF   7D
....................     clear_interrupt(INT_TIMER1); 
*
008D:  BCF    0C.0
....................     set_timer1(0xFC40);            //FC40 for 500usec at 8mhz 
008E:  MOVLW  FC
008F:  MOVWF  0F
0090:  MOVLW  40
0091:  MOVWF  0E
....................     count++; 
0092:  INCF   7C,F
....................     count1++; 
0093:  INCF   7D,F
....................  
....................  
....................  
....................    if(count>=5)  //10 
0094:  MOVF   7C,W
0095:  SUBLW  04
0096:  BTFSC  03.0
0097:  GOTO   22A
....................    { 
....................          count=0; 
0098:  CLRF   7C
....................          display(); 
....................    } 
....................    if(count1>=2) 
*
022A:  MOVF   7D,W
022B:  SUBLW  01
022C:  BTFSC  03.0
022D:  GOTO   231
....................    { 
....................       count1=0; 
022E:  CLRF   7D
....................       readadcf=1; 
022F:  MOVLW  01
0230:  MOVWF  2A
....................    } 
....................  
....................  
....................  
....................  
....................  
.................... } 
....................  
....................  
.................... #include "display.c" 
....................  
....................  
....................  
....................  
....................  
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7) 
....................  
....................  
0231:  BCF    0C.0
0232:  BCF    0A.3
0233:  BCF    0A.4
0234:  GOTO   01F
.................... void main() 
.................... { 
*
09F6:  CLRF   04
09F7:  BCF    03.7
09F8:  MOVLW  1F
09F9:  ANDWF  03,F
09FA:  BSF    03.5
09FB:  BCF    1F.4
09FC:  BCF    1F.5
09FD:  MOVLW  00
09FE:  MOVWF  1D
09FF:  MOVLW  07
0A00:  BCF    03.5
0A01:  MOVWF  1F
....................    #asm 
....................          CLRF  MCU_ANSEL ;      //0-i/o,1-analog 
*
0A74:  BSF    03.6
0A75:  CLRF   08
....................          CLRF  MCU_ANSELH ; 
0A76:  CLRF   09
....................          ; 
....................          BCF   MCU_RP1; 
0A77:  BCF    03.6
....................          BCF   MCU_RP0; 
0A78:  BCF    03.5
....................          ; 
....................          BCF   MCU_RP1; 
0A79:  BCF    03.6
....................          BSF   MCU_RP0; 
0A7A:  BSF    03.5
....................          MOVLW  0xff 
0A7B:  MOVLW  FF
....................          MOVWF  0X90 
0A7C:  BCF    03.6
0A7D:  MOVWF  10
....................          MOVLW  0x73 
0A7E:  MOVLW  73
....................          MOVWF  0X8F 
0A7F:  MOVWF  0F
....................          BCF   MCU_RP1; 
0A80:  BCF    03.6
....................          BCF   MCU_RP0; 
0A81:  BCF    03.5
....................     #endasm 
....................     initialise(); 
0A82:  BCF    0A.3
0A83:  BCF    03.5
0A84:  GOTO   235
0A85:  BSF    0A.3
....................     adc_init(); 
0A86:  BCF    0A.3
0A87:  GOTO   262
0A88:  BSF    0A.3
....................   // current=000; 
....................   // inttochar1(current); 
....................    //set_tris_a(0x38); 
....................  
....................    model= readswitch(); 
0A89:  BCF    0A.3
0A8A:  GOTO   272
0A8B:  BSF    0A.3
0A8C:  MOVF   78,W
0A8D:  MOVWF  37
....................    set_tris_a(0x2F); //0x38 
0A8E:  MOVLW  2F
0A8F:  BSF    03.5
0A90:  MOVWF  05
....................    set_tris_b(0xD0);//(0x10); 
0A91:  MOVLW  D0
0A92:  MOVWF  06
....................    set_tris_c(0x00); 
*
0A62:  MOVLW  FF
0A63:  MOVWF  7E
*
0A93:  MOVLW  00
0A94:  MOVWF  07
0A95:  MOVWF  7E
....................  
....................    delay_ms(2); 
0A96:  MOVLW  02
0A97:  MOVWF  39
0A98:  BCF    0A.3
0A99:  BCF    03.5
0A9A:  CALL   2D9
0A9B:  BSF    0A.3
....................    digit[0]=0x27; //'D'- 0x30;  //0X40;   //'D'- 0x30;; 
0A9C:  MOVLW  27
0A9D:  MOVWF  2E
....................    digit[1]=0X27; 
0A9E:  MOVWF  2F
....................    digit[2]=0X27; 
0A9F:  MOVWF  30
....................    digit[3]=0x27; //'R'- 0x30; 
0AA0:  MOVWF  31
....................    digit[4]=0X27; 
0AA1:  MOVWF  32
....................    digit[5]=0X27; 
0AA2:  MOVWF  33
....................    digit[6]=0X27; 
0AA3:  MOVWF  34
....................    digit[7]=0X27; 
0AA4:  MOVWF  35
....................    //setdp=1; 
....................    delay_ms(500); 
0AA5:  MOVLW  02
0AA6:  BSF    03.5
0AA7:  MOVWF  38
0AA8:  MOVLW  FA
0AA9:  MOVWF  39
0AAA:  BCF    0A.3
0AAB:  BCF    03.5
0AAC:  CALL   2D9
0AAD:  BSF    0A.3
0AAE:  BSF    03.5
0AAF:  DECFSZ 38,F
0AB0:  GOTO   2A8
....................  
....................    digit[0]=0x0E; //'D'- 0x30; 
0AB1:  MOVLW  0E
0AB2:  BCF    03.5
0AB3:  MOVWF  2E
....................    digit[1]=0x19; //'O'- 0x30; 
0AB4:  MOVLW  19
0AB5:  MOVWF  2F
....................    digit[2]=0x1C; //'R'- 0x30; 
0AB6:  MOVLW  1C
0AB7:  MOVWF  30
....................    digit[3]=0X0B; //'A'- 0x30; 
0AB8:  MOVLW  0B
0AB9:  MOVWF  31
....................    dispmodel(); 
0ABA:  BCF    0A.3
0ABB:  GOTO   2ED
0ABC:  BSF    0A.3
....................    setdp=0; 
0ABD:  CLRF   2D
....................    delay_ms(500); 
0ABE:  MOVLW  02
0ABF:  BSF    03.5
0AC0:  MOVWF  38
0AC1:  MOVLW  FA
0AC2:  MOVWF  39
0AC3:  BCF    0A.3
0AC4:  BCF    03.5
0AC5:  CALL   2D9
0AC6:  BSF    0A.3
0AC7:  BSF    03.5
0AC8:  DECFSZ 38,F
0AC9:  GOTO   2C1
....................    delay_ms(500); 
0ACA:  MOVLW  02
0ACB:  MOVWF  38
0ACC:  MOVLW  FA
0ACD:  MOVWF  39
0ACE:  BCF    0A.3
0ACF:  BCF    03.5
0AD0:  CALL   2D9
0AD1:  BSF    0A.3
0AD2:  BSF    03.5
0AD3:  DECFSZ 38,F
0AD4:  GOTO   2CC
....................  
....................    digit[0]=0x0F; //'D'- 0x30;  //0X40;   //'D'- 0x30;;    0F 
0AD5:  MOVLW  0F
0AD6:  BCF    03.5
0AD7:  MOVWF  2E
....................    digit[1]=0X20; 
0AD8:  MOVLW  20
0AD9:  MOVWF  2F
....................    digit[2]=0x01;  //19  *** 
0ADA:  MOVLW  01
0ADB:  MOVWF  30
....................    digit[3]=0x1C; //'R'- 0x30; 
0ADC:  MOVLW  1C
0ADD:  MOVWF  31
....................  
....................    digit[4]=0X00; 
0ADE:  CLRF   32
....................    digit[5]=0X00; 
0ADF:  CLRF   33
....................    digit[6]=0X00; 
0AE0:  CLRF   34
....................    digit[7]=0X00; 
0AE1:  CLRF   35
....................    setdp=1; 
0AE2:  MOVLW  01
0AE3:  MOVWF  2D
....................    delay_ms(1000); 
0AE4:  MOVLW  04
0AE5:  BSF    03.5
0AE6:  MOVWF  38
0AE7:  MOVLW  FA
0AE8:  MOVWF  39
0AE9:  BCF    0A.3
0AEA:  BCF    03.5
0AEB:  CALL   2D9
0AEC:  BSF    0A.3
0AED:  BSF    03.5
0AEE:  DECFSZ 38,F
0AEF:  GOTO   2E7
....................    esdonf=0; 
0AF0:  BCF    03.5
0AF1:  CLRF   6C
....................    //mma=1; 
....................    ref2=10; 
0AF2:  CLRF   76
0AF3:  CLRF   75
0AF4:  CLRF   74
0AF5:  MOVLW  0A
0AF6:  MOVWF  73
....................    current=0; 
0AF7:  CLRF   3D
0AF8:  CLRF   3C
0AF9:  CLRF   3B
0AFA:  CLRF   3A
....................    inttochar1(current); 
0AFB:  MOVF   3B,W
0AFC:  BSF    03.5
0AFD:  MOVWF  39
0AFE:  BCF    03.5
0AFF:  MOVF   3A,W
0B00:  BSF    03.5
0B01:  MOVWF  38
0B02:  MOVF   39,W
0B03:  MOVWF  3B
0B04:  MOVF   38,W
0B05:  MOVWF  3A
0B06:  BCF    0A.3
0B07:  BCF    03.5
0B08:  CALL   3D2
0B09:  BSF    0A.3
....................    while(1) 
....................    { 
....................  
....................          if(readadcf==1) 
0B0A:  DECFSZ 2A,W
0B0B:  GOTO   30E
....................          { 
....................             readadc(); 
0B0C:  GOTO   000
....................             readadcf=0; 
0B0D:  CLRF   2A
....................          } 
....................  
....................         // if(weldon==1) 
....................         if(voltage<8000) 
0B0E:  MOVF   45,F
0B0F:  BTFSS  03.2
0B10:  GOTO   34A
0B11:  MOVF   44,F
0B12:  BTFSS  03.2
0B13:  GOTO   34A
0B14:  MOVF   43,W
0B15:  SUBLW  1F
0B16:  BTFSS  03.0
0B17:  GOTO   34A
0B18:  BTFSS  03.2
0B19:  GOTO   31E
0B1A:  MOVF   42,W
0B1B:  SUBLW  3F
0B1C:  BTFSS  03.0
0B1D:  GOTO   34A
....................          { 
....................             if((prevcur!=current))// && offsetokf==1) 
0B1E:  MOVF   3A,W
0B1F:  SUBWF  4A,W
0B20:  BTFSS  03.2
0B21:  GOTO   32E
0B22:  MOVF   3B,W
0B23:  SUBWF  4B,W
0B24:  BTFSS  03.2
0B25:  GOTO   32E
0B26:  MOVF   3C,W
0B27:  SUBWF  4C,W
0B28:  BTFSS  03.2
0B29:  GOTO   32E
0B2A:  MOVF   3D,W
0B2B:  SUBWF  4D,W
0B2C:  BTFSC  03.2
0B2D:  GOTO   345
....................             { 
....................              /* 
....................                if(ucSetCurr<310) 
....................                { 
....................                   if((current > (ucSetCurr+10)) && (current > (ucSetCurr-15))) 
....................                     current   =  current + (current-ucSetCurr); 
....................                   else if((current < (ucSetCurr-10)) && (current > (ucSetCurr-15))) 
....................                     current   =  current + (ucSetCurr-current); 
....................                } 
....................  
....................                if(ucSetCurr>300) 
....................                { 
....................                   if((current > (ucSetCurr+15)) && (current > (ucSetCurr-60))) 
....................                     current   =  current + (current-ucSetCurr); 
....................                   else if((current < (ucSetCurr-15)) && (current > (ucSetCurr-60))) 
....................                     current   =  current + (ucSetCurr-current); 
....................                }*/ 
....................  
....................                inttochar1(current); 
0B2E:  MOVF   3B,W
0B2F:  BSF    03.5
0B30:  MOVWF  39
0B31:  BCF    03.5
0B32:  MOVF   3A,W
0B33:  BSF    03.5
0B34:  MOVWF  38
0B35:  MOVF   39,W
0B36:  MOVWF  3B
0B37:  MOVF   38,W
0B38:  MOVWF  3A
0B39:  BCF    0A.3
0B3A:  BCF    03.5
0B3B:  CALL   3D2
0B3C:  BSF    0A.3
....................                prevcur=current; 
0B3D:  MOVF   3D,W
0B3E:  MOVWF  4D
0B3F:  MOVF   3C,W
0B40:  MOVWF  4C
0B41:  MOVF   3B,W
0B42:  MOVWF  4B
0B43:  MOVF   3A,W
0B44:  MOVWF  4A
....................             } 
....................             prevref=0; 
0B45:  CLRF   72
0B46:  CLRF   71
0B47:  CLRF   70
0B48:  CLRF   6F
....................          } 
....................          else 
0B49:  GOTO   35D
....................          { 
....................               current=0; 
0B4A:  CLRF   3D
0B4B:  CLRF   3C
0B4C:  CLRF   3B
0B4D:  CLRF   3A
....................               inttochar1(current); 
0B4E:  MOVF   3B,W
0B4F:  BSF    03.5
0B50:  MOVWF  39
0B51:  BCF    03.5
0B52:  MOVF   3A,W
0B53:  BSF    03.5
0B54:  MOVWF  38
0B55:  MOVF   39,W
0B56:  MOVWF  3B
0B57:  MOVF   38,W
0B58:  MOVWF  3A
0B59:  BCF    0A.3
0B5A:  BCF    03.5
0B5B:  CALL   3D2
0B5C:  BSF    0A.3
....................          } 
....................  
....................       /*   else if(weldon==0) 
....................          { 
....................             if((prevref!=ref2)) 
....................             { 
....................  
....................               if(ucModelSel==1) 
....................                  SetCurrentCal_500(); 
....................                else if(ucModelSel==2) 
....................                  SetCurrentCal_300(); 
....................  
....................                ucSetCurr=ref2; 
....................                inttochar1(ref2); 
....................                prevref=ref2; 
....................             } 
....................          }*/ 
....................  
....................          if((prevvtg!=voltage)) 
0B5D:  MOVF   42,W
0B5E:  SUBWF  68,W
0B5F:  BTFSS  03.2
0B60:  GOTO   36B
0B61:  MOVF   43,W
0B62:  SUBWF  69,W
0B63:  BTFSS  03.2
0B64:  GOTO   36B
0B65:  MOVF   44,F
0B66:  BTFSS  03.2
0B67:  GOTO   36B
0B68:  MOVF   45,F
0B69:  BTFSC  03.2
0B6A:  GOTO   3DC
....................          { 
....................             if(voltage<=9999) 
0B6B:  MOVF   45,F
0B6C:  BTFSS  03.2
0B6D:  GOTO   38D
0B6E:  MOVF   44,F
0B6F:  BTFSS  03.2
0B70:  GOTO   38D
0B71:  MOVF   43,W
0B72:  SUBLW  27
0B73:  BTFSS  03.0
0B74:  GOTO   38D
0B75:  BTFSS  03.2
0B76:  GOTO   37B
0B77:  MOVF   42,W
0B78:  SUBLW  0F
0B79:  BTFSS  03.0
0B7A:  GOTO   38D
....................             { 
....................                inttochar(voltage); 
0B7B:  MOVF   43,W
0B7C:  BSF    03.5
0B7D:  MOVWF  39
0B7E:  BCF    03.5
0B7F:  MOVF   42,W
0B80:  BSF    03.5
0B81:  MOVWF  38
0B82:  MOVF   39,W
0B83:  MOVWF  3B
0B84:  MOVF   38,W
0B85:  MOVWF  3A
0B86:  BCF    0A.3
0B87:  BCF    03.5
0B88:  CALL   6C2
0B89:  BSF    0A.3
....................                setdp=1; 
0B8A:  MOVLW  01
0B8B:  MOVWF  2D
....................             } 
....................             else 
0B8C:  GOTO   3D8
....................             { 
....................                voltage1=(voltage/100.0); 
0B8D:  MOVF   45,W
0B8E:  BSF    03.5
0B8F:  MOVWF  3B
0B90:  BCF    03.5
0B91:  MOVF   44,W
0B92:  BSF    03.5
0B93:  MOVWF  3A
0B94:  BCF    03.5
0B95:  MOVF   43,W
0B96:  BSF    03.5
0B97:  MOVWF  39
0B98:  BCF    03.5
0B99:  MOVF   42,W
0B9A:  BSF    03.5
0B9B:  MOVWF  38
0B9C:  BCF    0A.3
0B9D:  BCF    03.5
0B9E:  CALL   4DB
0B9F:  BSF    0A.3
0BA0:  MOVF   7A,W
0BA1:  BSF    03.5
0BA2:  MOVWF  3F
0BA3:  MOVF   79,W
0BA4:  MOVWF  3E
0BA5:  MOVF   78,W
0BA6:  MOVWF  3D
0BA7:  MOVF   77,W
0BA8:  MOVWF  3C
0BA9:  CLRF   43
0BAA:  CLRF   42
0BAB:  MOVLW  48
0BAC:  MOVWF  41
0BAD:  MOVLW  85
0BAE:  MOVWF  40
0BAF:  BCF    0A.3
0BB0:  BCF    03.5
0BB1:  CALL   5D5
0BB2:  BSF    0A.3
0BB3:  MOVF   7A,W
0BB4:  BSF    03.5
0BB5:  MOVWF  3F
0BB6:  MOVF   79,W
0BB7:  MOVWF  3E
0BB8:  MOVF   78,W
0BB9:  MOVWF  3D
0BBA:  MOVF   77,W
0BBB:  MOVWF  3C
0BBC:  BCF    0A.3
0BBD:  BCF    03.5
0BBE:  CALL   6A1
0BBF:  BSF    0A.3
0BC0:  MOVF   7A,W
0BC1:  MOVWF  65
0BC2:  MOVF   79,W
0BC3:  MOVWF  64
0BC4:  MOVF   78,W
0BC5:  MOVWF  63
0BC6:  MOVF   77,W
0BC7:  MOVWF  62
....................                inttochar(voltage1); 
0BC8:  MOVF   63,W
0BC9:  BSF    03.5
0BCA:  MOVWF  39
0BCB:  BCF    03.5
0BCC:  MOVF   62,W
0BCD:  BSF    03.5
0BCE:  MOVWF  38
0BCF:  MOVF   39,W
0BD0:  MOVWF  3B
0BD1:  MOVF   38,W
0BD2:  MOVWF  3A
0BD3:  BCF    0A.3
0BD4:  BCF    03.5
0BD5:  CALL   6C2
0BD6:  BSF    0A.3
....................                setdp=0; 
0BD7:  CLRF   2D
....................             } 
....................             prevvtg=voltage; 
0BD8:  MOVF   43,W
0BD9:  MOVWF  69
0BDA:  MOVF   42,W
0BDB:  MOVWF  68
....................          } 
....................  
....................          if(dispcnt==1) 
0BDC:  DECFSZ 6E,W
0BDD:  GOTO   3E1
....................          { 
....................             dispcnt=0; 
0BDE:  CLRF   6E
....................             dispvalf=1; 
0BDF:  MOVLW  01
0BE0:  MOVWF  6A
....................          } 
....................       } 
0BE1:  GOTO   30A
....................  
.................... }//main 
....................  
.................... void inttochar1(unsigned int16 parameter) 
.................... { 
0BE2:  SLEEP
....................    if(model=='G' || model=='H') 
*
03D2:  MOVF   37,W
03D3:  SUBLW  47
03D4:  BTFSC  03.2
03D5:  GOTO   3DA
03D6:  MOVF   37,W
03D7:  SUBLW  48
03D8:  BTFSS  03.2
03D9:  GOTO   42D
....................    { 
....................       digit[2]=parameter % 10; 
03DA:  BSF    03.5
03DB:  MOVF   3B,W
03DC:  MOVWF  3D
03DD:  MOVF   3A,W
03DE:  MOVWF  3C
03DF:  CLRF   3F
03E0:  MOVLW  0A
03E1:  MOVWF  3E
03E2:  BCF    03.5
03E3:  CALL   3AB
03E4:  MOVF   77,W
03E5:  MOVWF  30
....................       parameter /= 10; 
03E6:  BSF    03.5
03E7:  MOVF   3B,W
03E8:  MOVWF  3D
03E9:  MOVF   3A,W
03EA:  MOVWF  3C
03EB:  CLRF   3F
03EC:  MOVLW  0A
03ED:  MOVWF  3E
03EE:  BCF    03.5
03EF:  CALL   3AB
03F0:  MOVF   79,W
03F1:  BSF    03.5
03F2:  MOVWF  3B
03F3:  MOVF   78,W
03F4:  MOVWF  3A
....................       digit[1] = parameter % 10; 
03F5:  MOVF   3B,W
03F6:  MOVWF  3D
03F7:  MOVF   3A,W
03F8:  MOVWF  3C
03F9:  CLRF   3F
03FA:  MOVLW  0A
03FB:  MOVWF  3E
03FC:  BCF    03.5
03FD:  CALL   3AB
03FE:  MOVF   77,W
03FF:  MOVWF  2F
....................       parameter /= 10; 
0400:  BSF    03.5
0401:  MOVF   3B,W
0402:  MOVWF  3D
0403:  MOVF   3A,W
0404:  MOVWF  3C
0405:  CLRF   3F
0406:  MOVLW  0A
0407:  MOVWF  3E
0408:  BCF    03.5
0409:  CALL   3AB
040A:  MOVF   79,W
040B:  BSF    03.5
040C:  MOVWF  3B
040D:  MOVF   78,W
040E:  MOVWF  3A
....................       digit[0] = parameter % 10; 
040F:  MOVF   3B,W
0410:  MOVWF  3D
0411:  MOVF   3A,W
0412:  MOVWF  3C
0413:  CLRF   3F
0414:  MOVLW  0A
0415:  MOVWF  3E
0416:  BCF    03.5
0417:  CALL   3AB
0418:  MOVF   77,W
0419:  MOVWF  2E
....................       parameter /= 10; 
041A:  BSF    03.5
041B:  MOVF   3B,W
041C:  MOVWF  3D
041D:  MOVF   3A,W
041E:  MOVWF  3C
041F:  CLRF   3F
0420:  MOVLW  0A
0421:  MOVWF  3E
0422:  BCF    03.5
0423:  CALL   3AB
0424:  MOVF   79,W
0425:  BSF    03.5
0426:  MOVWF  3B
0427:  MOVF   78,W
0428:  MOVWF  3A
....................       digit[3] = parameter; 
0429:  MOVF   3A,W
042A:  BCF    03.5
042B:  MOVWF  31
....................    } 
....................    else 
042C:  GOTO   466
....................    { 
....................       digit[3]=0; 
042D:  CLRF   31
....................       digit[2] = parameter % 10; 
042E:  BSF    03.5
042F:  MOVF   3B,W
0430:  MOVWF  3D
0431:  MOVF   3A,W
0432:  MOVWF  3C
0433:  CLRF   3F
0434:  MOVLW  0A
0435:  MOVWF  3E
0436:  BCF    03.5
0437:  CALL   3AB
0438:  MOVF   77,W
0439:  MOVWF  30
....................       parameter /= 10; 
043A:  BSF    03.5
043B:  MOVF   3B,W
043C:  MOVWF  3D
043D:  MOVF   3A,W
043E:  MOVWF  3C
043F:  CLRF   3F
0440:  MOVLW  0A
0441:  MOVWF  3E
0442:  BCF    03.5
0443:  CALL   3AB
0444:  MOVF   79,W
0445:  BSF    03.5
0446:  MOVWF  3B
0447:  MOVF   78,W
0448:  MOVWF  3A
....................       digit[1] = parameter % 10; 
0449:  MOVF   3B,W
044A:  MOVWF  3D
044B:  MOVF   3A,W
044C:  MOVWF  3C
044D:  CLRF   3F
044E:  MOVLW  0A
044F:  MOVWF  3E
0450:  BCF    03.5
0451:  CALL   3AB
0452:  MOVF   77,W
0453:  MOVWF  2F
....................       parameter /= 10; 
0454:  BSF    03.5
0455:  MOVF   3B,W
0456:  MOVWF  3D
0457:  MOVF   3A,W
0458:  MOVWF  3C
0459:  CLRF   3F
045A:  MOVLW  0A
045B:  MOVWF  3E
045C:  BCF    03.5
045D:  CALL   3AB
045E:  MOVF   79,W
045F:  BSF    03.5
0460:  MOVWF  3B
0461:  MOVF   78,W
0462:  MOVWF  3A
....................       digit[0] = parameter; 
0463:  MOVF   3A,W
0464:  BCF    03.5
0465:  MOVWF  2E
....................    } 
.................... } 
0466:  RETLW  00
....................  
.................... void inttochar2(unsigned char hour,unsigned char min) 
.................... { 
....................       digit[7] = hour % 10; 
....................       hour /= 10;               //Hour 
....................       digit[6] = hour % 10; 
....................       digit[5] = min % 10; 
....................       min /= 10;               //min 
....................       digit[4] =  min % 10; 
.................... } 
.................... void inttochar(unsigned int16 parameter) 
.................... { 
....................       digit[7] = parameter % 10; 
*
06C2:  BSF    03.5
06C3:  MOVF   3B,W
06C4:  MOVWF  3D
06C5:  MOVF   3A,W
06C6:  MOVWF  3C
06C7:  CLRF   3F
06C8:  MOVLW  0A
06C9:  MOVWF  3E
06CA:  BCF    03.5
06CB:  CALL   3AB
06CC:  MOVF   77,W
06CD:  MOVWF  35
....................       parameter /= 10; 
06CE:  BSF    03.5
06CF:  MOVF   3B,W
06D0:  MOVWF  3D
06D1:  MOVF   3A,W
06D2:  MOVWF  3C
06D3:  CLRF   3F
06D4:  MOVLW  0A
06D5:  MOVWF  3E
06D6:  BCF    03.5
06D7:  CALL   3AB
06D8:  MOVF   79,W
06D9:  BSF    03.5
06DA:  MOVWF  3B
06DB:  MOVF   78,W
06DC:  MOVWF  3A
....................       digit[6] = parameter % 10; 
06DD:  MOVF   3B,W
06DE:  MOVWF  3D
06DF:  MOVF   3A,W
06E0:  MOVWF  3C
06E1:  CLRF   3F
06E2:  MOVLW  0A
06E3:  MOVWF  3E
06E4:  BCF    03.5
06E5:  CALL   3AB
06E6:  MOVF   77,W
06E7:  MOVWF  34
....................       parameter /= 10; 
06E8:  BSF    03.5
06E9:  MOVF   3B,W
06EA:  MOVWF  3D
06EB:  MOVF   3A,W
06EC:  MOVWF  3C
06ED:  CLRF   3F
06EE:  MOVLW  0A
06EF:  MOVWF  3E
06F0:  BCF    03.5
06F1:  CALL   3AB
06F2:  MOVF   79,W
06F3:  BSF    03.5
06F4:  MOVWF  3B
06F5:  MOVF   78,W
06F6:  MOVWF  3A
....................       digit[5] = parameter % 10; 
06F7:  MOVF   3B,W
06F8:  MOVWF  3D
06F9:  MOVF   3A,W
06FA:  MOVWF  3C
06FB:  CLRF   3F
06FC:  MOVLW  0A
06FD:  MOVWF  3E
06FE:  BCF    03.5
06FF:  CALL   3AB
0700:  MOVF   77,W
0701:  MOVWF  33
....................       parameter /= 10; 
0702:  BSF    03.5
0703:  MOVF   3B,W
0704:  MOVWF  3D
0705:  MOVF   3A,W
0706:  MOVWF  3C
0707:  CLRF   3F
0708:  MOVLW  0A
0709:  MOVWF  3E
070A:  BCF    03.5
070B:  CALL   3AB
070C:  MOVF   79,W
070D:  BSF    03.5
070E:  MOVWF  3B
070F:  MOVF   78,W
0710:  MOVWF  3A
....................       digit[4] = parameter; 
0711:  MOVF   3A,W
0712:  BCF    03.5
0713:  MOVWF  32
.................... } 
0714:  RETLW  00
....................  
.................... void short_del() 
.................... { 
....................   unsigned int16 i=0,j=0; 
....................   for(i=0;i<100;i++) 
....................   { 
....................      for(j=0;j<30;j++); 
....................   } 
.................... } 
....................  
.................... void initialise() 
.................... { 
....................          setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
0235:  BSF    03.5
0236:  BCF    1F.4
0237:  BCF    1F.5
0238:  MOVLW  00
0239:  MOVWF  1D
....................          setup_comparator(NC_NC_NC_NC); 
023A:  MOVLW  07
023B:  BCF    03.5
023C:  MOVWF  1F
023D:  BSF    03.5
023E:  MOVF   05,W
023F:  MOVLW  06
0240:  MOVWF  77
0241:  DECFSZ 77,F
0242:  GOTO   241
0243:  NOP
0244:  BCF    03.5
0245:  MOVF   1F,W
0246:  BCF    0D.5
....................          setup_adc(ADC_CLOCK_INTERNAL  ); 
0247:  BSF    1F.6
0248:  BSF    1F.7
0249:  BSF    03.5
024A:  BSF    1F.7
024B:  BCF    03.5
024C:  BSF    1F.0
....................          enable_interrupts(GLOBAL); 
024D:  MOVLW  C0
024E:  IORWF  0B,F
....................          enable_interrupts(INT_TIMER1); 
024F:  BSF    03.5
0250:  BSF    0C.0
....................          setup_timer_0(T1_DISABLED); 
0251:  MOVF   01,W
0252:  ANDLW  C0
0253:  MOVWF  01
....................          setup_timer_1(T1_DISABLED); 
0254:  BCF    03.5
0255:  CLRF   10
....................          setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0256:  MOVLW  85
0257:  MOVWF  10
....................          disable_interrupts(INT_EXT); 
0258:  BCF    0B.4
....................          set_timer0(0x0f); 
0259:  MOVLW  0F
025A:  MOVWF  01
....................          set_timer1(0xFC40); 
025B:  MOVLW  FC
025C:  MOVWF  0F
025D:  MOVLW  40
025E:  MOVWF  0E
.................... } 
025F:  BSF    0A.3
0260:  BCF    0A.4
0261:  GOTO   285 (RETURN)
.................... //============================================================================== 
.................... void adc_init() 
.................... { 
....................    setup_adc_ports(sAN0|sAN1|VSS_VDD); 
0262:  BSF    03.5
0263:  BCF    1F.4
0264:  BCF    1F.5
0265:  MOVLW  00
0266:  IORLW  03
0267:  MOVWF  1D
....................      //setup_adc_ports(ALL_ANALOG); 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
0268:  BCF    03.5
0269:  BSF    1F.6
026A:  BSF    1F.7
026B:  BSF    03.5
026C:  BSF    1F.7
026D:  BCF    03.5
026E:  BSF    1F.0
....................    //set_adc_channel(0); 
.................... } 
026F:  BSF    0A.3
0270:  BCF    0A.4
0271:  GOTO   288 (RETURN)
.................... //------------------------------------------------------------------------------ 
....................  
.................... //------------------------------------------------------------------------------ 
.................... void display() 
.................... { 
....................    if(digitcnt==0) 
*
0099:  MOVF   28,F
009A:  BTFSS  03.2
009B:  GOTO   0BD
....................    { 
....................      OUTPUT_BIT(disp8,0); 
009C:  BCF    06.5
009D:  BSF    03.5
009E:  BCF    06.5
....................      //digit[0]=5; 
....................      hexvalue=lookup_table[digit[2]]; 
009F:  BCF    03.5
00A0:  MOVF   30,W
00A1:  CALL   035
00A2:  MOVWF  78
00A3:  MOVWF  29
....................      output_c(hexvalue); 
00A4:  MOVLW  00
00A5:  MOVWF  7E
00A6:  BSF    03.5
00A7:  CLRF   07
00A8:  BCF    03.5
00A9:  MOVF   29,W
00AA:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,1); 
00AB:  BSF    06.0
00AC:  BSF    03.5
00AD:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
00AE:  BCF    03.5
00AF:  BCF    06.1
00B0:  BSF    03.5
00B1:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00B2:  BCF    03.5
00B3:  BCF    06.2
00B4:  BSF    03.5
00B5:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00B6:  BCF    03.5
00B7:  BCF    06.3
00B8:  BSF    03.5
00B9:  BCF    06.3
....................      digitcnt++; 
00BA:  BCF    03.5
00BB:  INCF   28,F
....................    } 
....................    else if(digitcnt==1) 
00BC:  GOTO   22A
00BD:  DECFSZ 28,W
00BE:  GOTO   0E0
....................    { 
....................      OUTPUT_BIT(disp1,0); 
00BF:  BCF    06.0
00C0:  BSF    03.5
00C1:  BCF    06.0
....................       //digit[1]=8; 
....................      hexvalue =lookup_table[digit[1]]; 
00C2:  BCF    03.5
00C3:  MOVF   2F,W
00C4:  CALL   035
00C5:  MOVWF  78
00C6:  MOVWF  29
....................      output_c(hexvalue); 
00C7:  MOVLW  00
00C8:  MOVWF  7E
00C9:  BSF    03.5
00CA:  CLRF   07
00CB:  BCF    03.5
00CC:  MOVF   29,W
00CD:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
00CE:  BCF    06.0
00CF:  BSF    03.5
00D0:  BCF    06.0
....................      OUTPUT_BIT(disp2,1); 
00D1:  BCF    03.5
00D2:  BSF    06.1
00D3:  BSF    03.5
00D4:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
00D5:  BCF    03.5
00D6:  BCF    06.2
00D7:  BSF    03.5
00D8:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
00D9:  BCF    03.5
00DA:  BCF    06.3
00DB:  BSF    03.5
00DC:  BCF    06.3
....................      digitcnt++;// ++; 
00DD:  BCF    03.5
00DE:  INCF   28,F
....................    } 
....................    else if(digitcnt==2) 
00DF:  GOTO   22A
00E0:  MOVF   28,W
00E1:  SUBLW  02
00E2:  BTFSS  03.2
00E3:  GOTO   114
....................    { 
....................      OUTPUT_BIT(disp2,0); 
00E4:  BCF    06.1
00E5:  BSF    03.5
00E6:  BCF    06.1
....................       //digit[2]=7; 
....................      hexvalue = lookup_table[digit[0]]; 
00E7:  BCF    03.5
00E8:  MOVF   2E,W
00E9:  CALL   035
00EA:  MOVWF  78
00EB:  MOVWF  29
....................      output_c(hexvalue); 
00EC:  MOVLW  00
00ED:  MOVWF  7E
00EE:  BSF    03.5
00EF:  CLRF   07
00F0:  BCF    03.5
00F1:  MOVF   29,W
00F2:  MOVWF  07
....................       if(setdp2==1) 
00F3:  DECFSZ 6D,W
00F4:  GOTO   0FC
....................         output_bit(segmentdp,1); 
00F5:  BSF    07.7
00F6:  BCF    7E.7
00F7:  MOVF   7E,W
00F8:  BSF    03.5
00F9:  MOVWF  07
....................      else 
00FA:  GOTO   101
00FB:  BCF    03.5
....................         output_bit(segmentdp,0); 
00FC:  BCF    07.7
00FD:  BCF    7E.7
00FE:  MOVF   7E,W
00FF:  BSF    03.5
0100:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0101:  BCF    03.5
0102:  BCF    06.0
0103:  BSF    03.5
0104:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
0105:  BCF    03.5
0106:  BCF    06.1
0107:  BSF    03.5
0108:  BCF    06.1
....................      OUTPUT_BIT(disp3,1); 
0109:  BCF    03.5
010A:  BSF    06.2
010B:  BSF    03.5
010C:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
010D:  BCF    03.5
010E:  BCF    06.3
010F:  BSF    03.5
0110:  BCF    06.3
....................      digitcnt++; 
0111:  BCF    03.5
0112:  INCF   28,F
....................    } 
....................    else if(digitcnt==3) 
0113:  GOTO   22A
0114:  MOVF   28,W
0115:  SUBLW  03
0116:  BTFSS  03.2
0117:  GOTO   139
....................    { 
....................      OUTPUT_BIT(disp3,0); 
0118:  BCF    06.2
0119:  BSF    03.5
011A:  BCF    06.2
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[3]]; 
011B:  BCF    03.5
011C:  MOVF   31,W
011D:  CALL   035
011E:  MOVWF  78
011F:  MOVWF  29
....................      output_c(hexvalue); 
0120:  MOVLW  00
0121:  MOVWF  7E
0122:  BSF    03.5
0123:  CLRF   07
0124:  BCF    03.5
0125:  MOVF   29,W
0126:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0127:  BCF    06.0
0128:  BSF    03.5
0129:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
012A:  BCF    03.5
012B:  BCF    06.1
012C:  BSF    03.5
012D:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
012E:  BCF    03.5
012F:  BCF    06.2
0130:  BSF    03.5
0131:  BCF    06.2
....................      OUTPUT_BIT(disp4,1); 
0132:  BCF    03.5
0133:  BSF    06.3
0134:  BSF    03.5
0135:  BCF    06.3
....................      digitcnt++; 
0136:  BCF    03.5
0137:  INCF   28,F
....................    } 
....................    else if(digitcnt==4) 
0138:  GOTO   22A
0139:  MOVF   28,W
013A:  SUBLW  04
013B:  BTFSS  03.2
013C:  GOTO   16E
....................    { 
....................      OUTPUT_BIT(disp4,0); 
013D:  BCF    06.3
013E:  BSF    03.5
013F:  BCF    06.3
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[4]]; 
0140:  BCF    03.5
0141:  MOVF   32,W
0142:  CALL   035
0143:  MOVWF  78
0144:  MOVWF  29
....................      output_c(hexvalue); 
0145:  MOVLW  00
0146:  MOVWF  7E
0147:  BSF    03.5
0148:  CLRF   07
0149:  BCF    03.5
014A:  MOVF   29,W
014B:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
014C:  BCF    06.0
014D:  BSF    03.5
014E:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
014F:  BCF    03.5
0150:  BCF    06.1
0151:  BSF    03.5
0152:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0153:  BCF    03.5
0154:  BCF    06.2
0155:  BSF    03.5
0156:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0157:  BCF    03.5
0158:  BCF    06.3
0159:  BSF    03.5
015A:  BCF    06.3
....................      OUTPUT_BIT(disp5,1); 
015B:  BCF    03.5
015C:  BSF    05.4
015D:  BSF    03.5
015E:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
015F:  BCF    03.5
0160:  BCF    05.7
0161:  BSF    03.5
0162:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
0163:  BCF    03.5
0164:  BCF    05.6
0165:  BSF    03.5
0166:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
0167:  BCF    03.5
0168:  BCF    06.5
0169:  BSF    03.5
016A:  BCF    06.5
....................      digitcnt++; 
016B:  BCF    03.5
016C:  INCF   28,F
....................    } 
....................    else if(digitcnt==5) 
016D:  GOTO   22A
016E:  MOVF   28,W
016F:  SUBLW  05
0170:  BTFSS  03.2
0171:  GOTO   1B2
....................    { 
....................      OUTPUT_BIT(disp5,0); 
0172:  BCF    05.4
0173:  BSF    03.5
0174:  BCF    05.4
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[5]]; 
0175:  BCF    03.5
0176:  MOVF   33,W
0177:  CALL   035
0178:  MOVWF  78
0179:  MOVWF  29
....................      output_c(hexvalue); 
017A:  MOVLW  00
017B:  MOVWF  7E
017C:  BSF    03.5
017D:  CLRF   07
017E:  BCF    03.5
017F:  MOVF   29,W
0180:  MOVWF  07
....................      if(setdp==1) 
0181:  DECFSZ 2D,W
0182:  GOTO   18A
....................         output_bit(segmentdp,1); 
0183:  BSF    07.7
0184:  BCF    7E.7
0185:  MOVF   7E,W
0186:  BSF    03.5
0187:  MOVWF  07
....................      else 
0188:  GOTO   18F
0189:  BCF    03.5
....................         output_bit(segmentdp,0); 
018A:  BCF    07.7
018B:  BCF    7E.7
018C:  MOVF   7E,W
018D:  BSF    03.5
018E:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
018F:  BCF    03.5
0190:  BCF    06.0
0191:  BSF    03.5
0192:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
0193:  BCF    03.5
0194:  BCF    06.1
0195:  BSF    03.5
0196:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0197:  BCF    03.5
0198:  BCF    06.2
0199:  BSF    03.5
019A:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
019B:  BCF    03.5
019C:  BCF    06.3
019D:  BSF    03.5
019E:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
019F:  BCF    03.5
01A0:  BCF    05.4
01A1:  BSF    03.5
01A2:  BCF    05.4
....................      OUTPUT_BIT(disp6,1); 
01A3:  BCF    03.5
01A4:  BSF    05.7
01A5:  BSF    03.5
01A6:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
01A7:  BCF    03.5
01A8:  BCF    05.6
01A9:  BSF    03.5
01AA:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
01AB:  BCF    03.5
01AC:  BCF    06.5
01AD:  BSF    03.5
01AE:  BCF    06.5
....................      digitcnt++; 
01AF:  BCF    03.5
01B0:  INCF   28,F
....................    } 
....................    else if(digitcnt==6) 
01B1:  GOTO   22A
01B2:  MOVF   28,W
01B3:  SUBLW  06
01B4:  BTFSS  03.2
01B5:  GOTO   1F6
....................    { 
....................      OUTPUT_BIT(disp6,0); 
01B6:  BCF    05.7
01B7:  BSF    03.5
01B8:  BCF    05.7
....................      //digit[3]=6; 
....................      hexvalue = lookup_table1[digit[6]]; 
01B9:  BCF    03.5
01BA:  MOVF   34,W
01BB:  CALL   061
01BC:  MOVWF  78
01BD:  MOVWF  29
....................      output_c(hexvalue); 
01BE:  MOVLW  00
01BF:  MOVWF  7E
01C0:  BSF    03.5
01C1:  CLRF   07
01C2:  BCF    03.5
01C3:  MOVF   29,W
01C4:  MOVWF  07
....................      if(setdp1==1) 
01C5:  DECFSZ 2C,W
01C6:  GOTO   1CE
....................         output_bit(segmentg,1); 
01C7:  BSF    07.6
01C8:  BCF    7E.6
01C9:  MOVF   7E,W
01CA:  BSF    03.5
01CB:  MOVWF  07
....................      else 
01CC:  GOTO   1D3
01CD:  BCF    03.5
....................         output_bit(segmentg,0); 
01CE:  BCF    07.6
01CF:  BCF    7E.6
01D0:  MOVF   7E,W
01D1:  BSF    03.5
01D2:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
01D3:  BCF    03.5
01D4:  BCF    06.0
01D5:  BSF    03.5
01D6:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
01D7:  BCF    03.5
01D8:  BCF    06.1
01D9:  BSF    03.5
01DA:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
01DB:  BCF    03.5
01DC:  BCF    06.2
01DD:  BSF    03.5
01DE:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
01DF:  BCF    03.5
01E0:  BCF    06.3
01E1:  BSF    03.5
01E2:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
01E3:  BCF    03.5
01E4:  BCF    05.4
01E5:  BSF    03.5
01E6:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
01E7:  BCF    03.5
01E8:  BCF    05.7
01E9:  BSF    03.5
01EA:  BCF    05.7
....................      OUTPUT_BIT(disp7,1); 
01EB:  BCF    03.5
01EC:  BSF    05.6
01ED:  BSF    03.5
01EE:  BCF    05.6
....................      OUTPUT_BIT(disp8,0); 
01EF:  BCF    03.5
01F0:  BCF    06.5
01F1:  BSF    03.5
01F2:  BCF    06.5
....................      digitcnt++; 
01F3:  BCF    03.5
01F4:  INCF   28,F
....................    } 
....................     else if(digitcnt==7) 
01F5:  GOTO   22A
01F6:  MOVF   28,W
01F7:  SUBLW  07
01F8:  BTFSS  03.2
01F9:  GOTO   22A
....................    { 
....................      OUTPUT_BIT(disp7,0); 
01FA:  BCF    05.6
01FB:  BSF    03.5
01FC:  BCF    05.6
....................      //digit[3]=6; 
....................      hexvalue = lookup_table[digit[7]]; 
01FD:  BCF    03.5
01FE:  MOVF   35,W
01FF:  CALL   035
0200:  MOVWF  78
0201:  MOVWF  29
....................      output_c(hexvalue); 
0202:  MOVLW  00
0203:  MOVWF  7E
0204:  BSF    03.5
0205:  CLRF   07
0206:  BCF    03.5
0207:  MOVF   29,W
0208:  MOVWF  07
....................      //set_tris_b(0x01); 
....................      OUTPUT_BIT(disp1,0); 
0209:  BCF    06.0
020A:  BSF    03.5
020B:  BCF    06.0
....................      OUTPUT_BIT(disp2,0); 
020C:  BCF    03.5
020D:  BCF    06.1
020E:  BSF    03.5
020F:  BCF    06.1
....................      OUTPUT_BIT(disp3,0); 
0210:  BCF    03.5
0211:  BCF    06.2
0212:  BSF    03.5
0213:  BCF    06.2
....................      OUTPUT_BIT(disp4,0); 
0214:  BCF    03.5
0215:  BCF    06.3
0216:  BSF    03.5
0217:  BCF    06.3
....................      OUTPUT_BIT(disp5,0); 
0218:  BCF    03.5
0219:  BCF    05.4
021A:  BSF    03.5
021B:  BCF    05.4
....................      OUTPUT_BIT(disp6,0); 
021C:  BCF    03.5
021D:  BCF    05.7
021E:  BSF    03.5
021F:  BCF    05.7
....................      OUTPUT_BIT(disp7,0); 
0220:  BCF    03.5
0221:  BCF    05.6
0222:  BSF    03.5
0223:  BCF    05.6
....................      OUTPUT_BIT(disp8,1); 
0224:  BCF    03.5
0225:  BSF    06.5
0226:  BSF    03.5
0227:  BCF    06.5
....................      digitcnt=0; 
0228:  BCF    03.5
0229:  CLRF   28
....................    } 
.................... } 
....................  
.................... void readadc() 
.................... { 
....................     static unsigned int32 totalcur=0,totalvtg=0,totalref2=0;// 
*
0A64:  CLRF   28
0A65:  CLRF   29
0A66:  CLRF   2A
0A67:  CLRF   2B
0A68:  CLRF   2C
0A69:  CLRF   2D
0A6A:  CLRF   2E
0A6B:  CLRF   2F
0A6C:  CLRF   30
0A6D:  CLRF   31
0A6E:  CLRF   32
0A6F:  CLRF   33
....................     static unsigned int16 adccntr=0,adccntr1=0; 
0A70:  CLRF   34
0A71:  CLRF   35
0A72:  CLRF   36
0A73:  CLRF   37
....................  
....................     set_adc_channel(0);          //current 
*
0800:  MOVLW  00
0801:  MOVWF  78
0802:  MOVF   1F,W
0803:  ANDLW  C3
0804:  IORWF  78,W
0805:  MOVWF  1F
....................     delay_ms(1); 
0806:  MOVLW  01
0807:  BSF    03.5
0808:  MOVWF  39
0809:  BCF    0A.3
080A:  BCF    03.5
080B:  CALL   2D9
080C:  BSF    0A.3
....................     value=read_adc(); 
080D:  BSF    1F.1
080E:  BTFSC  1F.1
080F:  GOTO   00E
0810:  BSF    03.5
0811:  MOVF   1E,W
0812:  BCF    03.5
0813:  MOVWF  3E
0814:  MOVF   1E,W
0815:  MOVWF  3F
0816:  CLRF   40
0817:  CLRF   41
....................     totalcur= totalcur + value; 
0818:  MOVF   3E,W
0819:  BSF    03.5
081A:  ADDWF  28,F
081B:  BCF    03.5
081C:  MOVF   3F,W
081D:  BTFSC  03.0
081E:  INCFSZ 3F,W
081F:  GOTO   021
0820:  GOTO   024
0821:  BSF    03.5
0822:  ADDWF  29,F
0823:  BCF    03.5
0824:  MOVF   40,W
0825:  BTFSC  03.0
0826:  INCFSZ 40,W
0827:  GOTO   029
0828:  GOTO   02C
0829:  BSF    03.5
082A:  ADDWF  2A,F
082B:  BCF    03.5
082C:  MOVF   41,W
082D:  BTFSC  03.0
082E:  INCFSZ 41,W
082F:  GOTO   031
0830:  GOTO   034
0831:  BSF    03.5
0832:  ADDWF  2B,F
0833:  BCF    03.5
....................     set_adc_channel(1);          //voltage 
0834:  MOVLW  04
0835:  MOVWF  78
0836:  MOVF   1F,W
0837:  ANDLW  C3
0838:  IORWF  78,W
0839:  MOVWF  1F
....................     delay_ms(1); 
083A:  MOVLW  01
083B:  BSF    03.5
083C:  MOVWF  39
083D:  BCF    0A.3
083E:  BCF    03.5
083F:  CALL   2D9
0840:  BSF    0A.3
....................     value=read_adc(); 
0841:  BSF    1F.1
0842:  BTFSC  1F.1
0843:  GOTO   042
0844:  BSF    03.5
0845:  MOVF   1E,W
0846:  BCF    03.5
0847:  MOVWF  3E
0848:  MOVF   1E,W
0849:  MOVWF  3F
084A:  CLRF   40
084B:  CLRF   41
....................     totalvtg= totalvtg + value; 
084C:  MOVF   3E,W
084D:  BSF    03.5
084E:  ADDWF  2C,F
084F:  BCF    03.5
0850:  MOVF   3F,W
0851:  BTFSC  03.0
0852:  INCFSZ 3F,W
0853:  GOTO   055
0854:  GOTO   058
0855:  BSF    03.5
0856:  ADDWF  2D,F
0857:  BCF    03.5
0858:  MOVF   40,W
0859:  BTFSC  03.0
085A:  INCFSZ 40,W
085B:  GOTO   05D
085C:  GOTO   060
085D:  BSF    03.5
085E:  ADDWF  2E,F
085F:  BCF    03.5
0860:  MOVF   41,W
0861:  BTFSC  03.0
0862:  INCFSZ 41,W
0863:  GOTO   065
0864:  GOTO   068
0865:  BSF    03.5
0866:  ADDWF  2F,F
0867:  BCF    03.5
....................  
....................     set_adc_channel(4); 
0868:  MOVLW  10
0869:  MOVWF  78
086A:  MOVF   1F,W
086B:  ANDLW  C3
086C:  IORWF  78,W
086D:  MOVWF  1F
....................    // delay_ms(1); 
....................     delay_us(100); 
086E:  MOVLW  42
086F:  MOVWF  77
0870:  DECFSZ 77,F
0871:  GOTO   070
0872:  NOP
....................     value=read_adc(); 
0873:  BSF    1F.1
0874:  BTFSC  1F.1
0875:  GOTO   074
0876:  BSF    03.5
0877:  MOVF   1E,W
0878:  BCF    03.5
0879:  MOVWF  3E
087A:  MOVF   1E,W
087B:  MOVWF  3F
087C:  CLRF   40
087D:  CLRF   41
....................     totalref2= totalref2 + value; 
087E:  MOVF   3E,W
087F:  BSF    03.5
0880:  ADDWF  30,F
0881:  BCF    03.5
0882:  MOVF   3F,W
0883:  BTFSC  03.0
0884:  INCFSZ 3F,W
0885:  GOTO   087
0886:  GOTO   08A
0887:  BSF    03.5
0888:  ADDWF  31,F
0889:  BCF    03.5
088A:  MOVF   40,W
088B:  BTFSC  03.0
088C:  INCFSZ 40,W
088D:  GOTO   08F
088E:  GOTO   092
088F:  BSF    03.5
0890:  ADDWF  32,F
0891:  BCF    03.5
0892:  MOVF   41,W
0893:  BTFSC  03.0
0894:  INCFSZ 41,W
0895:  GOTO   097
0896:  GOTO   09A
0897:  BSF    03.5
0898:  ADDWF  33,F
0899:  BCF    03.5
....................  
....................     adccntr++; 
089A:  BSF    03.5
089B:  INCF   34,F
089C:  BTFSC  03.2
089D:  INCF   35,F
....................     adccntr1++; 
089E:  INCF   36,F
089F:  BTFSC  03.2
08A0:  INCF   37,F
....................  
....................     if(adccntr>=adcavg)//256)//128) 
08A1:  MOVF   35,W
08A2:  SUBLW  00
08A3:  BTFSC  03.0
08A4:  GOTO   1F2
....................     { 
....................          cur=totalcur>>leftshift;//8; 
08A5:  MOVF   29,W
08A6:  BCF    03.5
08A7:  MOVWF  46
08A8:  BSF    03.5
08A9:  MOVF   2A,W
08AA:  BCF    03.5
08AB:  MOVWF  47
08AC:  BSF    03.5
08AD:  MOVF   2B,W
08AE:  BCF    03.5
08AF:  MOVWF  48
08B0:  CLRF   49
....................         // if(cur>=300) 
....................        //    calcur=(cur*maxshunt)/560;   //575 
....................        //  else 
....................             calcur=(cur*maxshunt)/maxadc; 
08B1:  MOVF   49,W
08B2:  BSF    03.5
08B3:  MOVWF  3B
08B4:  BCF    03.5
08B5:  MOVF   48,W
08B6:  BSF    03.5
08B7:  MOVWF  3A
08B8:  BCF    03.5
08B9:  MOVF   47,W
08BA:  BSF    03.5
08BB:  MOVWF  39
08BC:  BCF    03.5
08BD:  MOVF   46,W
08BE:  BSF    03.5
08BF:  MOVWF  38
08C0:  BCF    03.5
08C1:  MOVF   61,W
08C2:  BSF    03.5
08C3:  MOVWF  3F
08C4:  BCF    03.5
08C5:  MOVF   60,W
08C6:  BSF    03.5
08C7:  MOVWF  3E
08C8:  BCF    03.5
08C9:  MOVF   5F,W
08CA:  BSF    03.5
08CB:  MOVWF  3D
08CC:  BCF    03.5
08CD:  MOVF   5E,W
08CE:  BSF    03.5
08CF:  MOVWF  3C
08D0:  BCF    0A.3
08D1:  BCF    03.5
08D2:  GOTO   467
08D3:  BSF    0A.3
08D4:  MOVF   7A,W
08D5:  BSF    03.5
08D6:  MOVWF  3B
08D7:  MOVF   79,W
08D8:  MOVWF  3A
08D9:  MOVF   78,W
08DA:  MOVWF  39
08DB:  MOVF   77,W
08DC:  MOVWF  38
08DD:  MOVF   3B,W
08DE:  MOVWF  3F
08DF:  MOVF   3A,W
08E0:  MOVWF  3E
08E1:  MOVF   39,W
08E2:  MOVWF  3D
08E3:  MOVF   38,W
08E4:  MOVWF  3C
08E5:  BCF    03.5
08E6:  MOVF   5D,W
08E7:  BSF    03.5
08E8:  MOVWF  43
08E9:  BCF    03.5
08EA:  MOVF   5C,W
08EB:  BSF    03.5
08EC:  MOVWF  42
08ED:  BCF    03.5
08EE:  MOVF   5B,W
08EF:  BSF    03.5
08F0:  MOVWF  41
08F1:  BCF    03.5
08F2:  MOVF   5A,W
08F3:  BSF    03.5
08F4:  MOVWF  40
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  GOTO   495
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  MOVWF  59
08FB:  MOVF   79,W
08FC:  MOVWF  58
08FD:  MOVF   78,W
08FE:  MOVWF  57
08FF:  MOVF   77,W
0900:  MOVWF  56
....................  
....................          //calcur=cur; 
....................  
.................... /*         if(cur>=0 && cur<=65)                              //10 to 50AMP 
....................             calcur=(((cur*0.77))+10); 
....................  
....................          else if(cur>65 && cur<=136)                         //>50 to 100AMP 
....................            calcur=(((cur-65)*0.70)+50); 
....................  
....................          else if(cur>136 && cur<=214)                         //>100 to 150AMP 
....................            calcur=(((cur-136)*0.641)+100); 
....................  
....................          else if(cur>214 && cur<=286)                         //>150 to 200AMP 
....................            calcur=(((cur-214)*0.704)+150); 
....................  
....................          else if(cur>286 && cur<=343)                        //>200 to 250AMP 
....................            calcur=(((cur-286)*0.862)+200); 
....................  
....................          else if(cur>343 && cur<=394)                        //>250 to 300AMP 
....................            calcur=(((cur-343)*0.961)+250); 
....................          else 
....................           calcur=(cur*maxshunt)/maxadc; 
....................          */ 
....................  
....................  
....................  
....................  
....................          if(offsetokf==0)                        //executes once on power ON to calculate offset 
0901:  MOVF   36,F
0902:  BTFSS  03.2
0903:  GOTO   12E
....................          { 
....................             offcnt++; 
0904:  MOVLW  01
0905:  ADDWF  52,F
0906:  BTFSC  03.0
0907:  INCF   53,F
0908:  BTFSC  03.2
0909:  INCF   54,F
090A:  BTFSC  03.2
090B:  INCF   55,F
....................             if(offcnt==3)     //for reading offset 
090C:  MOVF   52,W
090D:  SUBLW  03
090E:  BTFSS  03.2
090F:  GOTO   128
0910:  MOVF   53,F
0911:  BTFSS  03.2
0912:  GOTO   128
0913:  MOVF   54,F
0914:  BTFSS  03.2
0915:  GOTO   128
0916:  MOVF   55,F
0917:  BTFSS  03.2
0918:  GOTO   128
....................             { 
....................                offsetokf=1; 
0919:  MOVLW  01
091A:  MOVWF  36
....................                offcnt=0; 
091B:  CLRF   55
091C:  CLRF   54
091D:  CLRF   53
091E:  CLRF   52
....................                curoffset=calcur; 
091F:  MOVF   59,W
0920:  MOVWF  51
0921:  MOVF   58,W
0922:  MOVWF  50
0923:  MOVF   57,W
0924:  MOVWF  4F
0925:  MOVF   56,W
0926:  MOVWF  4E
....................             } 
....................             else 
0927:  GOTO   12D
....................             { 
....................                 current=1;      //curoffset;   //current=1 changed by sayali 18.08.18 
0928:  CLRF   3D
0929:  CLRF   3C
092A:  CLRF   3B
092B:  MOVLW  01
092C:  MOVWF  3A
....................             } 
....................           } 
....................          else 
092D:  GOTO   18E
....................          { 
....................             if(calcur >= curoffset) 
092E:  MOVF   51,W
092F:  SUBWF  59,W
0930:  BTFSS  03.0
0931:  GOTO   188
0932:  BTFSS  03.2
0933:  GOTO   144
0934:  MOVF   50,W
0935:  SUBWF  58,W
0936:  BTFSS  03.0
0937:  GOTO   188
0938:  BTFSS  03.2
0939:  GOTO   144
093A:  MOVF   4F,W
093B:  SUBWF  57,W
093C:  BTFSS  03.0
093D:  GOTO   188
093E:  BTFSS  03.2
093F:  GOTO   144
0940:  MOVF   4E,W
0941:  SUBWF  56,W
0942:  BTFSS  03.0
0943:  GOTO   188
....................             { 
....................                current=calcur-curoffset; 
0944:  MOVF   4E,W
0945:  SUBWF  56,W
0946:  MOVWF  3A
0947:  MOVF   57,W
0948:  MOVWF  3B
0949:  MOVF   4F,W
094A:  BTFSS  03.0
094B:  INCFSZ 4F,W
094C:  SUBWF  3B,F
094D:  MOVF   58,W
094E:  MOVWF  3C
094F:  MOVF   50,W
0950:  BTFSS  03.0
0951:  INCFSZ 50,W
0952:  SUBWF  3C,F
0953:  MOVF   59,W
0954:  MOVWF  3D
0955:  MOVF   51,W
0956:  BTFSS  03.0
0957:  INCFSZ 51,W
0958:  SUBWF  3D,F
....................                if(current >= 10.0) 
0959:  MOVF   3D,W
095A:  BSF    03.5
095B:  MOVWF  3B
095C:  BCF    03.5
095D:  MOVF   3C,W
095E:  BSF    03.5
095F:  MOVWF  3A
0960:  BCF    03.5
0961:  MOVF   3B,W
0962:  BSF    03.5
0963:  MOVWF  39
0964:  BCF    03.5
0965:  MOVF   3A,W
0966:  BSF    03.5
0967:  MOVWF  38
0968:  BCF    0A.3
0969:  BCF    03.5
096A:  CALL   4DB
096B:  BSF    0A.3
096C:  BSF    03.5
096D:  CLRF   3B
096E:  CLRF   3A
096F:  MOVLW  20
0970:  MOVWF  39
0971:  MOVLW  82
0972:  MOVWF  38
0973:  MOVF   7A,W
0974:  MOVWF  3F
0975:  MOVF   79,W
0976:  MOVWF  3E
0977:  MOVF   78,W
0978:  MOVWF  3D
0979:  MOVF   77,W
097A:  MOVWF  3C
097B:  BCF    0A.3
097C:  BCF    03.5
097D:  GOTO   4F8
097E:  BSF    0A.3
097F:  BTFSC  03.0
0980:  GOTO   183
0981:  BTFSS  03.2
0982:  GOTO   186
....................                { 
....................                   weldon=1;                  //welding started... 
0983:  MOVLW  01
0984:  MOVWF  39
....................                } 
....................                else 
0985:  GOTO   187
....................                { 
....................                   weldon=0; 
0986:  CLRF   39
....................                } 
....................             } 
....................             else 
0987:  GOTO   18E
....................             { 
....................                current=1;  //current=1 changed   16.08.18 
0988:  CLRF   3D
0989:  CLRF   3C
098A:  CLRF   3B
098B:  MOVLW  01
098C:  MOVWF  3A
....................                weldon=0; 
098D:  CLRF   39
....................             } 
....................          } 
....................  
....................       vtg=totalvtg>>leftshift;//8; 
098E:  BSF    03.5
098F:  MOVF   2D,W
0990:  BCF    03.5
0991:  MOVWF  66
0992:  BSF    03.5
0993:  MOVF   2E,W
0994:  BCF    03.5
0995:  MOVWF  67
....................       voltage=(vtg*1000.0)/62.5;//17.0;//3.3=97V fvtg;//decimal count 
0996:  MOVF   67,W
0997:  BSF    03.5
0998:  MOVWF  39
0999:  BCF    03.5
099A:  MOVF   66,W
099B:  BSF    03.5
099C:  MOVWF  38
099D:  BCF    0A.3
099E:  BCF    03.5
099F:  GOTO   53B
09A0:  BSF    0A.3
09A1:  MOVF   7A,W
09A2:  BSF    03.5
09A3:  MOVWF  3B
09A4:  MOVF   79,W
09A5:  MOVWF  3A
09A6:  MOVF   78,W
09A7:  MOVWF  39
09A8:  MOVF   77,W
09A9:  MOVWF  38
09AA:  CLRF   3F
09AB:  CLRF   3E
09AC:  MOVLW  7A
09AD:  MOVWF  3D
09AE:  MOVLW  88
09AF:  MOVWF  3C
09B0:  BCF    0A.3
09B1:  BCF    03.5
09B2:  GOTO   55C
09B3:  BSF    0A.3
09B4:  MOVF   77,W
09B5:  BSF    03.5
09B6:  MOVWF  38
09B7:  MOVF   78,W
09B8:  MOVWF  39
09B9:  MOVF   79,W
09BA:  MOVWF  3A
09BB:  MOVF   7A,W
09BC:  MOVWF  3B
09BD:  MOVWF  3F
09BE:  MOVF   3A,W
09BF:  MOVWF  3E
09C0:  MOVF   39,W
09C1:  MOVWF  3D
09C2:  MOVF   38,W
09C3:  MOVWF  3C
09C4:  CLRF   43
09C5:  CLRF   42
09C6:  MOVLW  7A
09C7:  MOVWF  41
09C8:  MOVLW  84
09C9:  MOVWF  40
09CA:  BCF    0A.3
09CB:  BCF    03.5
09CC:  CALL   5D5
09CD:  BSF    0A.3
09CE:  MOVF   7A,W
09CF:  BSF    03.5
09D0:  MOVWF  3F
09D1:  MOVF   79,W
09D2:  MOVWF  3E
09D3:  MOVF   78,W
09D4:  MOVWF  3D
09D5:  MOVF   77,W
09D6:  MOVWF  3C
09D7:  BCF    0A.3
09D8:  BCF    03.5
09D9:  CALL   6A1
09DA:  BSF    0A.3
09DB:  MOVF   7A,W
09DC:  MOVWF  45
09DD:  MOVF   79,W
09DE:  MOVWF  44
09DF:  MOVF   78,W
09E0:  MOVWF  43
09E1:  MOVF   77,W
09E2:  MOVWF  42
....................       totalvtg=0; 
09E3:  BSF    03.5
09E4:  CLRF   2F
09E5:  CLRF   2E
09E6:  CLRF   2D
09E7:  CLRF   2C
....................       totalcur=0; 
09E8:  CLRF   2B
09E9:  CLRF   2A
09EA:  CLRF   29
09EB:  CLRF   28
....................       adccntr=0; 
09EC:  CLRF   35
09ED:  CLRF   34
....................  
....................     //**  ref2=totalref2>>leftshift; //8; 
....................     //**  ref2=(ref2*4.88)/10;// 3.02V =600Amp  POt Output=4.347V 
....................  
....................  
....................      /* if(ref2<148) 
....................          ref2=((ref2*18.88)+100)/10; 
....................       else 
....................      //    ref2=((ref2*20)+100)/10;      //18.4375 =4.456   //20==4.242 // tp6 =2.95 
....................       */ 
....................       totalref2=0; 
09EE:  CLRF   33
09EF:  CLRF   32
09F0:  CLRF   31
09F1:  CLRF   30
....................  
....................      } 
.................... } 
09F2:  BCF    03.5
09F3:  BSF    0A.3
09F4:  BCF    0A.4
09F5:  GOTO   30D (RETURN)
....................  
....................  
.................... unsigned char readswitch() 
.................... { 
....................    unsigned char data=0,data1=0; 
*
0272:  BSF    03.5
0273:  CLRF   38
0274:  CLRF   39
....................    data=input_c(); 
0275:  MOVLW  FF
0276:  MOVWF  7E
0277:  MOVWF  07
0278:  BCF    03.5
0279:  MOVF   07,W
027A:  BSF    03.5
027B:  MOVWF  38
....................    data=data & 0x07; 
027C:  MOVLW  07
027D:  ANDWF  38,F
....................   // data=data>>1; 
....................    delay_us(200); 
027E:  MOVLW  85
027F:  MOVWF  77
0280:  DECFSZ 77,F
0281:  GOTO   280
....................    data1=input_c(); 
0282:  MOVLW  FF
0283:  MOVWF  7E
0284:  MOVWF  07
0285:  BCF    03.5
0286:  MOVF   07,W
0287:  BSF    03.5
0288:  MOVWF  39
....................    data1=data1 & 0x07; 
0289:  MOVLW  07
028A:  ANDWF  39,F
....................    //data1=data1>>1; 
....................  
....................    if(data==data1) 
028B:  MOVF   39,W
028C:  SUBWF  38,W
028D:  BTFSS  03.2
028E:  GOTO   2D3
....................    { 
....................       if(data==0x00) 
028F:  MOVF   38,F
0290:  BTFSS  03.2
0291:  GOTO   297
....................       {range='A';} 
0292:  MOVLW  41
0293:  BCF    03.5
0294:  MOVWF  38
....................       else if(data==0x01) 
0295:  GOTO   2D2
0296:  BSF    03.5
0297:  DECFSZ 38,W
0298:  GOTO   29E
....................       {range='B';} 
0299:  MOVLW  42
029A:  BCF    03.5
029B:  MOVWF  38
....................       else if(data==0x02) 
029C:  GOTO   2D2
029D:  BSF    03.5
029E:  MOVF   38,W
029F:  SUBLW  02
02A0:  BTFSS  03.2
02A1:  GOTO   2A7
....................       {range='C';} 
02A2:  MOVLW  43
02A3:  BCF    03.5
02A4:  MOVWF  38
....................       else if(data==0x03) 
02A5:  GOTO   2D2
02A6:  BSF    03.5
02A7:  MOVF   38,W
02A8:  SUBLW  03
02A9:  BTFSS  03.2
02AA:  GOTO   2B0
....................       {range='D';} 
02AB:  MOVLW  44
02AC:  BCF    03.5
02AD:  MOVWF  38
....................       else if(data==0x04) 
02AE:  GOTO   2D2
02AF:  BSF    03.5
02B0:  MOVF   38,W
02B1:  SUBLW  04
02B2:  BTFSS  03.2
02B3:  GOTO   2B9
....................       {range='E';} 
02B4:  MOVLW  45
02B5:  BCF    03.5
02B6:  MOVWF  38
....................       else if(data==0x05) 
02B7:  GOTO   2D2
02B8:  BSF    03.5
02B9:  MOVF   38,W
02BA:  SUBLW  05
02BB:  BTFSS  03.2
02BC:  GOTO   2C2
....................       {range='F';} 
02BD:  MOVLW  46
02BE:  BCF    03.5
02BF:  MOVWF  38
....................       else if(data==0x06) 
02C0:  GOTO   2D2
02C1:  BSF    03.5
02C2:  MOVF   38,W
02C3:  SUBLW  06
02C4:  BTFSS  03.2
02C5:  GOTO   2CB
....................       {range='G';} 
02C6:  MOVLW  47
02C7:  BCF    03.5
02C8:  MOVWF  38
....................       else if(data==0x07) 
02C9:  GOTO   2D2
02CA:  BSF    03.5
02CB:  MOVF   38,W
02CC:  SUBLW  07
02CD:  BTFSS  03.2
02CE:  GOTO   2D3
....................       {range='H';} 
02CF:  MOVLW  48
02D0:  BCF    03.5
02D1:  MOVWF  38
02D2:  BSF    03.5
....................    } 
....................  return(range); 
02D3:  BCF    03.5
02D4:  MOVF   38,W
02D5:  MOVWF  78
.................... } 
02D6:  BSF    0A.3
02D7:  BCF    0A.4
02D8:  GOTO   28B (RETURN)
....................  
....................  
.................... void debounce() 
.................... { 
....................     for(jj=0;jj<255;jj++); 
.................... } 
....................  
....................  
.................... void dispmodel() 
.................... { 
....................    if(model=='A') 
*
02ED:  MOVF   37,W
02EE:  SUBLW  41
02EF:  BTFSS  03.2
02F0:  GOTO   305
....................    { 
....................      // digit[0]=0X02; //'2'- 0x30;; 
....................       //digit[1]=0X05; //'5'- 0x30; 
....................      // digit[2]=0X00; //'0'- 0x30; 
....................       //digit[3]=0x0D; //'C'- 0x30; 
....................       digit[4]=0X00; 
02F1:  CLRF   32
....................       digit[5]=0X05; 
02F2:  MOVLW  05
02F3:  MOVWF  33
....................       digit[6]=0X00; 
02F4:  CLRF   34
....................       digit[7]=0X00; 
02F5:  CLRF   35
....................       maxadc =615;         // 625 
02F6:  CLRF   5D
02F7:  CLRF   5C
02F8:  MOVLW  02
02F9:  MOVWF  5B
02FA:  MOVLW  67
02FB:  MOVWF  5A
....................       maxshunt=500; 
02FC:  CLRF   61
02FD:  CLRF   60
02FE:  MOVLW  01
02FF:  MOVWF  5F
0300:  MOVLW  F4
0301:  MOVWF  5E
....................       ucModelSel=1; 
0302:  MOVLW  01
0303:  MOVWF  6B
....................    } 
....................    else if(model=='B') 
0304:  GOTO   3A8
0305:  MOVF   37,W
0306:  SUBLW  42
0307:  BTFSS  03.2
0308:  GOTO   31B
....................    { 
....................       digit[4]=0X01; 
0309:  MOVLW  01
030A:  MOVWF  32
....................       digit[5]=0X02; 
030B:  MOVLW  02
030C:  MOVWF  33
....................       digit[6]=0X02; 
030D:  MOVWF  34
....................       digit[7]=0X00; 
030E:  CLRF   35
....................       maxadc=625; 
030F:  CLRF   5D
0310:  CLRF   5C
0311:  MOVWF  5B
0312:  MOVLW  71
0313:  MOVWF  5A
....................       maxshunt=1200; 
0314:  CLRF   61
0315:  CLRF   60
0316:  MOVLW  04
0317:  MOVWF  5F
0318:  MOVLW  B0
0319:  MOVWF  5E
....................    } 
....................    else if(model=='C') 
031A:  GOTO   3A8
031B:  MOVF   37,W
031C:  SUBLW  43
031D:  BTFSS  03.2
031E:  GOTO   332
....................    { 
....................       digit[4]=0X01; 
031F:  MOVLW  01
0320:  MOVWF  32
....................       digit[5]=0X00; 
0321:  CLRF   33
....................       digit[6]=0X03; 
0322:  MOVLW  03
0323:  MOVWF  34
....................       digit[7]=0X00; 
0324:  CLRF   35
....................       maxadc=625; 
0325:  CLRF   5D
0326:  CLRF   5C
0327:  MOVLW  02
0328:  MOVWF  5B
0329:  MOVLW  71
032A:  MOVWF  5A
....................       maxshunt=1000; 
032B:  CLRF   61
032C:  CLRF   60
032D:  MOVLW  03
032E:  MOVWF  5F
032F:  MOVLW  E8
0330:  MOVWF  5E
....................    } 
....................    else if(model=='D') 
0331:  GOTO   3A8
0332:  MOVF   37,W
0333:  SUBLW  44
0334:  BTFSS  03.2
0335:  GOTO   34A
....................    { 
....................       digit[4]=0X08; 
0336:  MOVLW  08
0337:  MOVWF  32
....................       digit[5]=0X00; 
0338:  CLRF   33
....................       digit[6]=0X04; 
0339:  MOVLW  04
033A:  MOVWF  34
....................       digit[7]=0X25; 
033B:  MOVLW  25
033C:  MOVWF  35
....................       maxadc=625; 
033D:  CLRF   5D
033E:  CLRF   5C
033F:  MOVLW  02
0340:  MOVWF  5B
0341:  MOVLW  71
0342:  MOVWF  5A
....................       maxshunt=800; 
0343:  CLRF   61
0344:  CLRF   60
0345:  MOVLW  03
0346:  MOVWF  5F
0347:  MOVLW  20
0348:  MOVWF  5E
....................    } 
....................    else if(model=='E')   //600A 
0349:  GOTO   3A8
034A:  MOVF   37,W
034B:  SUBLW  45
034C:  BTFSS  03.2
034D:  GOTO   361
....................    { 
....................       digit[4]=0X06; 
034E:  MOVLW  06
034F:  MOVWF  32
....................       digit[5]=0X00; 
0350:  CLRF   33
....................       digit[6]=0X00; 
0351:  CLRF   34
....................       digit[7]=0X25; 
0352:  MOVLW  25
0353:  MOVWF  35
....................       maxadc=625; 
0354:  CLRF   5D
0355:  CLRF   5C
0356:  MOVLW  02
0357:  MOVWF  5B
0358:  MOVLW  71
0359:  MOVWF  5A
....................       maxshunt=600; 
035A:  CLRF   61
035B:  CLRF   60
035C:  MOVLW  02
035D:  MOVWF  5F
035E:  MOVLW  58
035F:  MOVWF  5E
....................       //ucModelSel=1; 
....................    } 
....................    else if(model=='F') 
0360:  GOTO   3A8
0361:  MOVF   37,W
0362:  SUBLW  46
0363:  BTFSS  03.2
0364:  GOTO   378
....................    { 
....................       digit[4]=0X04; 
0365:  MOVLW  04
0366:  MOVWF  32
....................       digit[5]=0X00; 
0367:  CLRF   33
....................       digit[6]=0X00; 
0368:  CLRF   34
....................       digit[7]=0X25; 
0369:  MOVLW  25
036A:  MOVWF  35
....................       maxadc=625; 
036B:  CLRF   5D
036C:  CLRF   5C
036D:  MOVLW  02
036E:  MOVWF  5B
036F:  MOVLW  71
0370:  MOVWF  5A
....................       maxshunt=400; 
0371:  CLRF   61
0372:  CLRF   60
0373:  MOVLW  01
0374:  MOVWF  5F
0375:  MOVLW  90
0376:  MOVWF  5E
....................  
....................    } 
....................    else if(model=='G') 
0377:  GOTO   3A8
0378:  MOVF   37,W
0379:  SUBLW  47
037A:  BTFSS  03.2
037B:  GOTO   391
....................    { 
....................       digit[4]=0X03; 
037C:  MOVLW  03
037D:  MOVWF  32
....................       digit[5]=0X00; 
037E:  CLRF   33
....................       digit[6]=0X00; 
037F:  CLRF   34
....................       digit[7]=0X25; 
0380:  MOVLW  25
0381:  MOVWF  35
....................       maxadc=615; 
0382:  CLRF   5D
0383:  CLRF   5C
0384:  MOVLW  02
0385:  MOVWF  5B
0386:  MOVLW  67
0387:  MOVWF  5A
....................       maxshunt=300; 
0388:  CLRF   61
0389:  CLRF   60
038A:  MOVLW  01
038B:  MOVWF  5F
038C:  MOVLW  2C
038D:  MOVWF  5E
....................       ucModelSel=2; 
038E:  MOVLW  02
038F:  MOVWF  6B
....................    } 
....................    else if(model=='H') 
0390:  GOTO   3A8
0391:  MOVF   37,W
0392:  SUBLW  48
0393:  BTFSS  03.2
0394:  GOTO   3A8
....................    { 
....................       digit[4]=0X02; 
0395:  MOVLW  02
0396:  MOVWF  32
....................       digit[5]=0X05; 
0397:  MOVLW  05
0398:  MOVWF  33
....................       digit[6]=0X08; 
0399:  MOVLW  08
039A:  MOVWF  34
....................       digit[7]=0X25; 
039B:  MOVLW  25
039C:  MOVWF  35
....................       maxadc  =625; 
039D:  CLRF   5D
039E:  CLRF   5C
039F:  MOVLW  02
03A0:  MOVWF  5B
03A1:  MOVLW  71
03A2:  MOVWF  5A
....................       maxshunt=250; 
03A3:  CLRF   61
03A4:  CLRF   60
03A5:  CLRF   5F
03A6:  MOVLW  FA
03A7:  MOVWF  5E
....................    } 
....................  } 
03A8:  BSF    0A.3
03A9:  BCF    0A.4
03AA:  GOTO   2BC (RETURN)
....................  
....................  
.................... void SetCurrentCal_600(void) 
.................... { 
....................  
....................       if(ref2>=0 && ref2<=30)                              //10 to 50AMP 
....................            ref2=(((ref2*12.89)+100))/10; 
....................  
....................       else if(ref2>30 && ref2<=55)                         //>50 to 100AMP 
....................            ref2=((((ref2-30)*19.60)+500))/10;     //507 
....................  
....................       else if(ref2>55 && ref2<=79)                         //>100 to 150AMP 
....................            ref2=((((ref2-55)*20.42)+1000))/10;    //999 
....................  
....................       else if(ref2>79 && ref2<=125)                         //>150 to 250AMP 
....................            ref2=((((ref2-79)*21.78)+1500))/10;    //1487 
....................  
....................       else if(ref2>125 && ref2<=200)                        //>250 to 400AMP 
....................            ref2=((((ref2-125)*20.50)+2500))/10;    //2487 
....................  
....................       else if(ref2>200 && ref2<=248)                        //>400 to 500AMP 
....................            ref2=((((ref2-200)*20.24)+4000))/10; 
....................  
....................       else if(ref2>248 && ref2<=302)                        //>500 to 600AMP 
....................            ref2=((((ref2-248)*18.76)+5000))/10; 
....................  
....................       else if(ref2>302) 
....................            ref2=600; 
.................... } 
....................  
.................... void SetCurrentCal_400(void) 
.................... { 
....................       if(ref2>=0 && ref2<=32)                              //10 to 50AMP 
....................            ref2=(((ref2*12.66)+100))/10; 
....................  
....................       else if(ref2>32 && ref2<=72)                         //>50 to 100AMP 
....................            ref2=((((ref2-32)*11.60)+500))/10; 
....................  
....................       else if(ref2>72 && ref2<=110)                        //>100 to 150AMP 
....................            ref2=((((ref2-72)*12.14)+1000))/10;   //12.53 
....................  
....................       else if(ref2>110 && ref2<=149)                        //>150 to 200AMP 
....................            ref2=((((ref2-110)*12.76)+1500))/10;  //14.49 
....................  
....................       else if(ref2>149 && ref2<=227)                        //>200 to 300AMP 
....................            ref2=((((ref2-149)*12.85)+2000))/10; 
....................  
....................       else if(ref2>227 && ref2<=302)                        //>300 to 400AMP 
....................            ref2=((((ref2-227)*13.25)+3000))/10; 
....................  
....................       else if(ref2>302) 
....................            ref2=400; 
.................... } 
....................  
.................... void SetCurrentCal_500(void) 
.................... { 
....................  
....................       if(ref2>=0 && ref2<=11)                              //10 to 50AMP 
....................            ref2=(((ref2*35.40)+100))/10; 
....................  
....................       else if(ref2>11 && ref2<=37)                         //>50 to 100AMP 
....................            ref2=((((ref2-11)*19.61)+500))/10;     //507 
....................  
....................       else if(ref2>37 && ref2<=64)                         //>100 to 150AMP 
....................            ref2=((((ref2-37)*18.18)+1000))/10;    //999 
....................  
....................       else if(ref2>64 && ref2<=114)                         //>150 to 250AMP 
....................            ref2=((((ref2-64)*20.08)+1500))/10;    //1487 
....................  
....................       else if(ref2>114 && ref2<=190)                        //>250 to 400AMP 
....................            ref2=((((ref2-114)*19.87)+2500))/10;    //2487 
....................  
....................       else if(ref2>190 && ref2<=235)                        //>400 to 500AMP 
....................            ref2=((((ref2-190)*22.12)+4000))/10; 
....................  
....................       else if(ref2>235) 
....................            ref2=500; 
.................... } 
....................  
.................... void SetCurrentCal_300(void) 
.................... { 
....................       if(ref2>=0 && ref2<=32)                              //10 to 50AMP 
....................            ref2=(((ref2*12.66)+100))/10; 
....................  
....................       else if(ref2>32 && ref2<=72)                         //>50 to 100AMP 
....................            ref2=((((ref2-32)*11.60)+500))/10; 
....................  
....................       else if(ref2>72 && ref2<=110)                        //>100 to 150AMP 
....................            ref2=((((ref2-72)*12.14)+1000))/10;   //12.53 
....................  
....................       else if(ref2>110 && ref2<=149)                        //>150 to 200AMP 
....................            ref2=((((ref2-110)*12.76)+1500))/10;  //14.49 
....................  
....................       else if(ref2>149 && ref2<=227)                        //>200 to 300AMP 
....................            ref2=((((ref2-149)*12.85)+2000))/10; 
....................  
....................       else if(ref2>302) 
....................            ref2=300; 
.................... } 
....................  

Configuration Fuses:
   Word  1: 2FD4   INTRC_IO NOWDT NOPWRT NOMCLR NOCP NOCPD BOREN IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BOR4VBROWNOUT_SL NOWRT
